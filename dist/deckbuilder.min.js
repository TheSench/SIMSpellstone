for(var skillID in SKILL_DATA){var skillInfo=SKILL_DATA[skillID];"flurry"===skillID?skillInfo.type="flurry":0<=["turnStart","onAttack","onDamaged","turnEnd"].indexOf(skillInfo.type)&&(skillInfo.type="passive")}var REVERSE_FUSIONS={};for(var id in FUSIONS){var fusion=FUSIONS[id];REVERSE_FUSIONS[fusion]=id}function parseInt(value){return value>>0}function _GET(variable){for(var vars=window.location.search.substring(1).split("&"),i=0;i<vars.length;i++){var pair=vars[i].split("=");if(decodeURIComponent(pair[0])==variable)return decodeURIComponent(pair[1]?pair[1]:"")}}function _DEFINED(variable){for(var vars=window.location.search.substring(1).split("&"),i=0;i<vars.length;i++){var pair=vars[i].split("=");if(decodeURIComponent(pair[0])==variable)return!0}return!1}window.loadCardCache=function(){var cardData=storageAPI.getField("GameData","CardCache");if(cardData&&cardData.lastUpdated>DataUpdated)cardData.newCards&&($.extend(CARDS,cardData.newCards),$.extend(FUSIONS,cardData.newFusions)),DataUpdated=cardData.lastUpdated;else{var CARDS_cache={newCards:{},newFusions:{},lastUpdated:Date.now()};storageAPI.setField("GameData","CardCache",CARDS_cache)}},"function"!=typeof String.prototype.format&&(String.prototype.format=function(){var args=arguments;return this.replace(/{(\d+)}/g,function(match,number){return void 0!==args[number]?args[number]:match})}),"function"!=typeof Object.assign&&(Object.assign=function(target){"use strict";if(null==target)throw new TypeError("Cannot convert undefined or null to object");target=Object(target);for(var index=1;index<arguments.length;index++){var source=arguments[index];if(null!=source)for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}),Function.prototype.debounce=function(wait){var timeout,func=this;return function(){var context=this,args=arguments;clearTimeout(timeout),timeout=setTimeout(function(){timeout=null,func.apply(context,args)},wait)}};var matchTimer={elapsed:function(){var end=this.timeStop||Date.now();return this.elapsedSeconds(this.timeStart,end)},timeSince:function(start){return this.elapsedSeconds(start,Date.now())},elapsedSeconds:function(start,end){return((end-start)/1e3).toFixed(3)},batchElapsed:function(start){return this.timeSince(start||this.batchStarted)},startBatch:function(){this.batchStarted=Date.now()},stop:function(){this.timeStop=Date.now()},reset:function(){this.timeStart=Date.now(),this.timeStop=0}};function shuffle(list){var j,tempi,tempj,i=list.length;if(0==i)return!1;for(;--i;)j=~~(Math.random()*(i+1)),tempi=list[i],tempj=list[j],list[i]=tempj,list[j]=tempi}function initializeCard(card,p,newKey){card.owner=p,card.timer=card.cost,card.health_left=card.health,applyDefaultStatuses(card),card.key=newKey,card.reusableSkills||card.resetTimers()}function copy_deck(original_deck){var new_deck={};return new_deck.commander=original_deck.commander,new_deck.deck=copy_card_list(original_deck.deck),new_deck}function getDeckCards(original_deck,owner){var new_deck={};new_deck.commander=getCardByID(original_deck.commander),new_deck.deck=[];for(var list=original_deck.deck,battlegrounds=SIMULATOR.battlegrounds.onCreate.filter(function(bge){return!("player"===owner&&bge.enemy_only||"cpu"===owner&&bge.ally_only)}),i=0,len=list.length;i<len;i++)new_deck.deck.push(get_card_apply_battlegrounds(list[i],battlegrounds));return new_deck}function copy_card_list(original_card_list){for(var new_card_list=[],key=0,len=original_card_list.length;key<len;key++)new_card_list[key]=original_card_list[key];return new_card_list}var CardPrototype,defaultStatusValues={attack_berserk:0,attack_valor:0,attack_rally:0,attack_weaken:0,attack_corroded:0,corrosion_timer:0,mark_target:0,attackIncreasePrevention:0,barrier_ice:0,corroded:0,enfeebled:0,enraged:0,envenomed:0,heartseeker:0,imbued:0,invigorated:0,invisible:0,nullified:0,poisoned:0,protected:0,scorched:0,warded:0,jammed:!(Function.prototype.throttle=function(wait){var timeout,func=this,waitingToFire=!1;return function(){var context=this,args=arguments;timeout?waitingToFire=!0:(func.apply(context,args),waitingToFire=!1,timeout=setTimeout(function(){timeout=null,waitingToFire&&func.apply(context,args)},wait))}}),jammedSelf:!1,silenced:!1,bash_triggered:!1,dualstrike_triggered:!1,ondeath_triggered:!1,reanimated:!1};function applyDefaultStatuses(card){for(var status in card.health-=card.invigorated,card.removeImbue(),card.enhanced={},defaultStatusValues)card[status]=defaultStatusValues[status]}var makeUnit=function(){function getStatBeforeRunes(card,statBase){return getCardByID({id:card.id,level:card.level})[statBase]}function scaleSkills(new_card,skillList,mult){for(var key in skillList){var skill=skillList[key];skill.x&&((skill=copy_skill(skill)).x+=Math.ceil(skill.x*mult),skill.boosted=!0,skillList[key]=skill,new_card.highlighted.push(skill.id))}}for(var id in CardPrototype={p:null,health_left:0,timer:0,key:void 0,isCommander:function(){return"1"==this.card_type},isAssault:function(){return"2"==this.card_type},isTower:function(){return!1},isTrap:function(){return"3"==this.card_type},isAlive:function(){return 0<this.health_left},isDamaged:function(){return this.health_left<this.health},isActive:function(){return 0==this.timer},isActiveNextTurn:function(){return this.timer<=1},isInactive:function(){return 1<=this.timer},isUnjammed:function(){return!this.jammed},isUnsilenced:function(){return!this.silenced},imbue:function(skill){this.imbued||(this.imbued={});var imbueSkillsKey,imbued=this.imbued,skillID=skill.id;switch(SKILL_DATA[skillID].type){case"toggle":return this[skillID]=!0,void(this.imbued[skillID]=1);case"passive":return this[skillID]+=parseInt(skill.x),void(this.imbued[skillID]=(this.imbued[skillID]||0)+skill.x);case"flurry":return void(this.flurry||(this.flurry=skill,this.flurry.countdown=0,this.imbued.flurry=!0));case"onDeath":imbueSkillsKey="onDeathSkills";break;case"earlyActivation":imbueSkillsKey="earlyActivationSkills";break;case"activation":default:imbueSkillsKey="skill"}if(void 0===imbued[imbueSkillsKey]){var original=this[imbueSkillsKey];imbued[imbueSkillsKey]=original.length,this[imbueSkillsKey]=original.slice()}this[imbueSkillsKey].push(skill)},scorch:function(amount){var scorched=this.scorched;scorched?(scorched.amount+=amount,scorched.timer=2):this.scorched={amount:amount,timer:2}},removeImbue:function(){var imbue=this.imbued;if(imbue){for(var key in imbue){var imbuement=imbue[key];"skill"===key||"earlyActivationSkills"===key||"onDeathSkills"===key?this[key]=this[key].slice(0,imbuement):this[key]-=imbuement}this.imbued=0}},hasSkill:function(s,all){var target_skills;switch(SKILL_DATA[s].type){case"toggle":case"passive":case"flurry":return this[s];case"onDeath":target_skills=this.onDeathSkills;break;case"earlyActivation":target_skills=this.earlyActivationSkills;break;case"activation":default:target_skills=this.skill}for(var key in target_skills){var skill=target_skills[key];if(skill.id===s&&(void 0===all||(skill.all||0)==all))return!0}return!1},hasAttack:function(){return 0<this.adjustedAttack()},attackPlusBuffs:function(){return this.attack+this.attack_rally+this.attack_berserk+this.attack_valor},adjustedAttack:function(){return this.attack+this.attack_rally+this.attack_berserk+this.attack_valor-this.attack_weaken-this.attack_corroded},permanentAttack:function(){return this.attack+this.attack_berserk+this.attack_valor},isInFaction:function(faction){if(void 0===faction)return 1;var factions=faction.split(",");if(factions.length<=1)return this.type==faction?1:0<=this.sub_type.indexOf(faction.toString())?1:0;for(var i=0;i<factions.length;i++)if(!this.isInFaction(factions[i]))return 0;return 1},isTargetRarity:function(rarity){return void 0===rarity||this.rarity===Number(rarity)},isTargetDelay:function(delay){return void 0===delay||0<=delay.indexOf(this.cost)},resetTimers:function(){for(var i=0,len=this.skillTimers.length;i<len;i++)this.skillTimers[i].countdown=0},addRunes:function(runes){addRunes(this,runes)}},SKILL_DATA){var type=SKILL_DATA[id].type;"passive"===type?CardPrototype[id]=0:"toggle"===type&&(CardPrototype[id]=!1)}return applyDefaultStatuses(CardPrototype),function(original_card,unit_level,runes,skillModifiers,skillMult,isToken){unit_level=unit_level||1;var card=Object.create(CardPrototype);card.id=original_card.id,card.name=original_card.name,card.attack=original_card.attack,card.health=original_card.health,card.maxLevel=original_card.maxLevel,card.level=unit_level>card.maxLevel?card.maxLevel:unit_level,card.cost=original_card.cost,card.rarity=original_card.rarity,card.card_type=original_card.card_type,card.type=original_card.type,card.sub_type=original_card.sub_type||[],card.set=original_card.set;var upgrade,original_skills=original_card.skill;if(1<card.level)for(var key in original_card.upgrades)if(void 0!==(upgrade=original_card.upgrades[key]).cost&&(card.cost=upgrade.cost),void 0!==upgrade.health&&(card.health=upgrade.health),void 0!==upgrade.attack&&(card.attack=upgrade.attack),void 0!==upgrade.desc&&(card.desc=upgrade.desc),0<upgrade.skill.length&&(original_skills=upgrade.skill),key==card.level)break;if(original_skills=original_skills.slice(),skillModifiers&&skillModifiers.length&&function(new_card,original_skills,skillModifiers,isToken){new_card.highlighted=[];for(var i=0;i<skillModifiers.length;i++){var skillModifier=skillModifiers[i];if("statChange"===skillModifier.modifierType&&!isToken)for(var j=0;j<skillModifier.effects.length;j++){var statChange=skillModifier.effects[j];new_card.isInFaction(statChange.y)&&new_card.isTargetRarity(statChange.rarity)&&new_card.isTargetDelay(statChange.delay)&&Object.keys(statChange).forEach(function(stat){new_card[stat]=statChange[stat]})}}}(card,0,skillModifiers,isToken),runes){card.addRunes(runes);var runeMult=1;skillModifiers&&skillModifiers.forEach(function(skillModifier){"runeMultiplier"===skillModifier.modifierType&&skillModifier.effects.forEach(function(effect){card.isInFaction(effect.y)&&(runeMult=parseInt(effect.mult))})}),addRunesToSkills(original_skills,runes,runeMult)}else card.runes=[];return skillModifiers&&skillModifiers.length&&function(new_card,original_skills,skillModifiers,isToken){new_card.highlighted=[];for(var i=0;i<skillModifiers.length;i++){var skillModifier=skillModifiers[i];if("evolve_skill"===skillModifier.modifierType)for(var j=0;j<skillModifier.effects.length;j++){var evolution=skillModifier.effects[j];for(var key in original_skills){var skill=original_skills[key];skill.id===evolution.id&&skill.all==evolution.all&&new_card.isTargetRarity(evolution.rarity)&&new_card.isTargetDelay(evolution.delay)&&((skill=copy_skill(skill)).id=evolution.s,skill.boosted=!0,original_skills[key]=skill,new_card.highlighted.push(skill.id))}}else if("add_skill"===skillModifier.modifierType)for(j=0;j<skillModifier.effects.length;j++){var addedSkill=skillModifier.effects[j];if(new_card.isInFaction(addedSkill.y)&&new_card.isTargetRarity(addedSkill.rarity)&&new_card.isTargetDelay(addedSkill.delay)){var new_skill={};if(new_skill.id=addedSkill.id,new_skill.x=addedSkill.x||0,addedSkill.mult)if(addedSkill.base){var base=getStatBeforeRunes(new_card,addedSkill.base);new_skill.x+=Math.ceil(addedSkill.mult*base)}else new_skill.mult=addedSkill.mult;if(new_skill.z=addedSkill.z,new_skill.c=addedSkill.c,new_skill.s=addedSkill.s,new_skill.all=addedSkill.all,addedSkill.card&&(new_skill.card=addedSkill.card),addedSkill.level&&(new_skill.level=addedSkill.level),new_skill.boosted=!0,addedSkill.mult&&addedSkill.base&&0==new_skill.x)continue;original_skills.push(new_skill),new_card.highlighted.push(new_skill.id)}}else if("scale_attributes"!==skillModifier.modifierType||isToken){if("scale_stat"===skillModifier.modifierType&&!isToken)for(j=0;j<skillModifier.effects.length;j++){scaling=skillModifier.effects[j];new_card.isInFaction(scaling.y)&&new_card.isTargetRarity(scaling.rarity&&new_card.isTargetDelay(scaling.delay))&&(new_card[skillModifier.scaledStat]+=Math.ceil(getStatBeforeRunes(new_card,scaling.base)*scaling.mult),new_card.highlighted.push(skillModifier.scaledStat))}}else for(var j=0;j<skillModifier.effects.length;j++){var scaling=skillModifier.effects[j];if(new_card.isInFaction(scaling.y)&&new_card.isTargetRarity(scaling.rarity)&&new_card.isTargetDelay(scaling.delay)){var mult=scaling.mult,plusAttack=Math.ceil(new_card.attack*mult);new_card.attack+=plusAttack,new_card.highlighted.push("attack");var plusHealth=Math.ceil(new_card.health*mult);new_card.health+=plusHealth,new_card.highlighted.push("health"),scaleSkills(new_card,original_skills,mult)}}}}(card,original_skills,skillModifiers,isToken),skillMult&&scaleSkills(card,original_skills,skillMult),copySkills(card,original_skills),card}}(),getEnhancement=function(card,s,base){var enhancements=card.enhanced,enhanced=enhancements&&enhancements[s]||0;return enhanced<0&&(enhanced=Math.ceil(base*-enhanced)),enhanced},adjustAttackIncrease=function(card,originalIncrease){if(card.attackIncreasePrevention){var adjustment=Math.min(card.attackIncreasePrevention,originalIncrease);return card.attackIncreasePrevention-=adjustment,debug&&(echo+="<u>("+adjustment+" attack increase prevented by weaken, "+card.attackIncreasePrevention+" prevention remains)</u><br/>"),originalIncrease-adjustment}return originalIncrease},getSkillMult=function(skill,target,defaultBase){var mult=skill.mult;if(mult){var base=skill.base||defaultBase||"health";return Math.ceil(mult*target[base])}return 0},isImbued=function(card,skillID,i){var imbueSkillsKey;switch(SKILL_DATA[skillID].type){case"flurry":case"toggle":return card.imbued[skillID];case"passive":return card[skillID]===card.imbued[skillID];case"onDeath":imbueSkillsKey="onDeathSkills";break;case"earlyActivation":imbueSkillsKey="earlyActivationSkills";break;case"activation":default:imbueSkillsKey="skill"}return void 0!==card.imbued[imbueSkillsKey]&&i>=card.imbued[imbueSkillsKey]},addRunes=function(card,runes){card.runes||(card.runes=[]);for(var i=0,len=runes.length;i<len;i++){var runeID=runes[i].id,statBoost=getRune(runeID).stat_boost;for(var key in card.runes.push({id:runeID,stat_boost:statBoost}),statBoost){var boost=statBoost[key];"skill"==key||(isNaN(boost)&&(boost=Math.max(Math.ceil(card[key]*boost.mult),boost.min_bonus||1)),card[key]+=parseInt(boost))}}};function addRunesToSkills(skills,runes,runeMult){if(runes)for(var i=0,len=runes.length;i<len;i++){var runeID=runes[i].id,statBoost=getRune(runeID).stat_boost;for(var key in statBoost){var boost=statBoost[key];if("skill"==key)for(var skillID=boost.id,amount=boost.x,mult=boost.mult,s=0;s<skills.length;s++){var skill=skills[s];if(skill.id==skillID&&(skill.all||0)==(boost.all||0)){skill=copy_skill(skill),!amount&&mult&&(amount=Math.ceil(skill.x*mult)),boost.min_bonus&&(amount=Math.max(amount,boost.min_bonus)),amount&&(skill.x+=parseInt(amount)*runeMult),boost.c&&(skill.c-=Math.min(skill.c,parseInt(boost.c)*runeMult)),skill.boosted=!0,skills[s]=skill;break}}}}}var getRune=function(rune_id){return RUNES[rune_id]||{stat_boost:{}}},canUseRune=function(card,runeID){var rune=getRune(runeID),statBoost=rune.stat_boost;if(rune.faction_req&&!card.isInFaction(rune.faction_req))return!1;for(var key in statBoost)if("skill"==key){var skill=statBoost[key],all=skill.all?1:0;if(!card.hasSkill(skill.id,all))return!1}return!0};function MakeSkillModifier(name,effect){return{name:name,modifierType:effect.effect_type,effects:[effect]}}function MakeStatScalar(name,effect){return{name:name,modifierType:"scale_stat",scaledStat:effect.effect_type.replace("scale_",""),effects:[effect]}}var MakeOnPlayBGE=function(){function OnPlayBGE(name,effect){this.p=null,this.name=name,this.effect=effect,this.runes=[]}return OnPlayBGE.prototype={onCardPlayed:function(card){SIMULATOR.onPlaySkills[this.effect.id](this,card,this.effect)},isCommander:function(){return!1},isAssault:function(){return!1}},function(name,effects){return new OnPlayBGE(name,effects)}}(),MakeTrap=function(){function Trap(name,trap_card){this.name=name,this.id=trap_card.id,this.base=trap_card.base,this.mult=trap_card.mult,this.target_deck=trap_card.target_deck,this.y=trap_card.y}return Trap.prototype={onCardPlayed:function(card,p_deck,o_deck){var deck="opponent"===this.target_deck?o_deck:p_deck;if(card.isInFaction(this.y)){for(var targets=[],t=0;t<deck.length;t++){(card=deck[t]).trap||targets.push(card)}if(targets.length){var trapLevel=Math.ceil(card[this.base]*this.mult),trap=getCardByID(makeUnitInfo(this.id,trapLevel));targets[~~(Math.random()*targets.length)].trap=trap,debug&&(echo+=this.name+" inserts "+debug_name(trap)+" into the opposing deck.<br/>")}}}},function(name,effects){return new Trap(name,effects)}}(),getBattlegrounds=function(getbattleground,selfbges,enemybges,mapbges,campaignID,missionlevel,raidID,raidlevel){var battlegrounds={onCreate:[],onTurn:[],onCardPlayed:[]};return addBgesFromList(battlegrounds,getbattleground),addBgesFromList(battlegrounds,selfbges,"player"),addBgesFromList(battlegrounds,enemybges,"cpu"),addMapBGEs(battlegrounds,mapbges,"player"),campaignID?addMissionBGE(battlegrounds,campaignID,missionlevel):raidID&&addRaidBGE(battlegrounds,raidID,raidlevel),battlegrounds};function addBgesFromList(battlegrounds,getbattleground,player){if(!getbattleground)return null;for(var selected=getbattleground.split(","),i=0;i<selected.length;i++){var id=selected[i];addBgeFromList(battlegrounds,BATTLEGROUNDS[id],player)}}function addMissionBGE(battlegrounds,campaignID,missionLevel){var campaign=CAMPAIGNS[campaignID];if(campaign){var id=campaign.battleground_id;if(id){var battleground=BATTLEGROUNDS[id];if(missionLevel=Number(missionLevel)-1,!battleground.starting_level||Number(battleground.starting_level)<=missionLevel){if(battleground.scale_with_level){battleground=JSON.parse(JSON.stringify(battleground));for(var levelsToScale=missionLevel-Number(battleground.starting_level),i=0;i<battleground.effect.length;i++){var effect=battleground.effect[i];effect.mult=effect.base_mult+effect.mult*levelsToScale}}addBgeFromList(battlegrounds,battleground,"cpu")}}}}function addRaidBGE(battlegrounds,raidID,raidLevel){var bge_id=RAIDS[raidID].bge;if(bge_id){var battleground=BATTLEGROUNDS[bge_id];if(battleground&&Number(raidLevel)>=Number(battleground.starting_level))for(var enemy_only=battleground.enemy_only,j=0;j<battleground.effect.length;j++){var effect=battleground.effect[j],effect_type=effect.effect_type;if("skill"===effect_type){if(battleground.scale_with_level)var mult=battleground.scale_with_level*(raidLevel-battleground.starting_level+1);else mult=1;(bge=MakeBattleground(battleground.name,effect,mult)).enemy_only=enemy_only,battlegrounds.onTurn.push(bge)}else if(0<=["evolve_skill","add_skill","scale_attributes","statChange","runeMultiplier"].indexOf(effect_Type)){(bge=MakeSkillModifier(battleground.name,effect)).enemy_only=enemy_only,battlegrounds.onCreate.push(bge)}else if(0<=["scale_attack","scale_health"].indexOf(effect_Type)){(bge=MakeStatScalar(battleground.name,effect)).enemy_only=enemy_only,battlegrounds.onCreate.push(bge)}else if("trap_card"===effect_type){var bge;(bge=MakeTrap(battleground.name,effect)).enemy_only=enemy_only,battlegrounds.onCardPlayed.push(bge)}}}}function addMapBGEs(battlegrounds,mapbges,player){if(!mapbges)return null;for(var selected=mapbges.split(","),i=0;i<selected.length;i++){var parts=selected[i].split("-"),location=parts[0],index=parts[1],value=parts[2],mapBGE=Object.keys(MAP_BATTLEGROUNDS).filter(function(id){return MAP_BATTLEGROUNDS[id].location_id==location})[0];addBgeFromList(battlegrounds,(mapBGE=MAP_BATTLEGROUNDS[mapBGE]).effects[index].upgrades[value],player)}}function addBgeFromList(battlegrounds,battleground,player){for(var j=0;j<battleground.effect.length;j++){var effect=battleground.effect[j],effect_type=effect.effect_type;if("skill"===effect_type){var bge=MakeBattleground(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onTurn.push(bge)}else if(0<=["evolve_skill","add_skill","scale_attributes","statChange","runeMultiplier"].indexOf(effect_type)){bge=MakeSkillModifier(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCreate.push(bge)}else if(0<=["scale_attack","scale_health"].indexOf(effect_type)){bge=MakeStatScalar(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCreate.push(bge)}else if("trap_card"===effect_type){bge=MakeTrap(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCardPlayed.push(bge)}else if("on_play"===effect_type){(bge=MakeOnPlayBGE(battleground.name,effect.effect)).attacker=effect.attacker,bge.defender=effect.defender,bge.first_play=effect.first_play,"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCardPlayed.push(bge)}}}var MakeBattleground=function(){function Battleground(name,original_skills,mult){this.name=name,copySkills(this,[original_skills],mult)}return Battleground.prototype={p:null,name:null,runes:[],isCommander:function(){return!1},isAssault:function(){return!1},resetTimers:function(){for(var i=0,len=this.skillTimers.length;i<len;i++)this.skillTimers[i].countdown=0}},function(name,skill,mult){return new Battleground(name,skill,mult)}}();function copySkills(new_card,original_skills,mult){new_card.skill=[],new_card.earlyActivationSkills=[],new_card.onDeathSkills=[];var skillTimers=[],reusable=!0;for(var key in original_skills){var newSkill=original_skills[key],copySkill=copy_skill(newSkill);newSkill.c?(setSkill(new_card,copySkill),skillTimers.push(copySkill),reusable=!1):(mult&&(copySkill.x=Math.ceil(copySkill.x*mult)),setSkill(new_card,copySkill))}new_card.reusableSkills=reusable,new_card.skillTimers=skillTimers}function setSkill(new_card,skill){var skillID=skill.id;switch(SKILL_DATA[skillID].type){case"toggle":return void(new_card[skillID]=!0);case"passive":new_card[skill.id]=(0|new_card[skill.id])+skill.x;break;case"flurry":new_card[skill.id]=skill;break;case"onDeath":new_card.onDeathSkills.push(skill);break;case"earlyActivation":new_card.earlyActivationSkills.push(skill);break;case"activation":default:new_card.skill.push(skill)}}function copy_skill(original_skill){var new_skill={};return new_skill.id=original_skill.id,new_skill.x=original_skill.x||0,new_skill.mult=original_skill.mult,new_skill.on_delay_mult=original_skill.on_delay_mult,new_skill.all=original_skill.all,new_skill.y=original_skill.y,new_skill.z=original_skill.z,new_skill.c=original_skill.c,new_skill.s=original_skill.s,new_skill}function debug_name(card,hideStats){if("cpu"==card.owner)var tag="i";else tag="b";var output="<"+tag+">";if(output+=card.name,card.runes.length&&(output+="*"),1<card.maxLevel&&(output+="{"+card.level+"/"+card.maxLevel+"}"),void 0!==card.key&&(output+=" ("+card.key+")"),output+="</"+tag+">",!hideStats){if(output+="<u>",card.isCommander())output+=" [",void 0!==card.health_left?output+=card.health_left:output+=card.health,output+=" HP]";else if(card.isAssault()){output+=" [";var atk=card.adjustedAttack();!isNaN(atk)&&null!=atk||(atk=card.attack),output+=atk,output+="/",void 0!==card.health_left?output+=card.health_left:output+=card.health,output+="/",void 0!==card.timer?output+=card.timer:output+=card.cost,output+="]"}output+="</u>"}return output}function debug_skill(skill){var output=convertName(skill.id);return skill.all&&(output+=" all"),skill.y&&(output+=" "+factions.names[skill.y]),skill.s&&(output+=" "+convertName(skill.s)),skill.c?output+=" every "+skill.c+" turns":skill.x&&(output+=" "+skill.x),output}function convertName(skillID){var skillData=SKILL_DATA[skillID];return skillData?skillData.name:skillID}var base64chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!~",runeDelimiter="/",indexDelimiter="-",priorityDelimiter="|",noFusionInHash={};for(var id in CARDS){if(id<1e4)(!(fusion=FUSIONS[id])||Number(fusion)<1e4)&&(noFusionInHash[id]=!0)}var maxRuneID=1e3;function unitInfo_to_base64(unit_info){var baseID=parseInt(unit_info.id),level=parseInt(unit_info.level)-1;if(noFusionInHash[baseID]){var fusion=Math.floor(level/7);level=level%7}else{fusion=Math.floor(baseID/1e4);baseID%=1e4}var runeID=0;unit_info.runes.length&&(runeID=parseInt(unit_info.runes[0].id),runeID%=5e3);unit_info.priority;var dec=baseID;return decimal_to_base64(dec=(dec=7*(dec=3*dec+fusion)+level)*maxRuneID+runeID,5)}function base64_to_unitInfo(base64){var dec=base64_to_decimal(base64),runeID=dec%maxRuneID,level=(dec=(dec-runeID)/maxRuneID)%7,fusion=(dec=(dec-level++)/7)%3,unitID=dec=(dec-fusion)/3;noFusionInHash[unitID]?level+=7*fusion:0<fusion&&(unitID=Number(fusion+""+unitID));var unit_info=makeUnitInfo(unitID,level);return 0<runeID&&unit_info.runes.push({id:5e3+runeID}),unit_info}function decimal_to_base64(dec,len){for(var base64="",i=0;i<len;i++){var part=dec%64;base64+=base64chars[part],dec=(dec-part)/64}return base64}function base64_to_decimal(base64){for(var dec=0,i=base64.length-1;0<=i;i--){dec*=64,dec+=base64chars.indexOf(base64[i])}return dec}function runeID_to_decimal(runeID){if(0==runeID)return 0;var runeLevel=(runeID=parseInt(runeID)%5e3)%10,runeType=(runeID-runeLevel)/10;return runeID=runeID=5*runeType+runeLevel-1}function base64_to_runeID(base64){return decimal_to_runeID(base64chars.indexOf(base64[0])+64*base64chars.indexOf(base64[1]))}function decimal_to_runeID(decimal){var runeLevel=decimal%5,runeType=(decimal-runeLevel)/5;return 0==runeType?0:10*runeType+runeLevel+5001}function numberToBase64(decimal){return base64chars[Math.floor(decimal/64)]+base64chars[decimal%64]}function base64ToNumber(base64){return 64*base64chars.indexOf(base64[0])+base64chars.indexOf(base64[1])}function hash_encode(deck){var current_hash=[],has_priorities=!1,has_indexes=!1,indexes=[];for(var k in deck.commander&&current_hash.push(unitInfo_to_base64(deck.commander)),deck.deck){(current_card=deck.deck[k]).priority&&(has_priorities=!0),current_card.index&&(indexes.push(numberToBase64(current_card.index)),has_indexes=!0),current_hash.push(unitInfo_to_base64(current_card))}if(has_priorities){var priorities=priorityDelimiter;for(var k in deck.deck){var current_card;(current_card=deck.deck[k]).priority?priorities+=current_card.priority:priorities+="0"}current_hash.push(priorities)}return has_indexes&&(indexes=indexDelimiter+indexes.join(""),current_hash.push(indexes)),current_hash=current_hash.join("")}function areEqual(unitInfo1,unitInfo2){return!unitInfo1==!unitInfo2&&unitInfo_to_base64(unitInfo1)==unitInfo_to_base64(unitInfo2)}function hash_decode(hash){var unitInfo,indexes,current_deck={deck:[]};0<hash.indexOf(indexDelimiter)&&(indexes=hash.substr(hash.indexOf(indexDelimiter)+1).match(/.{1,2}/g),hash=hash.substr(0,hash.indexOf(indexDelimiter)));for(var unitidx=0,i=0;i<hash.length;i+=5){var unitHash=hash.substr(i,5);unitInfo=base64_to_unitInfo(unitHash),0<unitidx&&indexes&&(unitInfo.index=base64ToNumber(indexes[unitidx-1])),unitInfo&&(loadCard(unitInfo.id)?(!current_deck.commander&&is_commander(unitInfo.id)?current_deck.commander=unitInfo:current_deck.deck.push(unitInfo),unitidx++):console.log("Could not decode '"+unitHash+"' ("+unitInfo.id+")"))}return current_deck.commander||(current_deck.commander=elariaCaptain),current_deck}function createEmptyDeck(){return{deck:[],commander:elariaCaptain}}function load_deck_mission(id,level){var missionInfo=MISSIONS[id];return missionInfo?load_preset_deck(missionInfo,level,6):0}function load_deck_raid(id,level,maxedAt){var raidInfo=RAIDS[id];return raidInfo?load_preset_deck({commander:raidInfo.commander,deck:raidInfo.deck.card},level,Number(raidInfo.upgradeLevels)):0}var reverseFusions,DoNotFuse=["8005","8006","8007","8008","8009","8010"];function load_preset_deck(deckInfo,level,upgradeLevels){var maxedAt=upgradeLevels+1;level=level||maxedAt;var current_deck=[];current_deck.deck=[];var commanderInfo=getPresetCommander(deckInfo,level),commander=getPresetUnit(commanderInfo,level,maxedAt);commanderInfo.possibilities&&(commander.randomInfo={possibilities:commanderInfo.possibilities,level:level,maxedAt:maxedAt}),current_deck.commander=commander;var presetDeck=deckInfo.deck,deck=current_deck.deck;for(var current_key in presetDeck){var unit=getPresetUnit(presetDeck[current_key],level,maxedAt);unit&&deck.push(unit)}var upgradePoints=getUpgradePoints(level,maxedAt,getMaxUpgradePoints(deck));if(1<level&&level<maxedAt)for(var canFuse=deck.slice();0<upgradePoints&&0<canFuse.length;){var index=Math.floor(Math.random()*canFuse.length);upgradeCard(canFuse[index])?upgradePoints--:canFuse.splice(index,1)}return current_deck}function update_preset_deck(deck){if(randomizationInfo=deck.commander.randomInfo){var possibilities=randomizationInfo.possibilities;(unit=getPresetUnit(possibilities[~~(Math.random()*possibilities.length)],randomizationInfo.level,randomizationInfo.maxedAt)).randomInfo=randomizationInfo,deck.commander=unit}for(var cpu_cards=deck.deck,i=0,len=cpu_cards.length;i<len;i++){var unit,randomizationInfo;(randomizationInfo=(unit=cpu_cards[i]).randomInfo)&&((unit=getPresetUnit(randomizationInfo.unitInfo,randomizationInfo.level,randomizationInfo.maxedAt)).randomInfo=randomizationInfo,cpu_cards[i]=unit)}return getDeckCards(deck,"cpu")}function getPresetCommander(deckInfo,level){level=parseInt(level);var commander=deckInfo.commander;if(commander.card){for(var possibilities=[],i=0;i<commander.card.length;i++){var card=commander.card[i],minLevel=parseInt(card.min_mastery_level)||0,maxedAt=parseInt(card.max_mastery_level)||999;minLevel<=level&&level<=maxedAt&&possibilities.push(card)}(commander=possibilities[~~(Math.random()*possibilities.length)]).possibilities=possibilities}return commander}function getUpgradePoints(level,maxedAt,maxUpgradePoints){var percentCompvare;return percentCompvare=7==maxedAt?(level-1)/(maxedAt-1):level/maxedAt,Math.ceil(maxUpgradePoints*percentCompvare)}function getMaxUpgradePoints(deck){for(var maxUpgradePoints=0,i=0;i<deck.length;i++){var card=getCardByID(deck[i]);maxUpgradePoints+=(getMaxFusions(card)+1)*card.maxLevel-1}return maxUpgradePoints}function getMaxFusions(unit){for(var id=baseFusion(unit),fusion=-1;void 0!==id;)fusion++,id=FUSIONS[id];return fusion}function baseFusion(unit){for(var id,baseID=unit.id;void 0!==(baseID=REVERSE_FUSIONS[id=baseID]););return id}function getPresetUnit(unitInfo,level,maxedAt){if(level=parseInt(level),unitInfo.mastery_level&&level<parseInt(unitInfo.mastery_level))return null;if(unitInfo.remove_mastery_level&&level>=parseInt(unitInfo.remove_mastery_level))return null;var cardID=unitInfo.id,random=!1;cardID||(cardID=getRandomCard(unitInfo),random=!0);var unitLevel=unitInfo.level||1;if(maxedAt<=level)unitLevel=CARDS[cardID].maxLevel,canFuse(cardID)&&(cardID=fuseCard(cardID));else if(1<level&&is_commander(cardID)){var upgradesPerLevel=(CARDS[cardID].maxLevel-1)/(maxedAt-1),levelsFromBase=level-1;unitLevel=Math.ceil(upgradesPerLevel*levelsFromBase)}var unit=makeUnitInfo(cardID,unitLevel);return random&&(unit.randomInfo={unitInfo:unitInfo,level:level,maxedAt:maxedAt}),unit}function getRandomCard(unitInfo){var possibilities=[];for(var id in CARDS)if(!REVERSE_FUSIONS[id]){var card=CARDS[id];if("1"!=card.card_type&&!(unitInfo.max_rarity&&Number(unitInfo.max_rarity)<Number(card.rarity)||unitInfo.min_rarity&&Number(unitInfo.min_rarity)>Number(card.rarity))&&(!unitInfo.type||unitInfo.type==card.type||0<=card.sub_type.indexOf(unitInfo.type.toString()))){if(unitInfo.set)if(unitInfo.set.split(",").indexOf(card.set)<0)continue;possibilities.push(id)}}return possibilities[~~(Math.random()*possibilities.length)]}function upgradeCard(unitInfo){var maxLevel=CARDS[unitInfo.id].maxLevel;if(unitInfo.level===maxLevel){if(!canFuse(unitInfo.id))return!1;unitInfo.id=fuseCard(unitInfo.id,1),unitInfo.level=1}else unitInfo.level++;return!0}function canFuse(cardID){return!(-1<DoNotFuse.indexOf(cardID))&&(!is_commander(cardID)&&!!FUSIONS[cardID])}function fuseCard(cardID,fusion){if(-1==DoNotFuse.indexOf(cardID))if(fusion)for(var i=0;i<fusion;i++)cardID=doFuseCard(cardID);else for(;;){var fused=doFuseCard(cardID);if(cardID===fused)break;cardID=fused}return cardID}function doFuseCard(cardID){var fused=FUSIONS[cardID];return fused||cardID}function getFusion(cardID){var fusion=0;for(reverseFusions||getReverseFusions();fusion++,reverseFusions[cardID];);return fusion}function getReverseFusions(){for(var key in reverseFusions={},FUSIONS)reverseFusions[FUSIONS[key]]=key}var get_card_apply_battlegrounds=function(id,battlegrounds,isToken){return getCardByID(id,battlegrounds=battlegrounds||SIMULATOR.battlegrounds.onCreate,null,isToken)};function get_skills(id,level){var upgrade,card=loadCard(id),skills=card.skill;if(1<level)for(var key in card.upgrades)if(0<(upgrade=card.upgrades[key]).skill.length&&(skills=upgrade.skill),key==level)break;return skills}function getCardByID(unit,skillModifiers,skillMult,isToken){var current_card=loadCard(unit.id);if(current_card){current_card.skill||(current_card.skill=[]);var card=makeUnit(current_card,unit.level,unit.runes,skillModifiers,skillMult,isToken);return unit.priority&&(card.priority=unit.priority),card}return console.log(unit.id+" not found"),(current_card={}).id=unit.id,current_card.level=unit.level,current_card.name=void 0,current_card.health=void 0,current_card.skill=[],current_card}function get_slim_card_by_id(unit,getDetails){var current_card=loadCard(unit.id),new_card={};if("1"==current_card.card_type?(new_card.isCommander=function(){return!0},new_card.isAssault=function(){return!1}):(new_card.isCommander=function(){return!1},new_card.isAssault=function(){return!0}),current_card){if(new_card.id=current_card.id,new_card.name=current_card.name,new_card.rarity=current_card.rarity,new_card.maxLevel=current_card.maxLevel,unit.level?(new_card.level=unit.level,new_card.level>new_card.maxLevel&&(new_card.level=new_card.maxLevel)):new_card.level=1,getDetails){if(new_card.attack=current_card.attack,new_card.health=current_card.health,new_card.cost=current_card.cost,new_card.set=current_card.set,new_card.card_type=current_card.card_type,new_card.type=current_card.type,new_card.sub_type=current_card.sub_type||[],new_card.skill=current_card.skill,1<new_card.level)for(var key in current_card.upgrades){var upgrade=current_card.upgrades[key];if(void 0!==upgrade.cost&&(new_card.cost=upgrade.cost),void 0!==upgrade.health&&(new_card.health=upgrade.health),void 0!==upgrade.attack&&(new_card.attack=upgrade.attack),void 0!==upgrade.desc&&(new_card.desc=upgrade.desc),0<upgrade.skill.length&&(new_card.skill=upgrade.skill),key==new_card.level)break}var runes=unit.runes;runes&&(new_card.skill=new_card.skill.slice(),addRunes(new_card,runes),addRunesToSkills(new_card.skill,runes))}}else new_card.id=void 0,new_card.name=void 0,new_card.card_type=void 0,new_card.set=void 0,new_card.type=void 0,new_card.sub_type=[],new_card.level=void 0,new_card.maxLevel=void 0,getSkills&&(new_card.skill=[]);return new_card}function loadCard(id){return CARDS[id]}function getCardInfo(unit){var id=unit.id,level=unit.level,original=CARDS[id],card=Object.assign({},original);if(1<level&&1<level)for(var key in original.upgrades){var upgrade=original.upgrades[key];if(void 0!==upgrade.cost&&(card.cost=upgrade.cost),void 0!==upgrade.health&&(card.health=upgrade.health),void 0!==upgrade.attack&&(card.attack=upgrade.attack),void 0!==upgrade.desc&&(card.desc=upgrade.desc),0<upgrade.skill.length&&(card.skill=upgrade.skill),key==level)break}return card.level=level,card.maxLevel=original.maxLevel,card}function get_card_name_by_id(id){var card=loadCard(id);return card?card.name:0}function is_commander(id){var card=loadCard(id);return card&&"1"==card.card_type}function is_assault(id){var card=loadCard(id);return card&&"2"==card.card_type}function is_trap(id){var card=loadCard(id);return card&&"3"==card.card_type}var makeUnitKey=function(unit){var unitKey=unit.id+"_"+unit.level;return unit.runes&&unit.runes.length&&(unitKey+="_"+unit.runes[0].id),unitKey};function makeUnitInfo(id,level,runes){var unit={id:Number(id),level:Number(level),runes:[]};return runes&&(unit.runes=runes),unit}var elariaCaptain=makeUnitInfo(202,1);function getRarity(rarity){return rarityStrings[rarity]}function getCurrentPage(){var currentPage=window.location.href,pageEnd=currentPage.indexOf(".html"),pageStart=(currentPage=currentPage.substring(0,pageEnd)).lastIndexOf("/")+1;return currentPage=currentPage.substring(pageStart).toLowerCase()}var rarityStrings=["","Common","Rare","Epic","Legendary","Mythic"],factions={names:{0:"Factionless",1:"Aether",2:"Chaos",3:"Wyld",4:"Frog",5:"Elemental",6:"Angel",7:"Undead",8:"Void",9:"Dragon",10:"Avian",11:"Goblin",12:"Seafolk",13:"Insect",14:"Bear",15:"Token",16:"Mecha",17:"Knight",999:"Tower"},IDs:{Factionless:0,Aether:1,Chaos:2,Wyld:3,Frog:4,Elemental:5,Angel:6,Undead:7,Void:8,Dragon:9,Avian:10,Goblin:11,Seafolk:12,Insect:13,Bear:14,Token:15,Mecha:16,Knight:17,Tower:999}},CARD_GUI={};function createImg(src,className){var img=createElement("img",className);return img.src=src,img}function createDiv(className,content){return createElement("div",className,content)}function createSpan(className,content){return createElement("span",className,content)}function createElement(tagName,className,content){var el=document.createElement(tagName);return null!=className&&(el.className=className),null!=content&&el.append(content),el}!function(){var assetsRoot="";function getAndClearElement(id){var element=document.getElementById(id);return element.replaceChildren(),element}function appendChildren(parent,children){var fragment=document.createDocumentFragment();fragment.replaceChildren.apply(fragment,children),parent.appendChild(fragment)}function makeDeckHTML(deck,noblanks,battlegrounds){var cards=[],commander=getCardByID(deck.commander);cards.push(create_card_html(commander,!1,!1));for(var i=0,len=deck.deck.length;i<len;i++){var deckEntry=deck.deck[i];if(battlegrounds)var unit=get_card_apply_battlegrounds(deckEntry,battlegrounds);else unit=getCardByID(deckEntry);cards.push(create_card_html(unit,!1,!1))}if(!noblanks)for(;i<15;i++)cards.push(createDiv("card blank"));return cards}function doDrawField(field,drawableHand,callback,turn,activeUnit){drawableHand=drawableHand||[];var fieldHTML=[];if(turn){var htmlTurnCounter=document.createElement("h1");htmlTurnCounter.innerText="Turn: "+turn+" (Currently at "+SIMULATOR.calculatePoints(!0)+" points)",fieldHTML.push(htmlTurnCounter)}var divField=createDiv("field"),activeUnitOwner=null;if(activeUnit){activeUnitOwner=activeUnit.owner;activeUnit=activeUnit.isCommander()?-1:activeUnit.key}return"player"===activeUnitOwner?(divField.appendChild(draw_field(field.cpu)),divField.appendChild(draw_field(field.player,activeUnit))):(divField.appendChild(draw_field(field.cpu,activeUnit)),divField.appendChild(draw_field(field.player))),fieldHTML.push(divField),fieldHTML.push(draw_hand(drawableHand,callback,turn)),fieldHTML.push(document.createElement("br")),fieldHTML.push(document.createElement("br")),fieldHTML}function draw_field(field,activeUnit){var cards=createDiv("float-left"),htmlCard=create_card_html(field.commander,!1,!0);-1===activeUnit&&highlightCard(htmlCard),cards.appendChild(htmlCard);var units=field.assaults;if(units)for(var i=0,len=units.length;i<len;i++){var unit=units[i];htmlCard=create_card_html(unit,!1,!0);unit.timer&&htmlCard.classList.add("inactive"),activeUnit===i&&highlightCard(htmlCard),cards.appendChild(htmlCard)}return cards}function draw_hand(hand,callback,state){for(var cards=createDiv("float-left hand"),i=0,len=hand.length;i<len;i++){var unit=hand[i];if(unit){var htmlCard=create_card_html(unit,!1);0===i?htmlCard.classList.add("left"):2===i?htmlCard.classList.add("right"):2<i&&htmlCard.classList.add("inactive"),callback&&htmlCard.addEventListener("click",function(inner){return function(){choice=inner,callback(state)}}(i)),cards.appendChild(htmlCard)}}return cards}function highlightCard(htmlCard){htmlCard.style.outline="5px solid LawnGreen"}function addMult(htmlCard,multiplier){var iMult=parseInt(multiplier);if(iMult==multiplier&&(multiplier=1<iMult?iMult:null),multiplier){var multDiv=createDiv("multiplier","x"+multiplier);multDiv.setAttribute("data-count",multiplier);var multIcon=createImg(getAssetPath("cardAssets")+"multiplier.png","multiplier");htmlCard.appendChild(multIcon),htmlCard.appendChild(multDiv)}}function create_card_html(card,compactSkills,onField,onclick,onrightclick,onmouseover,state){var htmlCard=createDiv("card");htmlCard.setAttribute("data-id",card.id),htmlCard.setAttribute("data-level",card.level);for(var runes=card.runes,runeIDs=[],boosts={},i=0,len=runes.length;i<len;i++){var runeID=runes[i].id;runeIDs.push(runes[i].id);var rune=getRune(runeID);for(var key in rune.stat_boost)"skill"==key&&(key=rune.stat_boost.skill.id),boosts[key]=!0}var highlighted=card.highlighted;if(highlighted)for(i=0;i<highlighted.length;i++){boosts[key=highlighted[i]]=!0}htmlCard.setAttribute("data-runeids",runeIDs.join(","));var picture=loadCard(card.id).picture;if(picture){var icon=document.createElement("i");0==picture.indexOf("portrait_")?icon.className="portrait portrait-"+picture:icon.className="sprite sprite-"+picture,htmlCard.appendChild(icon)}card.isCommander()&&htmlCard.classList.add("commander"),htmlCard.classList.add(factions.names[card.type].toLowerCase());var divName=createDiv("card-name",(void 0!==card.uid?"("+card.uid+") ":"")+card.name),divID=createDiv("card-id","("+card.id+")");if(divName.appendChild(divID),htmlCard.appendChild(divName),!card.isCommander()){if(0<=card.attack){if(onField){card.isUnjammed()||htmlCard.classList.add("frozen");var htmlAttack=createDiv("card-attack",card.adjustedAttack().toString());card.adjustedAttack()>card.attack?htmlAttack.classList.add("increased"):card.adjustedAttack()<card.attack?htmlAttack.classList.add("decreased"):boosts.attack&&htmlAttack.classList.add("increased")}else{htmlAttack=createDiv("card-attack",card.attack.toString());boosts.attack&&htmlAttack.classList.add("increased")}htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Attack.png","attack")),htmlCard.appendChild(htmlAttack)}0<=card.cost&&(onField?card.timer&&(htmlCard.appendChild(createDiv("delay",card.timer)),htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Timer.png","timer"))):(htmlCard.appendChild(createDiv("delay",card.cost)),htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Timer.png","timer"))))}if(0<=card.health){if(onField){var htmlHealth=createDiv("card-health",card.health_left.toString());card.health_left<card.health?htmlHealth.classList.add("decreased"):boosts.health&&htmlHealth.classList.add("increased")}else{htmlHealth=createDiv("card-health",card.health.toString());boosts.health&&htmlHealth.classList.add("increased")}htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Health.png","health")),htmlCard.appendChild(htmlHealth)}var divSkills=createDiv("card-skills"),skillsShort=createDiv("card-skills-short");card.earlyActivationSkills&&appendSkillsHtml(card,divSkills,skillsShort,card.earlyActivationSkills,onField,boosts),appendSkillsHtml(card,divSkills,skillsShort,card.skill,onField,boosts),card.onDeathSkills&&appendSkillsHtml(card,divSkills,skillsShort,card.onDeathSkills,onField,boosts),function(divSkills,skillsShort,card,onField,boosts){Object.getOwnPropertyNames(SKILL_DATA).filter(function(skillID){return 0<=["passive","toggle"].indexOf(SKILL_DATA[skillID].type)}).forEach(function(skill){!function(divSkills,skillsShort,onField,card,skillName,boosts){var value=card[skillName];if(value){var skill={id:skillName,x:value,boosted:boosts[skillName]};divSkills.appendChild(getSkillHtml(card,skill,onField)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(skill.id))}}(divSkills,skillsShort,onField,card,skill,boosts)});var flurry=card.flurry;flurry&&(divSkills.appendChild(getSkillHtml(card,flurry,onField)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(flurry.id)))}(divSkills,skillsShort,card,onField,boosts);var skillsDetail=divSkills.cloneNode(!0);if(skillsDetail.className="card-skills-detailed",skillsShort.hasChildNodes()&&(compactSkills?(htmlCard.appendChild(skillsShort),htmlCard.appendChild(divSkills)):htmlCard.appendChild(skillsDetail)),htmlCard.appendChild(createDiv("faction")),onField){var statuses=function(card){var debuffs=[];if(card.enfeebled){var status=createStatus("enfeeble",card.enfeebled);debuffs.push(status)}if(card.marked){status=createStatus("enfeeble",card.marked);debuffs.push(status)}if(card.nullified){status=createStatus("nullify",card.nullified);debuffs.push(status)}if(card.poisoned){status=createStatus("poison",card.poisoned);debuffs.push(status)}if(card.scorched&&card.scorched.amount){status=createStatus("burn",card.scorched.amount);debuffs.push(status)}var buffs=[];if(card.enraged){status=createStatus("enrage",card.enraged);debuffs.push(status)}if(card.protected){status=createStatus("protect",card.protected);buffs.push(status)}if(card.invisible){status=createStatus("evade",card.invisible);buffs.push(status)}var statuses=[];if(0<debuffs.length){for(var divDebuffs=createDiv("card-debuffs"),i=0,len=debuffs.length;i<len;i++)divDebuffs.appendChild(debuffs[i]);statuses.push(divDebuffs)}if(0<buffs.length){var divBuffs=createDiv("card-buffs");for(i=0,len=buffs.length;i<len;i++)divBuffs.appendChild(buffs[i]);statuses.push(divBuffs)}return statuses}(card);if(0<statuses.length){htmlCard.appendChild(createDiv("hidden","..."));var divStatuses=createDiv("card-statuses");for(i=0;i<statuses.length;i++){var status=statuses[i];divStatuses.appendChild(status)}htmlCard.appendChild(divStatuses)}}if(card.set){var htmlSet=function(set){var setName=setNames[set];return createImg(getAssetPath("cardAssets")+setName+".png")}(card.set);htmlSet.className="set",htmlCard.appendChild(htmlSet)}var subFactions=card.sub_type;if(subFactions.length){var subFactionsDiv=createDiv("subfaction");for(i=0;i<subFactions.length;i++){var subFactionID=subFactions[i];if(subFactionID){var htmlSubfaction=getFactionIcon(subFactionID);subFactionsDiv.appendChild(htmlSubfaction)}}htmlCard.appendChild(subFactionsDiv)}if(0<card.rarity){if(card.maxLevel>Number(card.rarity)+2)var htmlLevel=createImg(getAssetPath("cardAssets")+"Level_"+card.rarity+"_"+card.maxLevel+"_"+card.level+".png");else htmlLevel=createImg(getAssetPath("cardAssets")+"Level_"+card.rarity+"_"+card.level+".png");if(htmlLevel.className="level",9999<card.id){var fusion="1"==card.id.toString()[0]?"Dualfuse":"Quadfuse";(fusion=createImg(getAssetPath("cardAssets")+fusion+".png")).className="fusion",htmlCard.appendChild(fusion)}htmlCard.appendChild(htmlLevel)}else if(1<card.maxLevel){(htmlLevel=createImg(getAssetPath("cardAssets")+card.maxLevel+"_"+card.level+".png")).className="level",htmlCard.appendChild(htmlLevel)}return onclick&&htmlCard.addEventListener("click",function(){return onclick(htmlCard,state)}),onrightclick&&(htmlCard.oncontextmenu=function(){return onrightclick(htmlCard,state)}),onmouseover&&(htmlCard.onmouseover=function(){return onmouseover(htmlCard,state)}),htmlCard}function appendSkillsHtml(card,divSkills,skillsShort,skills,onField,boosts){for(var i=0;i<skills.length;i++){var origSkill=skills[i],skill={all:origSkill.all,boosted:origSkill.boosted,c:origSkill.c,countdown:origSkill.countdown,id:origSkill.id,s:origSkill.s,x:origSkill.x,y:origSkill.y,boosted:boosts[origSkill.id]};divSkills.appendChild(getSkillHtml(card,skill,onField,i)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(skill.id))}}function getSkillHtml(card,skill,onField,i){var htmlSkill=createSpan();htmlSkill.className="skill",htmlSkill.appendChild(getSkillIcon(skill.id));var imbued=isImbued(card,skill.id,i),enhancement=getEnhancement(card,skill.id,skill.x);imbued?htmlSkill.classList.add("imbued"):(skill.boosted||enhancement)&&htmlSkill.classList.add("increased"),skill.all&&htmlSkill.append(" All "),skill.y&&htmlSkill.appendChild(getFactionIcon(skill.y)),skill.s&&htmlSkill.appendChild(getSkillIcon(skill.s));var x=(0|skill.x)+enhancement;return x&&htmlSkill.append(" "+x+" "),skill.c&&(htmlSkill.append(skill.c),onField&&htmlSkill.append(" ("+(skill.countdown?skill.countdown:0)+")")),htmlSkill}function getSkillIcon(skillID){var skillData=SKILL_DATA[skillID],iconName=(skillData?skillData.icon:skillID)+".png",icon=createImg(getAssetPath("skills")+iconName);switch(skillID){case"weakenself":case"enlarge":icon.classList.add("affect-self")}return icon.title=skillData?skillData.name:skillID,icon}function createStatus(name,value){var spanStatus=createSpan();return spanStatus.appendChild(getSkillIcon(name)),value&&spanStatus.append(value),spanStatus}function getFactionIcon(factionID){var factionName=factions.names[factionID];return createImg(getAssetPath("factions")+factionName+".png")}function getAssetPath(subpath){return assetsRoot+"res/"+subpath+"/"}var setNames={1e3:"Basic",1100:"Legacy",7e3:"Basic",2e3:"Reward",2100:"Reward",3e3:"Premium",4e3:"BoxOnly",5e3:"Champion",5100:"Champion",5200:"Champion",9999:"StoryElements"};CARD_GUI.appendChildren=appendChildren,CARD_GUI.draw_deck=function(deck,noblanks){var element=getAndClearElement("deck");return appendChildren(element,makeDeckHTML(deck,noblanks)),$(element)},CARD_GUI.create_card_html=create_card_html,CARD_GUI.makeDeckHTML=makeDeckHTML,CARD_GUI.draw_card_list=function(list,compactSkills,onclick,onrightclick,skip,end){appendChildren(getAndClearElement("cardSpace"),function(list,compactSkills,onclick,onrightclick,skip,end){var htmlCard,lastUnit,multiplier;skip=skip||0;for(var uniqueCard=0,cards=[],i=0,len=list.length;i<len&&(!end||uniqueCard<end);i++){var listEntry=list[i],unit=getCardByID(listEntry);areEqual(unit,lastUnit)?multiplier++:(skip<=uniqueCard&&(addMult(htmlCard,multiplier),(htmlCard=create_card_html(unit,compactSkills,!(multiplier=1),onclick,onrightclick,null,i)).setAttribute("data-i",i),void 0!==listEntry.index&&htmlCard.setAttribute("data-index",listEntry.index),cards.push(htmlCard)),lastUnit=unit,uniqueCard++)}return addMult(htmlCard,multiplier),cards}(list,compactSkills,null,null,skip,end))},CARD_GUI.draw_cards=function(field,drawableHand,callback,turn){appendChildren(getAndClearElement("cardSpace"),doDrawField(field,drawableHand,callback,turn))},CARD_GUI.doDrawField=doDrawField,CARD_GUI.draw_hand=draw_hand,CARD_GUI.createItemHTML=function(name,quantity,image){var htmlCard=createDiv("card item"),background=document.createElement("i");background.className="sprite sprite-Item",htmlCard.appendChild(background),image&&((image=createImg(getAssetPath("items")+image+".png")).className="item-image",htmlCard.appendChild(image));var divName=createDiv("card-name",name);return htmlCard.appendChild(divName),htmlCard.classList.add("factionless"),htmlCard.appendChild(createDiv("faction")),addMult(htmlCard,quantity),htmlCard},CARD_GUI.addMult=addMult,CARD_GUI.addWeight=function(htmlCard,weight){if(0<weight){var weightDiv=createDiv("weight",(100*weight).toFixed(2)+"%");weightDiv.setAttribute("data-count",weight);var weightIcon=createImg(getAssetPath("cardAssets")+"multiplier.png","weight");htmlCard.appendChild(weightIcon),htmlCard.appendChild(weightDiv)}},CARD_GUI.setNames=setNames,Object.defineProperties(CARD_GUI,{assetsRoot:{get:function(){return assetsRoot},set:function(value){assetsRoot=value}}})}();var inventory,DATA_UPDATER=function(){var baseUrl="https://spellstone.synapse-games.com",newCards={},newFusions={},lastUpdate=null;var cardFiles=["cards_heroes.xml","cards_premium_aether.xml","cards_premium_chaos.xml","cards_premium_wyld.xml","cards_reward.xml","cards_shard.xml","cards_special.xml","cards_standard.xml","cards_story.xml","fusion_recipes_cj2.xml"];function getUnitFromXML(node){var unit={};if(unit.id=getValue(node,"id"),unit.name=getValue(node,"name"),addField(unit,node,"desc"),unit.picture=getValue(node,"picture")||function(value,prefix){return value?prefix+value:value}(getValue(node,"asset_prefab"),"prefab_"),!unit.picture){var portrait=getValue(node,"portrait");unit.picture=portrait?"portrait_"+portrait.toLowerCase().replace("portrait_",""):"NotFound"}var hidden_until=getValue(node,"hidden_until")||getValue(node,"hidden_until_time");hidden_until&&(unit.hidden_until=hidden_until+"000"),unit.rarity=getValue(node,"rarity"),unit.set=getValue(node,"set"),unit.card_type=getValue(node,"card_type")||"2",addNumericField(unit,node,"shard_card"),unit.type=getValue(node,"type")||0,unit.sub_type=getValues(node,"sub_type")||[],addNumericField(unit,node,"health"),"1"!=unit.card_type&&(addNumericField(unit,node,"attack"),addNumericField(unit,node,"cost"));var upgrades=function(node){for(var nodes=node.getElementsByTagName("upgrade"),upgrades={},i=0;i<nodes.length;i++)upgrades[i+2]=getUpgradeFromXML(nodes[i]);return upgrades}(node);return unit.maxLevel=1+Object.keys(upgrades).length,unit.skill=getSkillsFromXML(node),unit.upgrades=upgrades,unit}function getSkillsFromXML(node){for(var children=node.childNodes,skills=[],i=0;i<children.length;i++){var child=children[i];"skill"===child.nodeName&&skills.push(getSkillFromXML(child))}return skills}function getSkillFromXML(node){var skill={id:getValue(node,"id",!0)};return addNumericField(skill,node,"x",!0),addNumericField(skill,node,"mult",!0),addNumericField(skill,node,"on_delay_mult",!0),addField(skill,node,"y",!0),addNumericField(skill,node,"z",!0),addNumericField(skill,node,"c",!0),addField(skill,node,"s",!0),addField(skill,node,"all",!0),skill}function getUpgradeFromXML(node){var upgrade={};return addNumericField(upgrade,node,"attack"),addNumericField(upgrade,node,"health"),addNumericField(upgrade,node,"cost"),addField(upgrade,node,"desc"),upgrade.skill=getSkillsFromXML(node),upgrade}function addField(object,node,field,isAtt){var value=getValue(node,field,isAtt);null!=value&&0<value.length&&(object[field]=value)}function addNumericField(object,node,field,isAtt){var value=function(node,tagName,isAtt){var value=getValue(node,tagName,isAtt);return null!=value?Number(value):-1}(node,field,isAtt);0<=value&&(object[field]=value)}function getValue(node,name,isAtt){if(isAtt)return node.getAttribute(name);var values=getValues(node,name);return values?values[0]:null}function getValues(node,name){var values=null,tags=$(node).children(name);if(0<tags.length){values=[];for(var i=0;i<tags.length;i++)values.push(tags[i].textContent)}return values}return{updateData:function(callback,forceUpdate){$("body").addClass("loading"),$("#loadingSplash").html("Checking for New Cards...");var now=Date.now();if(!lastUpdate||6e4<lastUpdate-now||forceUpdate){lastUpdate=now,newCards={};var promises=[];promises.push(function(){for(var promises=[],file=0;file<cardFiles.length;file++){var promise=jQuery.ajax({url:baseUrl+"/assets/"+cardFiles[file],success:function(doc){for(var trackNewCards="undefined"!=typeof spoilers,units=doc.getElementsByTagName("unit"),i=0;i<units.length;i++){var unit=units[i],id=getValue(unit,"id"),cardData=getUnitFromXML(unit),newInfo=!1;CARDS[id]?JSON.stringify(CARDS[id])!==JSON.stringify(cardData)&&(newInfo=!0):newInfo=!0,newInfo&&(trackNewCards&&(spoilers[id]=!0),newCards[id]=cardData),CARDS[id]=cardData}var fusions=doc.getElementsByTagName("fusion_recipe");for(i=0;i<fusions.length;i++){var node=fusions[i],fusion=getValue(node,"card_id",!1),resource=node.getElementsByTagName("resource")[0];if(resource){var base=getValue(resource,"card_id",!0);FUSIONS[base]&&FUSIONS[base]==fusion||(newFusions[base]=fusion,FUSIONS[base]=fusion)}}},async:!0,cache:!1});promises.push(promise)}return $.when.apply($,promises)}());var finishedLoading=function(){!function(){if(void 0!==storageAPI){var cardData=storageAPI.getField("GameData","CardCache");cardData?(cardData.newCards=cardData.newCards||{},cardData.newFusions=cardData.newFusions||{},$.extend(cardData.newCards,newCards),$.extend(cardData.newFusions,newFusions)):cardData={newCards:newCards,newFusions:newFusions},cardData.lastUpdated=Date.now(),storageAPI.setField("GameData","CardCache",cardData)}}(),$("body").removeClass("loading"),callback&&callback()};$.when.apply($,promises).then(finishedLoading,finishedLoading)}else callback&&callback()}}}(),delayTutorial=!0,fromInventory=!1,deck=[];deck.commander=elariaCaptain;var advancedFilters,optionsDialog,saveDeckDialog,loadDeckDialog,detailsDialog,form,$deck,cardSpace,deckSpace,inventoryMode=!(deck.deck=[]),attackHidden={},attackRanges=[],healthHidden={},healthRanges=[],delayHidden={},delayRanges=[],delayExclusions=[],skillFilters=[],skillExclusions=[],skillHidden={},skillFiltersAdv=[],skillHiddenAdv={},factionHidden={},subfactionHidden={},dualFactionHidden={},rarityFilters=[],rarityHidden={},typeFilters=[],typeHidden={},setFilters=[],setExclusions=[],setHidden={},fusionFilters=[],fusionHidden={},nameHidden={},allCards=CARDS,showUpgrades=!1,units=[],unitsShown=[],unitsFiltered=[],initDeckBuilder=function(){_DEFINED("fromSim")||($("#header").load("templates/header.html",function(){show("#header"),"undefined"!=typeof showTutorial&&$("#help").click(showTutorial)}),$.holdReady(!0),$("#footer").load("templates/footer.html",function(){show("#footer"),$.holdReady(!1)})),cardSpace=document.getElementById("cardSpace"),deckSpace=document.getElementById("deck"),setupPopups(),stopPropagation("hash"),document.body.classList.add("loading"),addDeckEventHandlers(deckSpace),addLibraryEventHandlers(cardSpace),window.addEventListener("resize",onResize),window.onwheel=changePage,window.oncontextmenu=hideContext;var rowsField=document.getElementById("rows");rowsField.value=storageAPI.getField("deckBuilder","rows",3),rowsField.onchange=function(){storageAPI.setField("deckBuilder","rows",rowsField.value),applyFilters(!0,!1)},document.getElementById("nameFilter").onkeydown=function(event){"Enter"===event.key&&(1==unitsFiltered.length&&addUnitToDeck(unitsFiltered[0],cardSpace.children[0]),event.preventDefault())},$("#deck").sortable({items:".card:not(.commander):not(.blank)",tolerance:"intersect",helper:function(event,ui){return ui.clone()},start:function(event,ui){var lastPos=getIndex(ui.placeholder[0])-1;ui.item.data("last_pos",lastPos),$(ui.item).hide()},change:function(event,ui){var origPos=getIndex(ui.item[0]),lastPos=ui.item.data("last_pos")-1,newPos=getIndex(ui.placeholder[0]);origPos<newPos&&newPos--,highlighted=newPos,ui.item.data("last_pos",newPos),newPos--;var array=deck.deck;array.splice(newPos,0,array.splice(lastPos,1)[0]),updateHash(),updateHighlights()}}),inventory=_GET("inventory")||inventory,document.getElementById("filters").addEventListener("click",function(event){var target=event.target;switch(target.name){case"rarity":return onClickFilter(event,filterRarity,event.altKey);case"faction":return onClickFilter(event,filterFaction,event.altKey);case"subfaction":return onClickFilter(event,filterSubfaction,event.altKey);case"delay":return onClickFilter(event,filterDelay,event.altKey);case"set":return onClickFilter(event,filterSet,event.altKey)}if("dualfaction"===target.id)return onClickFilter(event,filterDualFaction,event.altKey)}),_DEFINED("spoilers")||_DEFINED("latestCards")?(document.getElementById("loadingSplash").innerHTML="Checking for New Cards...",updateGameData()):(loadCardCache(),setTimeout(loadCards,1)),_DEFINED("unlimited")&&($deck=$("#deck"),toggleInventoryMode()),document.getElementById("graph-accordion").addEventListener("click",updateGraphs)};function updateGameData(){setTimeout(DATA_UPDATER.updateData,1,loadCards,!0)}var loadCards=function(){allCards=CARDS,document.getElementById("loadingSplash").innerHTML="Loading...",drawAllCards(),document.body.classList.remove("loading"),checkTutorial()},setupPopups=function(){stopPropagation("advancedFilters"),stopPropagation("unitOptions"),_DEFINED("spoilers")&&document.querySelectorAll("#deck-container, #filter-container").forEach(function(details){details.open=!1});for(var inputs=document.getElementsByTagName("input"),i=0;i<inputs.length;i++);advancedFilters=$("#advancedFilters").dialog({autoOpen:!1,width:150,minHeight:20,modal:!0,resizable:!1,buttons:{OK:function(){filterAdvanced(advancedFilters.skill),advancedFilters.dialog("close")},Cancel:function(){advancedFilters.dialog("close")}},open:closeDialogOnOverlayClick}),optionsDialog=$("#unitOptions").dialog({autoOpen:!1,width:250,minHeight:20,modal:!0,resizable:!1,buttons:{OK:function(){disableTracking=!1,modifyCard(optionsDialog),updateHash(),optionsDialog.dialog("close"),disableTracking=!1},Cancel:function(){resetCard(optionsDialog),optionsDialog.dialog("close"),disableTracking=!1}},open:closeDialogOnOverlayClick}).bind("change",function(){modifyCard(optionsDialog)});var imageButtons=document.querySelectorAll('input[type="image"]:not(.skill-filter)');for(i=0;i<imageButtons.length;i++){var imageButton=imageButtons[i],toolTip='<div class="tooltip">'+imageButton.getAttribute("title")+"</div>";imageButton.removeAttribute("title");var new_html='<div style="display:inline; position:relative; overflow:visible;">'+imageButton.outerHTML+toolTip+"</div>";imageButton.outerHTML=new_html}saveDeckDialog=$("#saveDeckDialog").dialog({autoOpen:!1,modal:!0,resizable:!1,buttons:{Save:function(){var name=document.getElementById("saveDeckName").value,hash=document.getElementById("hash").value;storageAPI.saveDeck(name,hash),saveDeckDialog.dialog("close")},Cancel:function(){saveDeckDialog.dialog("close")}},open:closeDialogOnOverlayClick}),loadDeckDialog=$("#loadDeckDialog").dialog({autoOpen:!1,minWidth:320,modal:!0,resizable:!1,buttons:{Delete:function(){var name=document.getElementById("loadDeckName").value;storageAPI.deleteDeck(name)},Load:function(){var name=document.getElementById("loadDeckName").value,newHash=storageAPI.loadDeck(name);loadDeckDialog.onloaded(newHash),loadDeckDialog.dialog("close")},Cancel:function(){loadDeckDialog.dialog("close")}},open:closeDialogOnOverlayClick}),detailsDialog=$("#detailedView").dialog({minWidth:480,minHeight:330,padding:0,autoOpen:!1,modal:!0,resizable:!1,open:closeDialogOnOverlayClick,close:function(){cardDetailScope.visible=!1}})},closeDialogOnOverlayClick=function(){var targetDialog=$(this);jQuery(".ui-widget-overlay").bind("click contextmenu",function(event){targetDialog.dialog("close"),event.preventDefault()})},drawAllCards=function(){drawCardList(),drawDeck()},drawDeck=function(){var hash=_GET("hash")||document.getElementById("hash").value;hash&&hash_changed(hash);var name=_GET("name");name&&setDeckName(name),doDrawDeck()};function doDrawDeck(){$deck=CARD_GUI.draw_deck(deck,inventoryMode),updateHash()}function addDeckEventHandlers(deckSpace){addCardEvent(deckSpace,"mousedown",duplicate),addCardEvent(deckSpace,"mouseover",highlight),addCardEvent(deckSpace,"click",deckOnClick),addCardEvent(deckSpace,"contextmenu",showCardOptions)}function addLibraryEventHandlers(cardSpace){addCardEvent(cardSpace,"click",addToDeck),addCardEvent(cardSpace,"contextmenu",showDetails)}function addCardEvent(collection,eventName,callback){callback&&collection.addEventListener(eventName,function(event){var htmlCard=event.target.closest(".card");if(htmlCard&&!htmlCard.classList.contains("blank")){var i=htmlCard.attributes["data-i"];return callback(event,htmlCard,i)}})}var showDetails=function(event,htmlCard){event.preventDefault();var unit=getUnitFromCard(htmlCard);cardDetailScope.setUnit(unit).$apply(),cardDetailScope.visible=!0,detailsDialog.dialog("option","position",{my:"center",at:"center",of:window}),detailsDialog.dialog("open"),detailsDialog.onloaded=setInventory};function duplicate(event,htmlCard){if(event.ctrlKey){if(!inventoryMode){var firstEmptySpace=htmlCard.parentElement.querySelector(".blank");if(!emptySpaces)return;firstEmptySpace.remove()}var index=getIndex(htmlCard),unit=deck.deck[index-1];htmlCard.cloneNode(!0).insertBefore(htmlCard),deck.deck.splice(index,0,makeUnitInfo(unit.id,unit.level,unit.runes||[])),updateHash()}}function deckOnClick(event,htmlCard){event.ctrlKey||removeFromDeck(htmlCard)}var drawCardList=function(){if(units=[],unitsShown=[],inventory){fromInventory=!0;var commander=(inventory=hash_decode(inventory)).commander;inventory=inventory.deck,commander&&!areEqual(commander,elariaCaptain)&&inventory.push(commander);for(var i=0;i<inventory.length;i++)addInventoryUnit(inventory[i]);deck.commander=removeFromInventory(deck.commander);for(i=0;i<deck.deck.length;i++){var unit=deck.deck[i];deck.deck[i]=removeFromInventory(unit)}}else if(_DEFINED("spoilers"))for(var id in spoilers)addUnitLevels(id);else for(var id in allCards)id<1e4&&addUnit(id);sortCards(document.getElementById("sortField")),applyFilters()},page=0,pages=0;function doDrawCardList(cardList,resetPage){var detailedSkills=document.getElementById("skillDetails").checked;resetPage&&(page=0);var width=cardSpace.offsetWidth,rows=parseInt(document.getElementById("rows").value),cards=~~(width/90);cards*=rows;for(var lastUnit=null,unique=0,i=0,len=cardList.length;i<len;i++){var unit=cardList[i];areEqual(unit,lastUnit)||unique++,lastUnit=unit}if(1<(pages=Math.max(Math.ceil(unique/cards),1))){var start=cards*page;pages<=page&&(start=cards*(page=pages-1)),CARD_GUI.draw_card_list(cardList,detailedSkills,addToDeck,hideContext,start,start+cards)}else page=0,CARD_GUI.draw_card_list(cardList,detailedSkills,addToDeck,hideContext);document.getElementById("pageNumber").innerText="Page "+(page+1)+"/"+pages;var foundCards=(cardSpace=document.getElementById("cardSpace")).querySelectorAll(".card");if(foundCards.length){var card=foundCards[0],style=card.currentStyle||window.getComputedStyle(card),minHeight=(card.offsetHeight+parseInt(style.marginTop)+parseInt(style.marginBottom))*rows;cardSpace.style.minHeight=minHeight+"px"}}var onResize=function(){applyFilters(!0)}.debounce(50);function adjustTable(filler){var currentRow=filler.parentElement,table=currentRow.parentElement;if(filler.offsetWidth<=2){if(1==table.childElementCount){for(var siblings=[],sibling=filler.nextElementSibling;sibling;)siblings.push(sibling),sibling=sibling.nextElementSibling;if(siblings.length){for(var tr=document.createElement("tr"),i=0;i<siblings.length;i++)tr.appendChild(siblings[i]);table.appendChild(tr)}}}else if(1<table.childElementCount&&(tr=currentRow.nextElementSibling)){for(i=0;i<tr.childNodes.length;i++)currentRow.appendChild(tr.childNodes[i]);table.removeChild(tr)}}function changePage(event){overInventory(event)&&(event.deltaY<0?pageUp():0<event.deltaY&&pageDown())}function overInventory(event){for(var element=event.srcElement;null!=element;){if("cardSpace"===element.id)return!0;element=element.parentElement}}function pageUp(){--page<0?page=0:applyFilters(!0)}function pageDown(){pages<=++page?page--:applyFilters(!0)}var redrawCardList=function(keepPaging){sortCards(document.getElementById("sortField")),applyFilters(keepPaging)},addInventoryUnit=function(unit){units.push(unit),unitsShown.push(unit)},addUnit=function(id,spoilers){addUnitLevels(id),spoilers?(spoilers["1"+id]&&addUnitLevels("1"+id),spoilers["2"+id]&&addUnitLevels("2"+id)):999<id&&(addUnitLevels("1"+id),addUnitLevels("2"+id))},addUnitLevels=function(id){var card=allCards[id];if(card)for(var level=1;level<=card.maxLevel;level++){var unit=makeUnitInfo(id,level);units.push(unit),!showUpgrades&&level!=card.maxLevel||unitsShown.push(unit)}},resetDeck=function(){hash_changed("oZ0IB")},disableTracking=!1,hash_changed=function(hash){if(fromInventory&&(areEqual(deck.commander,elariaCaptain)||unitsShown.push(deck.commander),unitsShown.push.apply(unitsShown,deck.deck),redrawCardList(!0)),void 0===hash&&(hash=document.getElementById("hash").value.trim()),setHash(hash),updateSimulator(hash),deck=hash_decode(hash),hash||(deck.commander=null),fromInventory){areEqual(deck.commander,elariaCaptain)||removeFromInventory(deck.commander);for(var i=0;i<deck.deck.length;i++)removeFromInventory(deck.deck[i]);applyFilters()}doDrawDeck(),generateLink()},setHash=function(hash){document.getElementById("hash").value=hash,generateLink()},sortDeck=function(){deck.deck.sort(function(unitA,unitB){var compare,cardA=getCardByID(unitA),cardB=getCardByID(unitB);return(compare=cardA.rarity-cardB.rarity)?compare:(compare=cardA.type-cardB.type)?compare:(compare=compareByID(unitA,unitB))?compare:(compare=unitA.level-unitB.level)?compare:compare=(unitA.runes.length?unitA.runes[0].id:0)-(unitB.runes.length?unitB.runes[0].id:0)}),doDrawDeck()},addToDeck=function(event,htmlCard){var unit=getUnitFromCard(htmlCard);addUnitToDeck(unit,htmlCard)},addUnitToDeck=function(unit,htmlCard){var newCard=htmlCard.cloneNode(!0),multiplier=newCard.querySelector(".multiplier");multiplier&&multiplier.remove(),inventoryMode||(unit=Object.assign({},unit));var deckElement=document.getElementById("deck");if(is_commander(unit.id)){if(areEqual(deck.commander,unit))return;deck.commander=unit,replaceCard(deckElement.querySelector(".card"),newCard)}else{if(!inventoryMode&&15==deck.deck.length)return;deck.deck.push(unit);var firstEmptySpace=deckElement.querySelector(".blank");firstEmptySpace?replaceCard(firstEmptySpace,newCard):deckElement.appendChild(newCard)}if(fromInventory){removeFromInventory(unit);var mult=htmlCard.querySelector("div.multiplier");if(mult){var count=Number(mult.attributes["data-count"])-1;1<count?(mult.attributes["data-count"]=count,mult.innerHTML="x"+count):mult.remove()}else htmlCard.remove()}else fadeIn(htmlCard,"100");updateHash()},speeds={fast:100,medium:600,slow:1e3};function replaceCard(oldCard,newCard){var speed=oldCard.classList.contains("blank")?speeds.slow:speeds.medium;oldCard.replaceWith(newCard),fadeIn(newCard,speed)}function getIndex(htmlElement){for(var childNodes=htmlElement.parentNode.childNodes,i=0,len=childNodes.length;i<len;i++)if(childNodes[i]===htmlElement)return i;return-1}function fadeIn(element,speed){var animationClass="fade-in-"+speed;element.addEventListener("animationend",function removeAnimation(){element.removeEventListener("animationend",removeAnimation),element.classList.remove(animationClass)}),element.classList.add(animationClass)}function removeFromInventory(unit){for(var i=0;i<unitsShown.length;i++){if(areEqual(unit,unitsShown[i]))return unitsShown.splice(i,1)[0]}return unit}var removeFromDeck=function(htmlCard){var unit;console.log(htmlCard.attributes["data-id"]);var index=getIndex(htmlCard);if(0==index){if(areEqual(unit=deck.commander,elariaCaptain))return;var card=getCardByID(deck.commander=elariaCaptain);replaceCard(htmlCard,CARD_GUI.create_card_html(card))}else unit=deck.deck.splice(index-1,1)[0],htmlCard.remove(),deck.deck.length<15&&$deck.append("<div class='card blank'></div>");fromInventory&&(unitsShown.push(unit),redrawCardList(!0)),updateHash()},highlight=function(event,htmlCard){highlighted=getIndex(htmlCard),updateHighlights()},highlighted=-1;function updateHighlights(){var hash_highlighted=document.getElementById("hash"),deckHash=hash_highlighted.value,start=5*highlighted,end=5+start,highlightedText=document.createElement("span");highlightedText.innerText=deckHash.substring(start,end);var highlightedHash=[deckHash.substring(0,start),highlightedText,deckHash.substring(end)],hash_highlighter=document.getElementById("hash_highlighter");hash_highlighter.replaceChildren.apply(hash_highlighter,highlightedHash);var computedStyles=getComputedStyle(hash_highlighted);hash_highlighter.style.width=computedStyles.width,hash_highlighter.style["font-size"]=computedStyles["font-size"]}var updateHash=function(){var deckHash=hash_encode(deck);setHash(deckHash),updateHighlights(),addChange(deckHash),updateSimulator(deckHash),updateGraphs()},updateSimulator=function(deckHash){},updateGraphs=function(){if(!document.getElementById("graph-accordion").open)return null;for(var delays=[0,0,0,0,0],attackStats=[],healthStats=[],delayStats=[],types={},sub_types={},i=0;i<deck.deck.length;i++){delays[(card=getCardByID(deck.deck[i])).cost]++,types[card.type]=(types[card.type]||0)+1,attackStats.push(Number(card.attack)),healthStats.push(Number(card.health)),delayStats.push(Number(card.cost)),(subFactions=card.sub_type).length||subFactions.push(0);for(var s=0;s<subFactions.length;s++){sub_types[subFaction=subFactions[s]]=(sub_types[subFaction]||0)+1}}var numericSort=function(a,b){return a-b};function sum(total,num){return total+num}function average(ary){return ary.length?(ary.reduce(sum)/ary.length).toFixed(0):0}attackStats.sort(numericSort),healthStats.sort(numericSort),delayStats.sort(numericSort);var avgAttack=average(attackStats),avgHealth=average(healthStats),avgDelay=average(delayStats),options={width:300,height:200,axisY:{onlyInteger:!0},plugins:[Chartist.plugins.legend(),Chartist.plugins.tooltip()],series:{Attack:{lineSmooth:Chartist.Interpolation.simple()},Health:{lineSmooth:Chartist.Interpolation.simple()},Delay:{lineSmooth:Chartist.Interpolation.simple()}}};new Chartist.Line("#statChart",{series:[{name:"Attack",className:"ct-series-attack",data:attackStats},{name:"Health",className:"ct-series-health",data:healthStats},{name:"Delay",className:"ct-series-delay",data:delayStats}]},options);options={width:300,height:200,axisY:{onlyInteger:!0},distributeSeries:!0};var data={labels:["0","1","2","3","4"],series:delays};new Chartist.Bar("#delayChart",data,options);data={labels:["Attack","Health","Delay"],series:[{value:avgAttack,className:"ct-series-attack"},{value:avgHealth,className:"ct-series-health"},{value:avgDelay,className:"ct-series-delay"}]};new Chartist.Bar("#averagesChart",data,options).on("draw",function(data){var barHorizontalCenter,barVerticalCenter,label,value;if("bar"===data.type&&(barHorizontalCenter=data.x1+.5*data.element.width(),barVerticalCenter=data.y1+-1*data.element.height()-10,"0"!==(value=data.element.attr("ct:value"))))return(label=new Chartist.Svg("text")).text(value),label.addClass("ct-barlabel"),label.attr({x:barHorizontalCenter,y:barVerticalCenter,"text-anchor":"middle"}),data.group.append(label)});options={width:450,height:200,labelInterpolationFnc:function(label,i){return data.series[i].value},plugins:[Chartist.plugins.legend()]};var labels=[];data=[];for(var key in types){var factionName=factions.names[key];labels.push(factionName),data.push({value:types[key],className:"ct-series-"+factionName})}data={labels:labels,series:data};new Chartist.Pie("#factionChart",data,options),options.labelInterpolationFnc=function(label,i){return data2.series[i].value};labels=[];var data2=[];for(var key in sub_types){factionName=factions.names[key];labels.push(factionName),data2.push({value:sub_types[key],className:"ct-series-"+factionName})}data2={labels:labels,series:data2};new Chartist.Pie("#subfactionChart",data2,options);for(attackStats=[],healthStats=[],delayStats=[],types={},sub_types={},i=0;i<deck.deck.length;i++){var card,subFactions;delays[(card=getCardByID(deck.deck[i])).cost]++,types[card.type]=(types[card.type]||0)+1,attackStats.push(Number(card.attack)),healthStats.push(Number(card.health)),delayStats.push(Number(card.cost)),(subFactions=card.sub_type).length||subFactions.push(0);for(s=0;s<subFactions.length;s++){var subFaction;sub_types[subFaction=subFactions[s]]=(sub_types[subFaction]||0)+1}}numericSort=function(a,b){return a-b};function sum(total,num){return total+num}function average(ary){return ary.length?(ary.reduce(sum)/ary.length).toFixed(0):0}attackStats.sort(numericSort),healthStats.sort(numericSort),delayStats.sort(numericSort);avgAttack=average(attackStats),avgHealth=average(healthStats),avgDelay=average(delayStats),options={width:300,height:200,axisY:{onlyInteger:!0},plugins:[Chartist.plugins.legend(),Chartist.plugins.tooltip()],series:{Attack:{lineSmooth:Chartist.Interpolation.simple()},Health:{lineSmooth:Chartist.Interpolation.simple()},Delay:{lineSmooth:Chartist.Interpolation.simple()}}};new Chartist.Line("#statChart",{series:[{name:"Attack",className:"ct-series-attack",data:attackStats},{name:"Health",className:"ct-series-health",data:healthStats},{name:"Delay",className:"ct-series-delay",data:delayStats}]},options);var HPPL=(getCardByID(deck.commander).health+healthStats.reduce(function(prev,curr){return prev+curr},0))/15,healthNeeded=(labels=[],[]);for(i=0;i<=15;i++)labels.push(130-i),healthNeeded.push(Math.ceil(HPPL*i));options={width:500,height:200,axisY:{onlyInteger:!0},plugins:[Chartist.plugins.legend(),Chartist.plugins.tooltip()]};new Chartist.Line("#hpplChart",{labels:labels,series:[{name:"Health Lost",className:"ct-series-attack",data:healthNeeded}]},options)},changeTracking=[],currentChange=-1;function addChange(hash){disableTracking||(changeTracking[++currentChange]=hash,changeTracking.length=currentChange+1,100<currentChange&&(currentChange--,changeTracking.splice(0,1)))}function KeyPress(e){var evtobj=window.event?event:e;evtobj.ctrlKey&&(90==evtobj.keyCode?undo():89==evtobj.keyCode&&redo())}function stopPropagation(id){document.getElementById(id).onkeydown=function(e){e.stopPropagation()}}function undo(){if(0<currentChange){var hashInput=document.getElementById("hash");hashInput.addEventListener("focus",preventFocus),disableTracking=!0;var hash=changeTracking[--currentChange];setHash(hash),deck=hash_decode(hash),doDrawDeck(),hashInput.removeEventListener("focus",preventFocus),disableTracking=!1}}function redo(){if(currentChange<changeTracking.length-1){var hashInput=document.getElementById("hash");hashInput.addEventListener("focus",preventFocus),disableTracking=!0;var hash=changeTracking[++currentChange];setHash(hash),deck=hash_decode(hash),doDrawDeck(),hashInput.removeEventListener("focus",preventFocus),disableTracking=!1}}document.onkeydown=KeyPress;var preventFocus=function(event){this.blur(),event.stopPropagation()},onClickFilter=function(event,filterFunction,altKey){var button=event.target,filter=button.getAttribute("data-filter");filterFunction(button,filter,altKey)},onContextMenu=function(event){event.preventDefault();var skill=event.target.getAttribute("data-filter");showAdvancedFilters(skill)},filterAdvanced=function(skill){for(var info={id:skill,x:void 0,y:void 0,c:void 0,s:void 0,all:void 0},i=0;i<skillFiltersAdv.length;i++)if(skillFiltersAdv[i].id==skill){skillFiltersAdv.splice(i,1);break}if("none"!=document.querySelector("div#amount").style.display){var min=parseInt(document.querySelector("#amount-min").value),max=parseInt(document.querySelector("#amount-max").value);isNaN(min)&&(min=0),isNaN(max)&&(max=99),info.x={min:min,max:max}}if("none"!=document.querySelector("div#timer").style.display){min=parseInt(document.querySelector("#timer-min").value),max=parseInt(document.querySelector("#timer-max").value);isNaN(min)&&(min=0),isNaN(max)&&(max=99),info.c={min:min,max:max}}if("none"!=document.querySelector("div#faction").style.display){var faction=document.querySelector("select#faction").value;info.y="Generic"==faction?-1:factions.IDs[faction]}"none"!=document.querySelector("div#skill").style.display&&0<document.querySelector("select#skill").value.length&&(info.s=document.querySelector("select#skill").value),"none"!=document.querySelector("label[for=all]").style.display&&(info.all=document.querySelector("select#all").value);var classList=document.querySelector("input[name=skill][data-filter="+skill+"]").classList;classList.add("selected-advanced"),skillFiltersAdv.push(info),classList.contains("selected")&&(classList.remove("selected"),skillFilters.splice(skillFilters.indexOf(skill),1),checkBasicSkillFilters()),classList.contains("excluded")&&(classList.remove("excluded"),skillExclusions.splice(skillFilters.indexOf(skill),1),checkBasicSkillFilters()),checkAdvancedFilters()},checkAdvancedFilters=function(){skillHiddenAdv={};for(var i=0;i<units.length;i++)for(var unit=units[i],s=0;s<skillFiltersAdv.length;s++)hasSkillAdvanced(unit,skillFiltersAdv[s])||(skillHiddenAdv[makeUnitKey(unit)]=!0);for(var key in skillFiltersAdv)skillFiltersAdv[key];applyFilters()},filterSkill=function(button,skill,exclude){if(button.classList.contains("selected"))button.classList.remove("selected"),skillFilters.splice(skillFilters.indexOf(skill),1);else if(button.classList.contains("excluded"))button.classList.remove("excluded"),skillExclusions.splice(skillFilters.indexOf(skill),1);else{if(button.classList.contains("selected-advanced")){button.classList.remove("selected-advanced");for(var i=0;i<skillFiltersAdv.length;i++)if(skillFiltersAdv[i].id==skill){skillFiltersAdv.splice(i,1);break}return void checkAdvancedFilters()}exclude?(button.classList.add("excluded"),skillExclusions.push(skill)):(button.classList.add("selected"),skillFilters.push(skill))}checkBasicSkillFilters(),applyFilters()};function checkBasicSkillFilters(){if(skillHidden={},0<skillFilters.length+skillExclusions.length)for(var i=0;i<units.length;i++){for(var unit=units[i],s=0;s<skillFilters.length;s++)if(!hasSkill(unit,skillFilters[s])){skillHidden[makeUnitKey(unit)]=!0;break}for(s=0;s<skillExclusions.length;s++)if(hasSkill(unit,skillExclusions[s])){skillHidden[makeUnitKey(unit)]=!0;break}}}var filterFaction=function(button,faction){if(factionHidden={},button.classList.contains("selected"))button.classList.remove("selected"),button.checked=!1;else{button.classList.add("selected");for(var i=0,len=units.length;i<len;i++){var unit=units[i];isInFaction(unit,faction)||(factionHidden[makeUnitKey(unit)]=!0)}}var filters=document.getElementsByName("faction");for(i=0;i<filters.length;i++){var filter=filters[i];filter!=button&&filter.classList.remove("selected")}applyFilters()},filterName=function(field){var filter=field.value.toLowerCase();if(nameHidden={},filter)if(0===filter.indexOf("[")||filter.indexOf("]")-filter.length==-1){0!==filter.indexOf("[")&&(filter=".*"+filter),filter.indexOf("]")-filter.length!=-1&&(filter+=".*");for(var idRegex=new RegExp("^"+filter.replace("[","").replace("]","")+"$"),i=0,len=units.length;i<len;i++){var unit_id=(unit=units[i]).id;idRegex.test(unit_id.toString())||(nameHidden[makeUnitKey(unit)]=!0)}}else for(i=0,len=units.length;i<len;i++){var unit,card=get_slim_card_by_id(unit=units[i],!0);card.name&&-1!=card.name.toLowerCase().indexOf(filter)||(nameHidden[makeUnitKey(unit)]=!0)}applyFilters(!1,!1,!0)}.throttle(250),filterSubfaction=function(button,faction,exclude){button.classList.contains("selected")||button.classList.contains("excluded")?(button.classList.remove("selected"),button.classList.remove("excluded"),button.checked=!1):exclude?(button.classList.add("excluded"),button.classList.remove("selected")):(button.classList.remove("excluded"),button.classList.add("selected")),subfactionHidden={};for(var subfactions=Array.from(document.querySelectorAll("[name=subfaction].selected")).map(function(a){return a.attributes["data-filter"].value}),exclusions=Array.from(document.querySelectorAll("[name=subfaction].excluded")).map(function(a){return a.attributes["data-filter"].value}),i=0,len=units.length;i<len;i++){for(var unit=units[i],s=0;s<subfactions.length;s++)isInSubfaction(unit,subfactions[s])||(subfactionHidden[makeUnitKey(unit)]=!0);for(var e=0;e<exclusions.length;e++)isInSubfaction(unit,exclusions[e])&&(subfactionHidden[makeUnitKey(unit)]=!0)}applyFilters()},filterDualFaction=function(button,faction,exclude){var shouldShow;if(button.classList.contains("selected")||button.classList.contains("excluded")?(button.classList.remove("selected"),button.classList.remove("excluded"),button.checked=!1):shouldShow=exclude?(button.classList.add("excluded"),button.classList.remove("selected"),!1):(button.classList.remove("excluded"),button.classList.add("selected"),!0),dualFactionHidden={},void 0!==shouldShow)for(var i=0,len=units.length;i<len;i++){var unit=units[i];isDualFaction(unit)!==shouldShow&&(dualFactionHidden[makeUnitKey(unit)]=!0)}applyFilters()},filterAttack=function(button,min,max){if(attackHidden={},button.classList.contains("selected")){button.classList.remove("selected"),button.checked=!1;for(var i=0;i<attackRanges.length;i++)if(attackRanges[i][0]==min){attackRanges.splice(i,1);break}}else button.classList.add("selected"),attackRanges.push([min,max]);if(0<attackRanges.length){i=0;for(var len=units.length;i<len;i++){for(var unit=units[i],hide=!0,j=0;j<attackRanges.length;j++){var range=attackRanges[j];if(isInRange(unit,"attack",range[0],range[1])){hide=!1;break}}hide&&(attackHidden[makeUnitKey(unit)]=!0)}}applyFilters()},filterHealth=function(button,min,max){if(healthHidden={},button.classList.contains("selected")){button.classList.remove("selected"),button.checked=!1;for(var i=0;i<healthRanges.length;i++)if(healthRanges[i][0]==min){healthRanges.splice(i,1);break}}else button.classList.add("selected"),healthRanges.push([min,max]);if(0<healthRanges.length){i=0;for(var len=units.length;i<len;i++){for(var unit=units[i],hide=!0,j=0;j<healthRanges.length;j++){var range=healthRanges[j];if(isInRange(unit,"health",range[0],range[1])){hide=!1;break}}hide&&(healthHidden[makeUnitKey(unit)]=!0)}}applyFilters()},filterDelay=function(button,delay,exclude){if(delayHidden={},button.classList.contains("selected")){button.classList.remove("selected"),button.checked=!1;for(var i=0;i<delayRanges.length;i++)if(delayRanges[i]==delay){delayRanges.splice(i,1);break}}else if(button.classList.contains("excluded")){button.classList.remove("excluded"),button.checked=!1;for(i=0;i<delayExclusions.length;i++)if(delayExclusions[i]==delay){delayExclusions.splice(i,1);break}}else exclude?(button.classList.add("excluded"),delayExclusions.push(delay)):(button.classList.add("selected"),delayRanges.push(delay));if(0<delayExclusions.length){i=0;for(var len=units.length;i<len;i++){for(var unit=units[i],hide=!1,j=0;j<delayExclusions.length;j++){delay=delayExclusions[j];if(isInRange(unit,"cost",delay,delay)){hide=!0;break}}hide&&(delayHidden[makeUnitKey(unit)]=!0)}}if(0<delayRanges.length)for(i=0,len=units.length;i<len;i++){for(unit=units[i],hide=!0,j=0;j<delayRanges.length;j++){delay=delayRanges[j];if(isInRange(unit,"cost",delay,delay)){hide=!1;break}}hide&&(delayHidden[makeUnitKey(unit)]=!0)}applyFilters()},filterType=function(button,type){if(typeHidden={},button.classList.contains("selected")){button.classList.remove("selected"),button.checked=!1;for(var i=0;i<typeFilters.length;i++)if(typeFilters[i]==type){typeFilters.splice(i,1);break}}else button.classList.add("selected"),typeFilters.push(type);if(0<typeFilters.length){i=0;for(var len=units.length;i<len;i++){for(var unit=units[i],hide=!0,j=0;j<typeFilters.length;j++){type=typeFilters[j];if(isInRange(unit,"card_type",type,type)){hide=!1;break}}hide&&(typeHidden[makeUnitKey(unit)]=!0)}}applyFilters()},filterFusion=function(button,fusion){if(fusionHidden={},button.classList.contains("selected")){button.classList.remove("selected"),button.checked=!1;for(var i=0;i<fusionFilters.length;i++)if(fusionFilters[i]==fusion){fusionFilters.splice(i,1);break}}else button.classList.add("selected"),fusionFilters.push(fusion);if(0<fusionFilters.length){i=0;for(var len=units.length;i<len;i++){for(var unit=units[i],id=unit.id.toString(),hide=(fusion=4<id.length?id[0]:"",!0),j=0;j<fusionFilters.length;j++)if(fusion==fusionFilters[j]){hide=!1;break}hide&&(fusionHidden[makeUnitKey(unit)]=!0)}}applyFilters()},showAdvancedFilters=function(skill){hide("label[for=all]"),hide("div#amount"),hide("div#faction"),hide("div#skill"),hide("div#timer"),setValue("#amount-min",0),setValue("#amount-max",99),setValue("#timer-min",0),setValue("#timer-max",99),setValue("select#faction",""),setValue("select#skill",""),setValue("select#all",-1);for(var i=0;i<skillFiltersAdv.length;i++){var skillInfo=skillFiltersAdv[i];if(skillInfo.id==skill){skillInfo.x&&(setValue("#amount-min",skillInfo.x.min),setValue("#amount-max",skillInfo.x.max)),skillInfo.c&&(setValue("#timer-min",skillInfo.c.min),setValue("#timer-max",skillInfo.c.max)),skillInfo.y&&-1==skillInfo.y&&setValue("select#faction","Generic"),skillInfo.s&&setValue("select#skill",skillInfo.s),skillInfo.all&&setValue("select#all",skillInfo.all);break}}switch(skill){case"absorb":case"armored":case"barrage":case"backlash":case"berserk":case"burn":case"corrosive":case"counter":case"counterburn":case"evade":case"evadebarrier":case"frost":case"fury":case"heartseeker":case"leech":case"nullify":case"pierce":case"poison":case"regenerate":case"scorchbreath":case"stasis":case"taunt":case"valor":show("div#amount");break;case"silence":show("div#amount"),show("div#faction");break;case"fervor":case"legion":case"reanimate":case"resurrect":show("div#amount"),show("div#faction"),show("div#timer");break;case"enrage":case"heal":case"protect":case"protect_ice":case"rally":show("div#amount"),show("label[for=all]"),show("div#faction");break;case"enfeeble":case"poisonstrike":case"strike":case"weaken":case"weakenself":show("div#amount"),show("label[for=all]");break;case"enhance":case"imbue":show("div#amount"),show("label[for=all]"),show("div#faction"),show("div#skill"),show("div#timer");break;case"jam":show("label[for=all]"),show("div#timer");break;case"flurry":show("div#timer");break;default:return null}return advancedFilters.dialog("option","position",{mw:"center",at:"center",of:document.querySelector("[data-filter="+skill+"]")}),advancedFilters.dialog("open"),advancedFilters.skill=skill,!1};function hide(selector){document.querySelectorAll(selector).forEach(function(element){element.style.display="none"})}function hideElement(element){element.style.display="none"}function show(selector){document.querySelectorAll(selector).forEach(function(element){element.style.display=""})}function setValue(selector,newValue){document.querySelector(selector).value=newValue}var showCardOptions=function(event,htmlCard){event.preventDefault();var shouldShow=!1,index=getIndex(htmlCard)-1;if(index<0)var unit=deck.commander;else unit=deck.deck[index];optionsDialog.index=index;var card=getCardByID(unit);hide("#upgradeDiv");var upgradeLevel=document.getElementById("upgrade");upgradeLevel.max=card.maxLevel,upgradeLevel.value=card.level,1<card.maxLevel&&(show("#upgradeDiv"),shouldShow=!0);var fusionField=document.getElementById("fusion");if(fusionField.value=0,hide("#fusionDiv"),!card.isCommander()){var fusion=1;if(4<(baseID=card.id.toString()).length){fusion=parseInt(baseID[0])+1;var baseID=baseID.substring(1)}FUSIONS[baseID]&&(fusionField.value=fusion,show("#fusionDiv"),shouldShow=!0)}var elements=document.querySelectorAll("#upgradeDiv, #fusionDiv");return"none"==$("#upgradeDiv").css("display")||"none"==$("#fusionDiv").css("display")?elements.forEach(function(element){element.classList.remove("split")}):elements.forEach(function(element){element.classList.add("split")}),showRunePicker(card)&&(shouldShow=!0),shouldShow&&(disableTracking=!0,optionsDialog.dialog("option","position",{my:"left",at:"right",of:htmlCard}),optionsDialog.dialog("open"),optionsDialog.unit=unit,optionsDialog.originalUnit=Object.assign({},unit)),!1};function hideContext(event){return event.preventDefault(),!1}var showRunePicker=function(card){var select=document.getElementById("runeChoices"),selectedRune=card.runes.length&&canUseRune(card,card.runes[0].id)?card.runes[0].id:"";optionsDialog.hiddenOptions=[];var shouldShow=!0;if(3<=card.rarity&&!card.isCommander()){var options=[document.createElement("option")];for(var key in RUNES){var rune=RUNES[key];if(canUseRune(card,rune.id)){var option=document.createElement("option");option.appendChild(document.createTextNode(rune.desc)),option.value=rune.id,options.push(option)}}options.length<=1&&(shouldShow=!1)}else shouldShow=!1;shouldShow?(select.replaceChildren.apply(select,options),show("#runeChoicesDiv")):(select.replaceChildren(),hide("#runeChoicesDiv")),select.value=selectedRune},toggleUnreleasedRunes=function(checkbox){for(var runesToToggle=optionsDialog.hiddenOptions,i=0,len=runesToToggle.length;i<len;i++)runesToToggle[i].hidden=!checkbox.checked,runesToToggle[i].disabled=!checkbox.checked},modifyCard=function(optionsDialog){if(void 0!==(unit=optionsDialog.unit)){var runeID=document.getElementById("runeChoices").value;unit.runes=runeID?[{id:runeID}]:[]}else var unit=deck.commander;unit.level=document.getElementById("upgrade").value;var fusion=document.getElementById("fusion").value;if(fusion){fusion=(fusion-1).toString();var unitID=unit.id.toString();4<unitID.length&&(unitID=unitID.substring(1)),0<=fusion&&(unitID=fusion+unitID),unit.id=parseInt(unitID)}var card=getCardByID(unit);showRunePicker(card),setCard(optionsDialog.index,unit),setHash(hash_encode(deck))},resetCard=function(optionsDialog){setCard(optionsDialog.index,optionsDialog.originalUnit),setHash(hash_encode(deck))},setCard=function(index,unit){index<0?deck.commander=unit:deck.deck[index]=unit;var htmlCard=CARD_GUI.create_card_html(getCardByID(unit),!1,!1);$deck.find(".card").eq(index+1).replaceWith(htmlCard)},filterSet=function(button,sets,exclude){setHidden={};var clear=null;if(button.classList.contains("selected")?(button.classList.remove("selected"),button.checked=!1,clear="selected"):button.classList.contains("excluded")?(button.classList.remove("excluded"),button.checked=!1,clear="excluded"):exclude?button.classList.add("excluded"):button.classList.add("selected"),sets.split(",").forEach(function(set){switch(clear){case"selected":setFilters.splice(setFilters.indexOf(set),1);break;case"excluded":setExclusions.splice(setExclusions.indexOf(set),1);break;default:exclude?setExclusions.push(set):setFilters.push(set)}}),0<setFilters.length+setExclusions.length)for(var i=0,len=units.length;i<len;i++){for(var unit=units[i],included=0===setFilters.length,j=0;j<setFilters.length;j++){var set=setFilters[j];if(isInRange(unit,"set",set,set)){included=!0;break}}if(included){var excluded=!1;for(j=0;j<setExclusions.length;j++){set=setExclusions[j];if(isInRange(unit,"set",set,set)){excluded=!0;break}}}included&&!excluded||(setHidden[makeUnitKey(unit)]=!0)}applyFilters()},filterRarity=function(button,rarity){if(rarityHidden={},button.classList.contains("selected")){button.classList.remove("selected"),button.checked=!1;for(var i=0;i<rarityFilters.length;i++)if(rarityFilters[i]==rarity){rarityFilters.splice(i,1);break}}else button.classList.add("selected"),rarityFilters.push(rarity);if(0<rarityFilters.length){i=0;for(var len=units.length;i<len;i++){for(var unit=units[i],hide=!0,j=0;j<rarityFilters.length;j++){rarity=rarityFilters[j];if(isInRange(unit,"rarity",rarity,rarity)){hide=!1;break}}hide&&(rarityHidden[makeUnitKey(unit)]=!0)}}applyFilters()},applyFilters=function(keepPage,skipDraw,skipRebuildList){unitsFiltered=[];for(var names=[],addedNames={},i=0,len=unitsShown.length;i<len;i++){var unit=unitsShown[i],key=makeUnitKey(unit);if(skillHidden[key]||factionHidden[key]||subfactionHidden[key]||attackHidden[key]||healthHidden[key]||delayHidden[key]||typeHidden[key]||fusionHidden[key]||setHidden[key]||nameHidden[key]||rarityHidden[key]||skillHiddenAdv[key]||dualFactionHidden[key]);else if(unitsFiltered.push(unit),!skipRebuildList){var card=getCardByID(unit);addedNames[card.name]||(names.push(card.name),addedNames[card.name]=!0)}}if(!skipRebuildList){var dataList=document.getElementById("names");dataList.replaceChildren.apply(dataList,names.map(function(name){var option=document.createElement("option");return option.value=name,option}))}skipDraw||doDrawCardList(unitsFiltered,!keepPage)},hasSkill=function(unit,skill){for(var skills=get_slim_card_by_id(unit,!0).skill,i=0,len=skills.length;i<len;i++)if(skill==skills[i].id)return!0;return!1},hasSkillAdvanced=function(unit,skillInfo){for(var skills=get_slim_card_by_id(unit,!0).skill,i=0,len=skills.length;i<len;i++){var skill=skills[i];if(skillInfo.id==skill.id){if(skillInfo.x&&(skill.x<skillInfo.x.min||skill.x>skillInfo.x.max))continue;if(skillInfo.c&&(skill.c<skillInfo.c.min||skill.c>skillInfo.c.max))continue;if(-1==skillInfo.y&&skill.y)continue;if(0<skillInfo.y&&skill.y!=skillInfo.y)continue;if(skillInfo.s&&skill.s!=skillInfo.s)continue;if(-1<skillInfo.all&&(skill.all||"0")!=skillInfo.all)continue;return!0}}return!1},clearFilters=function(){attackHidden={},attackRanges=[],healthHidden={},healthRanges=[],delayHidden={},delayRanges=[],delayExclusions=[],skillFilters=[],skillExclusions=[],skillHidden={},skillFiltersAdv=[],skillHiddenAdv={},factionHidden={},subfactionHidden={},dualFactionHidden={},rarityFilters=[],rarityHidden={},typeFilters=[],typeHidden={},setFilters=[],setExclusions=[],setHidden={},fusionFilters=[],fusionHidden={},nameHidden={},document.querySelectorAll(".selected").forEach(function(el){el.classList.remove("selected")}),document.querySelectorAll(".excluded").forEach(function(el){el.classList.remove("excluded")}),document.querySelectorAll(".selected-advanced").forEach(function(el){el.classList.remove("selected-advanced")}),document.getElementById("nameFilter").value="",applyFilters()},isInFaction=function(unit,faction){var factionID=factions.IDs[faction];return get_slim_card_by_id(unit,!0).type==factionID},isInSubfaction=function(unit,faction){var factionID=factions.IDs[faction],card=get_slim_card_by_id(unit,!0);return void 0===factionID?0===card.sub_type.length:0<=card.sub_type.indexOf(factionID.toString())},isDualFaction=function(unit){return 1<get_slim_card_by_id(unit,!0).sub_type.length},isInRange=function(unit,field,min,max){var value=get_slim_card_by_id(unit,!0)[field];return void 0!==value&&(!(0<=min&&value<min)&&!(0<=max&&max<value))},toggleSkillDetails=function(){applyFilters(!0)},toggleUpgrades=function(checkbox){showUpgrades=checkbox.checked,$("body").addClass("loading"),setTimeout(function(){drawCardList(),$("body").removeClass("loading"),applyFilters(!1)},1)};function sortAndDraw(select){doSort(select),applyFilters()}var sortCards=function(select){doSort(select)};function doSort(select){var sortField=select.value;unitsShown.sort(function(unitA,unitB){var comparison=is_commander(unitB.id)-is_commander(unitA.id);if(0!=comparison)return comparison;if("id"===sortField)return compareByID(unitA,unitB);var cardA=getCardByID(unitA),cardB=getCardByID(unitB);return 0!=(comparison="sub_type"===sortField?compareBySubfactions(cardA,cardB):(cardA[sortField]||0)-(cardB[sortField]||0))?comparison:compareByID(unitA,unitB)})}function quicksort(arr,comparator){if(0===arr.length)return[];for(var left=[],right=[],pivot=arr[0],i=1;i<arr.length;i++)comparator(arr[i],pivot)<0?left.push(arr[i]):right.push(arr[i]);return quicksort(left,comparator).concat(pivot,quicksort(right,comparator))}var compareByID=function(unitA,unitB){var comparison,unitIDA=unitA.id,unitIDB=unitB.id;return 0!=(comparison=unitIDA%1e4-unitIDB%1e4)?comparison:0!=(comparison=unitIDA-unitIDB)?comparison:0!=(comparison=unitA.level-unitB.level)?comparison:sortByRunes(unitA,unitB)};function compareBySubfactions(cardA,cardB){for(var subfactionsA=cardA.sub_type,subfactionsB=cardB.sub_type,maxSubfactions=Math.max(subfactionsA.length,subfactionsB.length),i=0;i<maxSubfactions;i++){var comparison=(subfactionsA[i]||-1)-(subfactionsB[i]||-1);if(comparison)return comparison}return 0}function sortByRunes(unitA,unitB){var comparison=unitA.runes.length-unitB.runes.length;return 0!=comparison?comparison:unitA.runes.length?unitA.runes[0].id-unitB.runes[0].id:0}var getUnitFromCard=function(htmlCard){for(var unit={id:htmlCard.attributes.getNamedItem("data-id").value,level:htmlCard.attributes.getNamedItem("data-level").value},runeIDs=htmlCard.attributes.getNamedItem("data-runeids").value.split(","),runes=[],i=0,len=runeIDs.length;i<len;i++){var runeID=runeIDs[i];0<runeID&&runes.push({id:runeID})}var index=htmlCard.attributes.getNamedItem("data-index");return index&&(unit.index=index.value),unit.runes=runes,unit},skillStyle=document.createElement("style");function setDeckName(name){document.getElementById("version_label").innerText+=" "+name}function saveDeck(){var hash=document.getElementById("hash").value;document.getElementById("saveDeckName").value="";var savedDecks=storageAPI.getSavedDecks();for(var name in savedDecks){if(hash==savedDecks[name]){document.getElementById("saveDeckName").value=name;break}}saveDeckDialog.dialog("option","position",{my:"center",at:"center",of:window}),saveDeckDialog.dialog("open")}function loadDeck(){$('label[for="loadDeckName"]').html("<strong>Deck:</strong>"),loadDeckDialog.dialog("option","position",{my:"center",at:"center",of:window}),loadDeckDialog.dialog("open"),loadDeckDialog.onloaded=hash_changed}function loadInventory(){$('label[for="loadDeckName"]').html("<strong>Inventory:</strong>"),loadDeckDialog.dialog("option","position",{my:"center",at:"center",of:window}),loadDeckDialog.dialog("open"),loadDeckDialog.onloaded=setInventory}function setInventory(hash){inventory=hash,drawCardList(),generateLink()}function toggleInventoryMode(){if(inventoryMode=!inventoryMode)document.getElementById("inventoryMode").value="Switch to Deck Builder",$deck.find(".card.blank").remove(),$deck.sortable("disable"),doDrawDeck();else{document.getElementById("inventoryMode").value="Switch to Inventory Builder";for(var i=$deck.find(".card").length;i<16;i++)$deck.append("<div class='card blank'></div>");$deck.sortable("enable"),doDrawDeck()}generateLink()}function generateLink(){var params=[],name=_GET("name"),hash=document.getElementById("hash").value;name&&params.push("name="+name),hash&&params.push("hash="+hash),inventory&&params.push("inventory="+hash_encode({commander:elariaCaptain,deck:inventory})),inventoryMode&&params.push("unlimited"),_DEFINED("spoilers")&&params.push("spoilers");var link="http://thesench.github.io/SIMSpellstone/DeckBuilder.html";params.length&&(link+="?"+params.join("&")),$("#link").attr("href",link).text(link)}function externalData(hash,inventoryHash){setHash(hash),inventory=inventoryHash}skillStyle.type="text/css",document.getElementsByTagName("head")[0].appendChild(skillStyle);var storageAPI={};function getTutorialScript(){for(var tutorialParts=[{msg:"Welcome to SIM Spellstone!  This is a brief tutorial of how to use the Deck Builder."},{ui:"#deckContainer",msg:'The "Deck" section contains your current deck.',actions:[clearHash,showDeck,clearFilters,hideFilters,hideCollection]},{ui:"#hash-container",msg:"If you have a deck hash, you can paste it here to set the current deck.",actions:[clearHash]},{ui:"#deckContainer",msg:"Manually modifying the deck hash will automatically update the deck.",actions:[setHash]},{ui:"#deckContainer",msg:"Left-click on a card to remove it from your deck.",actions:[removeCard]},{ui:"#deckContainer",msg:'Left-click on the commander will remove it and replace it with "Elaria Captain".',actions:[function(){updateHash("QpLQAQwrxIQWkpBglFpB4jrBC4jrBC4jrBC")}]},{ui:"#deckContainer",msg:'Pressing Ctrl-Z will undo the last change made to your deck.  (Ctrl-Y can be used to "redo" a change as well).',actions:[removeCard]},{ui:"#deckContainer",msg:"Holding Ctrl and left-clicking on a card will add a copy of it to your deck.",actions:[setHash]},{ui:"#deckContainer",msg:"You can drag-and-drop units in your deck to rearrange them (currently PC-only).",actions:[closeEditUnit,moveCard]},{ui:"#unitOptions",dialog:!0,msg:"Right-click on a card to bring up an edit dialog.",actions:[moveCard,editCard]},{ui:"#unitOptions",dialog:!0,msg:"Here, you can edit its level, fusion, and runes.",actions:[makeCardEdits]},{ui:"#deck .card:eq(1)",msg:'Changes will made will be shown on the card, but will not be saved until you hit "OK".',actions:[editCard,makeCardEdits]},{ui:"#deckContainer",msg:'Clicking "Cancel" will revert the unit back to its original stats.',actions:[closeEditUnit,moveCard]},{ui:"#link",msg:"This link will load the DeckBuilder with your current deck to allow for easy sharing of decks.  It is automatically updated whenever you update the deck."},{ui:"#resetDeck",msg:'This will remove all cards from your deck and set the commander back to "Elaria Captain".',actions:[clearHash]},{ui:"#sortDeck",msg:"This will sort all cards in your deck based on faction, rarity, and ID (the same way they are sorted in the game)."},{ui:"#saveDeck",msg:"This will allow you to save a deck locally so that you can easily load it later."},{ui:"#loadDeck",msg:"If you have any saved decks, you can use this button to quickly load one of them into the DeckBuilder.",actions:[hideCollection,showDeck]},{ui:"#collection-container",msg:'The "Cards" section contains all of the cards in the game.',actions:[function(){$("#deck-container").accordion("option","active",null)},function(){$("#collection-container").accordion("option","active",0)}]},{ui:"#collection-container",msg:"Left-clicking on a card will add it to your deck.",actions:[closeDetails]},{ui:"#detailedView",dialog:!0,msg:"Right-clicking on a card will display a detailed view of the card.",actions:[function(){$("#collection-container").find(".card").first().contextmenu()},hideFilters]},{ui:"#filter-container",msg:'The "Filters" section allows you to filter the cards in the collection.',actions:[closeDetails,function(){$("#filter-container").accordion("option","active",0)}]},{ui:"#filter-container",msg:"Click on a filter to only show cards that match that filter.",actions:[clearFilters]},{ui:"[name=skill][data-filter=fervor]",msg:'For instance, clicking the "Fervor" filter will only show units that have the skill "Fervor".',actions:[filter]},{ui:"#collection-container",msg:'Now only units with "Fervor" are visible.',actions:[function(){advancedFilters.dialog("close")}]},{ui:"#advancedFilters",dialog:!0,msg:"Right-clicking on a Skill filter will allow you to perform more advanced filtering.",actions:[advancedFilter]},{ui:"#advancedFilters",dialog:!0,msg:"Here you can specify specific Skill values to filter by.  Different skills have different advanced filters available.",actions:[filter,advancedFilter,function(){$("#amount-min").val(4),resetFocus()}]},{ui:"[name=skill][data-filter=fervor]",dialog:!0,msg:'Clicking "OK" will apply the advanced filtering.',actions:[saveAdvancedFilters]},{ui:"#collection-container",msg:'Now only units with at least "Fervor 4" are visible.'},{ui:"#filter-container",msg:'Holding the "Alt" key while clicking on a filter while hide cards that match that filter (not supported by all filters).',actions:[function(){var fervor=$("[name=skill][data-filter=enfeeble]");for(;fervor.hasClass("excluded")||fervor.hasClass("selected");)fervor.click()}]},{ui:"[name=skill][data-filter=enfeeble]",msg:'For instance, holding "Alt" and clicking the "Hex" filter will hide all units that have the skill "Hex".',actions:[filterExclusive]},{ui:"#collection-container",msg:'Now only units with no "Hex" and at least "Fervor 4" are visible.'},{ui:"#name-container",msg:"You can also simply search for a unit by its name.",actions:[function(){$("#nameFilter").val("").trigger(jQuery.Event("keyup"))}]},{ui:"#name-container",msg:'For instance, typing "hide" will filter down to just "Spikehide Dragon" and "Spearhide Dragon".',actions:[setNameFilter]},{ui:"#name-container",msg:'Tip: If the collection is filtered down to a single card, pressing "Enter" while in the Name Filter will add that card to your deck.',actions:[setNameFilter,saveAdvancedFilters,filterExclusive]},{ui:"#clear-filters",msg:'You can click the "Clear All" button to reset all filters.',actions:[clearFilters]},{msg:'To view this tutorial again at any time, you can click the "Help" button.  (Note: this will reset the DeckBuilder.)'}],currentPage=getCurrentPage(),i=0;i<tutorialParts.length;i++){var part=tutorialParts[i];part.showFor&&part.showFor!==currentPage&&tutorialParts.splice(i--,1)}function showDeck(){$("#deck-container").accordion("option","active",0)}function hideFilters(){$("#filter-container").accordion("option","active",null)}function hideCollection(){$("#collection-container").accordion("option","active",null)}function closeDetails(){detailsDialog.dialog("close")}function filter(){for(var fervor=$("[name=skill][data-filter=fervor]");!fervor.hasClass("selected");)fervor.click()}function filterExclusive(){var vengeance=$("[name=skill][data-filter=enfeeble]"),e=jQuery.Event("click");for(e.altKey=!0;!vengeance.hasClass("excluded");)vengeance.trigger(e)}function advancedFilter(){$("[name=skill][data-filter=fervor]").contextmenu(),resetFocus()}function saveAdvancedFilters(){advancedFilters.dialog("option","buttons").OK.apply(advancedFilters),resetFocus()}function setNameFilter(){$("#nameFilter").val("hide").trigger(jQuery.Event("keyup"))}function clearFilters(){$("#clear-filters").click()}function setHash(){updateHash("g~pAAQwrxIQWkpBglFpBglFpB4jrBC4jrBC4jrBC")}function removeCard(){updateHash("g~pAAQwrxIQWkpBglFpB4jrBC4jrBC4jrBC")}function moveCard(){updateHash("g~pAAQwrxIglFpBQWkpBglFpB4jrBC4jrBC4jrBC")}function editCard(){$("#deck .card").eq(1).contextmenu(),resetFocus()}function makeCardEdits(){$("#fusion").val(3),$("#runeChoices").val("5102").change(),resetFocus()}function closeEditUnit(){optionsDialog.dialog("close")}function clearHash(){updateHash("QpLQA")}function resetFocus(){$(".ui-dialog-buttonset .ui-button:visible").first().focus()}function updateHash(hash){$("#hash").val(hash).change()}return tutorialParts}!function(angular){"use strict";var module;try{module=angular.module("simulatorApp")}catch(loadError){module=angular.module("simulatorApp",[])}module.controller("DeckStorageCtrl",["$scope","$window",function($scope,$window){$scope.getSavedDecks=$window.storageAPI.getSavedDecks,$scope.keys=function(obj){return obj?Object.keys(obj):[]}}])}(angular),function(){try{var storage=window.localStorage,x="__storage_test__";return storage.setItem(x,x),storage.removeItem(x),!0}catch(e){return!1}}()?function(){var SaveFields_decks="SavedDecks",SaveFields_tutorial="Tutorial";function getStorage(storageName){var storage=localStorage.getItem(storageName);if(storage)try{storage=JSON.parse(storage)}catch(err){storage={}}else storage={};return storageAPI.data[storageName]=storage}storageAPI.initialize=function(){var currentPage=getCurrentPage();!function(){var storage=getStorage(SaveFields_decks);void 0===storage.savedDecks&&storageAPI.setField(SaveFields_decks,"savedDecks",storage)}(),storageAPI.getField(SaveFields_decks,"savedDecks",{}),storageAPI.shouldShowTutorial=storageAPI.getField(SaveFields_tutorial,currentPage,!0)[currentPage];var cachedOnUpdate=storageAPI.onUpdateDecks;storageAPI.onUpdateDecks=function(savedDecks){cachedOnUpdate(),storageAPI.setField(SaveFields_decks,"savedDecks",savedDecks)};var cachedSetShowTutorial=storageAPI.setShowTutorial;storageAPI.setShowTutorial=function(value){cachedSetShowTutorial(value),storageAPI.setField(SaveFields_tutorial,currentPage,value)}},storageAPI.getField=function(storageName,fieldName,defaultValue){var value=getStorage(storageName)[fieldName];return void 0===value&&(value=defaultValue,storageAPI.setField(storageName,fieldName,value)),value},storageAPI.setField=function(storageName,fieldName,newValue){var storage=getStorage(storageName);storage[fieldName]=newValue,localStorage.setItem(storageName,JSON.stringify(storage))},window.addEventListener("storage",function(e){"__storage_test__"!==e.key&&localStorage.getItem(e.key)!==e.newValue&&angular.element("#loadDeckDialog").scope().$apply(localStorage.setItem(e.key,e.newValue))})}():function(){storageAPI.initialize=function(){storageAPI.getSavedDecks=function(){return{}},storageAPI.loadDeck=notSupported,storageAPI.deleteDeck=notSupported,storageAPI.clearDecks=notSupported,storageAPI.getField=function(storageName,fieldName,defaultValue){return defaultValue},storageAPI.setField=function(){},storageAPI.savedDecks={},storageAPI.shouldShowTutorial=!0};var notSupported=function(name,hash){alert("Your browser does not support this feature.")}}(),function(){var $loadDialogScope,SaveFields_decks="SavedDecks";storageAPI.data={},storageAPI.getSavedDecks=function(){return storageAPI.getField(SaveFields_decks,"savedDecks",{})},storageAPI.saveDeck=function(name,hash){var savedDecks=storageAPI.getSavedDecks();savedDecks[name]=hash,storageAPI.onUpdateDecks(savedDecks)},storageAPI.loadDeck=function(name){return storageAPI.getSavedDecks()[name]},storageAPI.deleteDeck=function(name){var savedDecks=storageAPI.getSavedDecks();delete savedDecks[name],storageAPI.onUpdateDecks(savedDecks)},storageAPI.clearDecks=function(name){var savedDecks=storageAPI.getSavedDecks();for(var name in savedDecks)delete savedDecks[name];storageAPI.onUpdateDecks(savedDecks)},storageAPI.onUpdateDecks=function(){($loadDialogScope=$loadDialogScope||angular.element("#loadDeckDialog").scope()).$apply()},storageAPI.setShowTutorial=function(value){shouldShowTutorial=value},storageAPI.initialize()}(),function(angular){"use strict";angular.module("simulatorApp").controller("CardDetailsCtrl",["$scope","$window",function($scope,$window){var image;($window.cardDetailScope=$scope).id&&$scope.level&&($scope.unit=$window.makeUnitInfo($scope.id,$scope.level),$scope.card=$window.getCardInfo($scope.unit)),$scope.setUnit=function(unit){var hiddenUntil;return $scope.id=unit.id,$scope.level=unit.level,$scope.unit=$window.makeUnitInfo($scope.id,$scope.level),$scope.card=$window.getCardInfo($scope.unit),$scope.releaseDate=hiddenUntil=(hiddenUntil=$scope.card.hidden_until)?(hiddenUntil=new Date(Number(hiddenUntil))).getMonth()+1+"/"+hiddenUntil.getDate()+"/"+hiddenUntil.getFullYear():"",this},$scope.visible=!1,$scope.getCardImage=function(){var image=new Image;return image.src="res/cardImagesLarge/"+loadCard($scope.card.id).picture+".jpg",image.onerror=function(){330!==this.naturalHeight&&(this.src=th.replace("ImagesLarge","Images"),this.onload=null),$modal.find("img").attr("src",this.src)},"res/cardImagesLarge/"+loadCard($scope.card.id).picture+".jpg"},$scope.imageSrc="res/cardImagesLarge/NotFound.jpg",$scope.$watch("card.id",function(newValue,oldValue){if(newValue){var extension=".jpg";is_commander(newValue)&&(extension=".png"),(image=new Image).onerror=function(){this.onerror=function(){this.onerror=null,this.src="res/cardImagesLarge/NotFound.jpg"},this.src=this.src.replace("ImagesLarge","Images")},image.onload=function(){this.onerror=null,this.onload=null,$scope.imageSrc=image.src,$scope.$apply()},image.src="res/cardImagesLarge/"+loadCard(newValue).picture+extension}else $scope.imageSrc="res/cardImagesLarge/NotFound.jpg"}),$scope.isCommander=function(){return $window.is_commander($scope.id)},$scope.commanderClass=function(){return $scope.isCommander()?"commander "+$scope.getFaction($scope.card.type).toLowerCase():""},$scope.getRarityString=function(){return $window.rarityStrings[$scope.card.rarity]},$scope.fontSize=function(){var numChars=$("#rarity-string").text().length;return{"font-size":Math.ceil(71e3/(numChars*numChars))+"px"}},$scope.showRarity=function(){var card=$scope.card;return 0<card.rarity||1<card.maxLevel},$scope.getRarityIcon=function(){var card=$scope.card;return 0<card.rarity?"res/cardAssets/Level_"+(card.rarity+(card.maxLevel>Number(card.rarity)+2?"_"+card.maxLevel:""))+"_"+card.level+".png":1<card.maxLevel?"res/cardAssets/"+card.maxLevel+"_"+card.level+".png":void 0};var previousFusion=$scope.previousFusion=function(){var fusions=$window.FUSIONS;for(var key in fusions)if(fusions[key]===$scope.id)return key;return!1},nextFusion=$scope.nextFusion=function(){return $window.FUSIONS[$scope.id]};$scope.previousLevel=function(){return 1<$scope.card.level},$scope.nextLevel=function(){return $scope.card.level<$scope.card.maxLevel};var getFusion=$scope.getFusion=function(){var id=Number($scope.id);return Math.floor(id/1e4)+1};$scope.fusionText=function(){return{1:"Single",2:"Dual",3:"Quad"}[getFusion()]},$scope.keyPress=function(event){var fn;switch(event.which){case 37:fn="decrementLevel";break;case 38:fn="incrementFusion";break;case 39:fn="incrementLevel";break;case 40:fn="decrementFusion"}fn&&($scope[fn](),event.preventDefault(),event.stopPropagation())},$scope.isFused=function(){return 1<getFusion()},$scope.getFusionIcon=function(){return"res/cardAssets/"+(2===getFusion()?"Dualfuse":"Quadfuse")+".png"},$scope.getSkillIcon=function(skillID){var skillData=SKILL_DATA[skillID];return"res/skills/"+(skillData?skillData.icon:skillID)+".png"},$scope.getSkillDescription=function(skillID){var skillData=SKILL_DATA[skillID];return skillData?skillData.desc||skillData.name:skillID};var setNames={1e3:"Basic",7e3:"Basic",2e3:"Reward",3e3:"Premium",4e3:"BoxOnly",9999:"StoryElements"};$scope.getSetIcon=function(){var setName=setNames[$scope.card.set];return"res/cardAssets/"+(setName=setName||setNames[9999])+"_64x64.png"},$scope.getFaction=function(factionID){var faction=$window.factions.names[factionID];return"Tower"===faction&&(faction=""),faction},$scope.decrementFusion=function(){var fused=previousFusion(Number($scope.id));fused&&($scope.id=fused,$scope.unit.id=$scope.id,$scope.card=$window.getCardInfo($scope.unit),$scope.level>$scope.card.maxLevel&&($scope.level=$scope.card.maxLevel,$scope.unit.level=$scope.level,$scope.card=$window.getCardInfo($scope.unit)))},$scope.incrementFusion=function(){var fused=nextFusion(Number($scope.id));if(fused){var max=$scope.level==$scope.card.maxLevel;$scope.id=fused,$scope.unit.id=$scope.id,$scope.card=$window.getCardInfo($scope.unit),max&&$scope.level<$scope.card.maxLevel&&($scope.level=$scope.card.maxLevel,$scope.unit.level=$scope.level,$scope.card=$window.getCardInfo($scope.unit))}},$scope.decrementLevel=function(){$scope.level=Number($scope.level),1<$scope.level&&$scope.level--,$scope.unit.level=$scope.level,$scope.card=$window.getCardInfo($scope.unit)},$scope.incrementLevel=function(){$scope.level=Number($scope.level),$scope.level<$scope.card.maxLevel&&$scope.level++,$scope.unit.level=$scope.level,$scope.card=$window.getCardInfo($scope.unit)}}]).directive("ngRightClick",["$parse",function($parse){return{link:function(scope,element,attrs){var fn=$parse(attrs.ngRightClick);element.contextmenu(function(event){scope.$apply(function(){event.preventDefault(),fn(scope,{$event:event})})})}}}]).directive("cardDetails",function(){return{restrict:"A",replace:!0,templateUrl:"templates/card-template.html",controller:"CardDetailsCtrl"}}).directive("sssAutofocus",function(){return{link:function(scope,elem,attr){elem.focus()}}}).filter("capitalize",function(){return function(input){if(input){for(var parts=input.split(" "),i=0;i<parts.length;i++){var part=parts[i];parts[i]=part.charAt(0).toUpperCase()+part.substr(1)}return parts.join(" ")}return""}}).filter("convertName",function(){return window.convertName}).controller("DeckBuilderCtrl",["$scope","$window",function($scope,$window){$scope.getSkillIcon=function(skillID){var skillData=SKILL_DATA[skillID];return"res/skills/"+(skillData?skillData.icon:skillID)+".png"},$scope.supportedSkills=["absorb","armored","backlash","barrage","berserk","burn","corrosive","counter","counterburn","daze","enfeeble","enhance","enrage","evade","evadebarrier","fervor","flurry","frost","fury","heal","heartseeker","imbue","jam","leech","legion","nullify","pierce","poison","poisonstrike","protect","rally","regenerate","scorchbreath","silence","stasis","strike","taunt","valor","weaken","weakenself"].sort(function(idA,idB){return SKILL_DATA[idA].name.localeCompare(SKILL_DATA[idB].name)}),$scope.getSkillName=function(skillID){var skillData=SKILL_DATA[skillID];return skillData?skillData.name:skillID},$scope.showAdvancedFilters=$window.showAdvancedFilters,$scope.filterSkill=function(event,skillID){$window.filterSkill(event.target,skillID,event.altKey)}}])}(angular),$(document).ready(function(){var tutorialParts=getTutorialScript(),overlayHtml=$("<div></div>");function checkTutorial(){storageAPI.shouldShowTutorial?showTutorial():closeTutorial()}function showTutorial(){tutorialIndex=0,setTutorial();$("#tutorial").show()}$(document.body).append(overlayHtml),overlayHtml.load("templates/tutorial-overlay.html",null,function(){overlayHtml.replaceWith(function(){return $(this).contents()}),$("#tutorial-show").prop("checked",storageAPI.shouldShowTutorial).change(function(event){storageAPI.setShowTutorial(this.checked)}),$("#help").click(showTutorial),$("#tutorial-close, #tutorial-skip").click(closeTutorial),$("#tutorial-next").click(nextTutorial),$("#tutorial-prev").click(previousTutorial),void 0===delayTutorial&&checkTutorial()});var uiTimer,tutorialIndex=0;function nextTutorial(){tutorialIndex++,setTutorial()}function previousTutorial(){tutorialIndex--,setTutorial()}function closeTutorial(){$("#tutorial").hide(),$("#tutorial-permahide").is(":checked")&&storageAPI.hideTutorial()}function setTutorial(){clearTimeout(uiTimer);var tutorialPart=tutorialParts[tutorialIndex],actions=tutorialPart.actions;if(actions)for(var i=0;i<actions.length;i++)actions[i]();var msg=tutorialPart.msg,uiFocus=tutorialPart.ui;if(uiFocus){var target=$(uiFocus);tutorialPart.dialog&&(target=target.parent()),showUI(target),actions&&(uiTimer=setTimeout(showUI,500,target)),msg.indexOf(!1)&&(msg=msg.replace(/\{0\}/g,target.text()))}else $(".overlay-fog").width(0).height(0);$("#tutorialMessage").text(msg),tutorialIndex<tutorialParts.length-1?($("#tutorial-next").show(),$("#tutorial-close").hide()):($("#tutorial-next").hide(),$("#tutorial-close").show()),0<tutorialIndex?$("#tutorial-prev").removeClass("disabled"):$("#tutorial-prev").addClass("disabled")}function showUI(target){var position=target.offset();$(".overlay-fog").css({top:position.top-2+"px",left:position.left-2+"px"}).width(target.outerWidth()+4+"px").height(target.outerHeight()+4+"px")}window.showTutorial=showTutorial,window.checkTutorial=checkTutorial});
//# sourceMappingURL=deckbuilder.min.js.map