for(var skillID in SKILL_DATA){var skillInfo=SKILL_DATA[skillID];"flurry"===skillID?skillInfo.type="flurry":0<=["turnStart","onAttack","onDamaged","turnEnd"].indexOf(skillInfo.type)&&(skillInfo.type="passive")}var REVERSE_FUSIONS={};for(var id in FUSIONS){var fusion=FUSIONS[id];REVERSE_FUSIONS[fusion]=id}function parseInt(value){return value>>0}function _GET(variable){for(var vars=window.location.search.substring(1).split("&"),i=0;i<vars.length;i++){var pair=vars[i].split("=");if(decodeURIComponent(pair[0])==variable)return decodeURIComponent(pair[1]?pair[1]:"")}}function _DEFINED(variable){for(var vars=window.location.search.substring(1).split("&"),i=0;i<vars.length;i++){var pair=vars[i].split("=");if(decodeURIComponent(pair[0])==variable)return!0}return!1}"function"!=typeof String.prototype.format&&(String.prototype.format=function(){var args=arguments;return this.replace(/{(\d+)}/g,function(match,number){return void 0!==args[number]?args[number]:match})}),"function"!=typeof Object.assign&&(Object.assign=function(target){"use strict";if(null==target)throw new TypeError("Cannot convert undefined or null to object");target=Object(target);for(var index=1;index<arguments.length;index++){var source=arguments[index];if(null!=source)for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target}),Function.prototype.debounce=function(wait){var timeout,func=this;return function(){var context=this,args=arguments;clearTimeout(timeout),timeout=setTimeout(function(){timeout=null,func.apply(context,args)},wait)}},Function.prototype.throttle=function(wait){var timeout,func=this;return function(){var context=this,args=arguments;timeout||(func.apply(context,args),timeout=setTimeout(function(){timeout=null,func.apply(context,args)},wait))}};var matchTimer={elapsed:function(){var end=this.timeStop||Date.now();return this.elapsedSeconds(this.timeStart,end)},timeSince:function(start){return this.elapsedSeconds(start,Date.now())},elapsedSeconds:function(start,end){return((end-start)/1e3).toFixed(3)},batchElapsed:function(start){return this.timeSince(start||this.batchStarted)},startBatch:function(){this.batchStarted=Date.now()},stop:function(){this.timeStop=Date.now()},reset:function(){this.timeStart=Date.now(),this.timeStop=0}};function shuffle(list){var j,tempi,tempj,i=list.length;if(0==i)return!1;for(;--i;)j=~~(Math.random()*(i+1)),tempi=list[i],tempj=list[j],list[i]=tempj,list[j]=tempi}function initializeCard(card,p,newKey){card.owner=p,card.timer=card.cost,applyDefaultStatuses(card),card.health_left=card.health,card.key=newKey,card.reusableSkills||card.resetTimers()}function copy_deck(original_deck){var new_deck={};return new_deck.commander=original_deck.commander,new_deck.deck=copy_card_list(original_deck.deck),new_deck}function getDeckCards(original_deck,owner){var new_deck={};new_deck.commander=getCardByID(original_deck.commander),new_deck.deck=[];for(var list=original_deck.deck,battlegrounds=SIMULATOR.battlegrounds.onCreate.filter(function(bge){return!("player"===owner&&bge.enemy_only||"cpu"===owner&&bge.ally_only)}),i=0,len=list.length;i<len;i++)new_deck.deck.push(get_card_apply_battlegrounds(list[i],battlegrounds));return new_deck}function copy_card_list(original_card_list){for(var new_card_list=[],key=0,len=original_card_list.length;key<len;key++)new_card_list[key]=original_card_list[key];return new_card_list}var CardPrototype,defaultStatusValues={attack_berserk:0,attack_valor:0,attack_rally:0,attack_weaken:0,attack_corroded:0,corrosion_timer:0,mark_target:0,attackIncreasePrevention:0,barrier_ice:0,corroded:0,enfeebled:0,enraged:0,envenomed:0,heartseeker:0,imbued:0,invigorated:0,invisible:0,nullified:0,poisoned:0,protected:0,scorched:0,warded:0,confused:!1,jammed:!1,jammedSelf:!1,silenced:!1,bash_triggered:!1,dualstrike_triggered:!1,ondeath_triggered:!1,reanimated:!1};function applyDefaultStatuses(card){for(var status in card.health-=card.invigorated,card.removeImbue(),card.enhanced={},defaultStatusValues)card[status]=defaultStatusValues[status]}var makeUnit=function(){function getStatBeforeRunes(card,statBase){return getCardByID({id:card.id,level:card.level})[statBase]}function scaleSkills(new_card,skillList,mult){for(var key in skillList){var skill=skillList[key];skill.x&&((skill=copy_skill(skill)).x+=Math.ceil(skill.x*mult),skill.boosted=!0,skillList[key]=skill,new_card.highlighted.push(skill.id))}}for(var id in CardPrototype={p:null,health_left:0,timer:0,key:void 0,isCommander:function(){return"1"==this.card_type},isAssault:function(){return"2"==this.card_type},isTower:function(){return!1},isTrap:function(){return"3"==this.card_type},isAlive:function(){return 0<this.health_left},isDamaged:function(){return this.health_left<this.health},isActive:function(){return 0==this.timer},isActiveNextTurn:function(){return this.timer<=1},isInactive:function(){return 1<=this.timer},isUnjammed:function(){return!this.jammed},isUnsilenced:function(){return!this.silenced},imbue:function(skill){this.imbued||(this.imbued={});var imbueSkillsKey,imbued=this.imbued,skillID=skill.id;switch(SKILL_DATA[skillID].type){case"toggle":return this[skillID]=!0,void(this.imbued[skillID]=1);case"passive":return this[skillID]+=parseInt(skill.x),void(this.imbued[skillID]=(this.imbued[skillID]||0)+skill.x);case"flurry":return void(this.flurry||(this.flurry=skill,this.flurry.countdown=0,this.imbued.flurry=!0));case"onDeath":imbueSkillsKey="onDeathSkills";break;case"earlyActivation":imbueSkillsKey="earlyActivationSkills";break;case"activation":default:imbueSkillsKey="skill"}if(void 0===imbued[imbueSkillsKey]){var original=this[imbueSkillsKey];imbued[imbueSkillsKey]=original.length,this[imbueSkillsKey]=original.slice()}this[imbueSkillsKey].push(skill)},scorch:function(amount){var scorched=this.scorched;scorched?(scorched.amount+=amount,scorched.timer=2):this.scorched={amount:amount,timer:2}},removeImbue:function(){var imbue=this.imbued;if(imbue){for(var key in imbue){var imbuement=imbue[key];"skill"===key||"earlyActivationSkills"===key||"onDeathSkills"===key?this[key]=this[key].slice(0,imbuement):this[key]-=imbuement}this.imbued=0}},hasSkill:function(s,all){var target_skills;switch(SKILL_DATA[s].type){case"toggle":case"passive":case"flurry":return this[s];case"onDeath":target_skills=this.onDeathSkills;break;case"earlyActivation":target_skills=this.earlyActivationSkills;break;case"activation":default:target_skills=this.skill}for(var key in target_skills){var skill=target_skills[key];if(skill.id===s&&(void 0===all||(skill.all||0)==all))return!0}return!1},hasAttack:function(){return 0<this.adjustedAttack()},attackPlusBuffs:function(){return this.attack+this.attack_rally+this.attack_berserk+this.attack_valor},adjustedAttack:function(){return this.attack+this.attack_rally+this.attack_berserk+this.attack_valor-this.attack_weaken-this.attack_corroded},permanentAttack:function(){return this.attack+this.attack_berserk+this.attack_valor},hasNegativeStatus:function(){return this.poisoned||this.enfeebled||this.scorched||this.jammed||this.envenomed||this.attack_weaken||this.silenced||this.confused},isInFaction:function(faction){if(void 0===faction)return 1;var factions=faction.split(",");if(factions.length<=1)return this.type==faction?1:0<=this.sub_type.indexOf(faction.toString())?1:0;for(var i=0;i<factions.length;i++)if(!this.isInFaction(factions[i]))return 0;return 1},isTargetRarity:function(rarity){return void 0===rarity||this.rarity===Number(rarity)},isTargetDelay:function(delay){return void 0===delay||0<=delay.indexOf(this.cost)},resetTimers:function(){for(var i=0,len=this.skillTimers.length;i<len;i++)this.skillTimers[i].countdown=0},addRunes:function(runes){addRunes(this,runes)}},SKILL_DATA){var type=SKILL_DATA[id].type;"passive"===type?CardPrototype[id]=0:"toggle"===type&&(CardPrototype[id]=!1)}return applyDefaultStatuses(CardPrototype),function(original_card,unit_level,runes,skillModifiers,skillMult,isToken){unit_level=unit_level||1;var card=Object.create(CardPrototype);card.id=original_card.id,card.name=original_card.name,card.attack=original_card.attack,card.health=original_card.health,card.maxLevel=original_card.maxLevel,card.level=unit_level>card.maxLevel?card.maxLevel:unit_level,card.cost=original_card.cost||0,card.rarity=original_card.rarity,card.card_type=original_card.card_type,card.type=original_card.type,card.sub_type=original_card.sub_type||[],card.set=original_card.set;var upgrade,original_skills=original_card.skill;if(1<card.level)for(var key in original_card.upgrades)if(void 0!==(upgrade=original_card.upgrades[key]).cost&&(card.cost=upgrade.cost),void 0!==upgrade.health&&(card.health=upgrade.health),void 0!==upgrade.attack&&(card.attack=upgrade.attack),void 0!==upgrade.desc&&(card.desc=upgrade.desc),0<upgrade.skill.length&&(original_skills=upgrade.skill),key==card.level)break;if(card.base_health=card.health,original_skills=original_skills.slice(),skillModifiers&&skillModifiers.length&&function(new_card,original_skills,skillModifiers,isToken){new_card.highlighted=[];for(var i=0;i<skillModifiers.length;i++){var skillModifier=skillModifiers[i];if("statChange"===skillModifier.modifierType&&!isToken)for(var j=0;j<skillModifier.effects.length;j++){var statChange=skillModifier.effects[j];new_card.isInFaction(statChange.y)&&new_card.isTargetRarity(statChange.rarity)&&new_card.isTargetDelay(statChange.delay)&&Object.keys(statChange).forEach(function(stat){new_card[stat]=statChange[stat]})}}}(card,0,skillModifiers,isToken),runes){card.addRunes(runes);var runeMult=1;skillModifiers&&skillModifiers.forEach(function(skillModifier){"runeMultiplier"===skillModifier.modifierType&&skillModifier.effects.forEach(function(effect){card.isInFaction(effect.y)&&(runeMult=parseInt(effect.mult))})}),addRunesToSkills(original_skills,runes,runeMult)}else card.runes=[];return skillModifiers&&skillModifiers.length&&function(new_card,original_skills,skillModifiers,isToken){new_card.highlighted=[];for(var i=0;i<skillModifiers.length;i++){var skillModifier=skillModifiers[i];if("evolve_skill"===skillModifier.modifierType)for(var j=0;j<skillModifier.effects.length;j++){var evolution=skillModifier.effects[j];for(var key in original_skills){var skill=original_skills[key];skill.id===evolution.id&&skill.all==evolution.all&&new_card.isTargetRarity(evolution.rarity)&&new_card.isTargetDelay(evolution.delay)&&((skill=copy_skill(skill)).id=evolution.s,skill.boosted=!0,original_skills[key]=skill,new_card.highlighted.push(skill.id))}}else if("add_skill"===skillModifier.modifierType)for(j=0;j<skillModifier.effects.length;j++){var addedSkill=skillModifier.effects[j];if(new_card.isInFaction(addedSkill.y)&&new_card.isTargetRarity(addedSkill.rarity)&&new_card.isTargetDelay(addedSkill.delay)){var new_skill={};if(new_skill.id=addedSkill.id,new_skill.x=addedSkill.x||0,addedSkill.mult)if(addedSkill.base){var base=getStatBeforeRunes(new_card,addedSkill.base);new_skill.x+=Math.ceil(addedSkill.mult*base)}else new_skill.mult=addedSkill.mult;if(new_skill.z=addedSkill.z,new_skill.c=addedSkill.c,new_skill.s=addedSkill.s,new_skill.all=addedSkill.all,addedSkill.card&&(new_skill.card=addedSkill.card),addedSkill.level&&(new_skill.level=addedSkill.level),new_skill.boosted=!0,addedSkill.mult&&addedSkill.base&&0==new_skill.x)continue;original_skills.push(new_skill),new_card.highlighted.push(new_skill.id)}}else if("scale_attributes"!==skillModifier.modifierType||isToken){if("scale_stat"===skillModifier.modifierType&&!isToken)for(j=0;j<skillModifier.effects.length;j++){scaling=skillModifier.effects[j];new_card.isInFaction(scaling.y)&&new_card.isTargetRarity(scaling.rarity&&new_card.isTargetDelay(scaling.delay))&&(new_card[skillModifier.scaledStat]+=Math.ceil(getStatBeforeRunes(new_card,scaling.base)*scaling.mult),new_card.highlighted.push(skillModifier.scaledStat))}}else for(var j=0;j<skillModifier.effects.length;j++){var scaling=skillModifier.effects[j];if(new_card.isInFaction(scaling.y)&&new_card.isTargetRarity(scaling.rarity)&&new_card.isTargetDelay(scaling.delay)){var mult=scaling.mult,plusAttack=Math.ceil(new_card.attack*mult);new_card.attack+=plusAttack,new_card.highlighted.push("attack");var plusHealth=Math.ceil(new_card.health*mult);new_card.health+=plusHealth,new_card.highlighted.push("health"),scaleSkills(new_card,original_skills,mult)}}}}(card,original_skills,skillModifiers,isToken),skillMult&&scaleSkills(card,original_skills,skillMult),copySkills(card,original_skills),card}}(),getEnhancement=function(card,s,base){var enhancements=card.enhanced,e={x:0,mult:0},enhanced=enhancements&&enhancements[s]||e;return enhanced=Math.ceil(base*enhanced.mult)+enhanced.x},adjustAttackIncrease=function(card,originalIncrease){if(card.attackIncreasePrevention){var adjustment=Math.min(card.attackIncreasePrevention,originalIncrease);return card.attackIncreasePrevention-=adjustment,SIMULATOR.config.debug&&(echo+="<u>("+adjustment+" attack increase prevented by weaken, "+card.attackIncreasePrevention+" prevention remains)</u><br/>"),originalIncrease-adjustment}return originalIncrease},getSkillMult=function(skill,target,defaultBase){var mult=skill.mult;if(mult){var base=skill.base||defaultBase||"health";return Math.ceil(mult*target[base])}return 0},isImbued=function(card,skillID,i){var imbueSkillsKey;switch(SKILL_DATA[skillID].type){case"flurry":case"toggle":return card.imbued[skillID];case"passive":return card[skillID]===card.imbued[skillID];case"onDeath":imbueSkillsKey="onDeathSkills";break;case"earlyActivation":imbueSkillsKey="earlyActivationSkills";break;case"activation":default:imbueSkillsKey="skill"}return void 0!==card.imbued[imbueSkillsKey]&&i>=card.imbued[imbueSkillsKey]},addRunes=function(card,runes){card.runes||(card.runes=[]);for(var i=0,len=runes.length;i<len;i++){var runeID=runes[i].id,statBoost=getRune(runeID).stat_boost;for(var key in card.runes.push({id:runeID,stat_boost:statBoost}),statBoost){var boost=statBoost[key];"skill"==key||(isNaN(boost)&&(boost=Math.max(Math.ceil(card[key]*boost.mult),boost.min_bonus||1)),card[key]+=parseInt(boost))}}};function addRunesToSkills(skills,runes,runeMult){if(runes)for(var i=0,len=runes.length;i<len;i++){var runeID=runes[i].id,statBoost=getRune(runeID).stat_boost;for(var key in statBoost){var boost=statBoost[key];if("skill"==key)for(var skillID=boost.id,amount=boost.x,mult=boost.mult,s=0;s<skills.length;s++){var skill=skills[s];if(skill.id==skillID&&(skill.all||0)==(boost.all||0)){skill=copy_skill(skill),!amount&&mult&&(amount=Math.ceil(skill.x*mult)),boost.min_bonus&&(amount=Math.max(amount,boost.min_bonus)),amount&&(skill.x+=parseInt(amount)*runeMult),boost.c&&(skill.c-=Math.min(skill.c,parseInt(boost.c)*runeMult)),skill.boosted=!0,skills[s]=skill;break}}}}}var getRune=function(rune_id){return RUNES[rune_id]||{stat_boost:{}}},canUseRune=function(card,runeID){var rune=getRune(runeID),statBoost=rune.stat_boost;if(rune.faction_req&&!card.isInFaction(rune.faction_req))return!1;for(var key in statBoost)if("skill"==key){var skill=statBoost[key],all=skill.all?1:0;if(!card.hasSkill(skill.id,all))return!1}return!0};function MakeSkillModifier(name,effect){return{name:name,modifierType:effect.effect_type,effects:[effect]}}function MakeStatScalar(name,effect){return{name:name,modifierType:"scale_stat",scaledStat:effect.effect_type.replace("scale_",""),effects:[effect]}}var MakeOnPlayBGE=function(){function OnPlayBGE(name,effect){this.p=null,this.name=name,this.effect=effect,this.runes=[]}return OnPlayBGE.prototype={onCardPlayed:function(card){SIMULATOR.onPlaySkills[this.effect.id](this,card,this.effect)},isCommander:function(){return!1},isAssault:function(){return!1}},function(name,effects){return new OnPlayBGE(name,effects)}}(),MakeTrap=function(){function Trap(name,trap_card){this.name=name,this.id=trap_card.id,this.base=trap_card.base,this.mult=trap_card.mult,this.target_deck=trap_card.target_deck,this.y=trap_card.y}return Trap.prototype={onCardPlayed:function(card,p_deck,o_deck){var deck="opponent"===this.target_deck?o_deck:p_deck;if(card.isInFaction(this.y)){for(var targets=[],t=0;t<deck.length;t++){(card=deck[t]).trap||targets.push(card)}if(targets.length){var trapLevel=Math.ceil(card[this.base]*this.mult),trap=getCardByID(makeUnitInfo(this.id,trapLevel));targets[~~(Math.random()*targets.length)].trap=trap,SIMULATOR.config.debug&&(echo+=this.name+" inserts "+debug_name(trap)+" into the opposing deck.<br/>")}}}},function(name,effects){return new Trap(name,effects)}}(),getBattlegrounds=function(simConfig){var battlegrounds={onCreate:[],onTurn:[],onCardPlayed:[]};return addBgesFromList(battlegrounds,simConfig.getbattleground),addBgesFromList(battlegrounds,simConfig.selfbges,"player"),addBgesFromList(battlegrounds,simConfig.enemybges,"cpu"),addMapBGEs(battlegrounds,simConfig.mapbges,"player"),simConfig.campaignID?addMissionBGE(battlegrounds,simConfig.campaignID,simConfig.missionLevel):simConfig.raidID&&addRaidBGE(battlegrounds,simConfig.raidID,simConfig.raidLevel),battlegrounds};function addBgesFromList(battlegrounds,battlegroundsToAdd,player){if(!battlegroundsToAdd)return null;for(var selected=battlegroundsToAdd.split(","),i=0;i<selected.length;i++){var id=selected[i];addBgeFromList(battlegrounds,BATTLEGROUNDS[id],player)}}function addMissionBGE(battlegrounds,campaignID,missionLevel){var campaign=CAMPAIGNS[campaignID];if(campaign){var id=campaign.battleground_id;if(id){var battleground=BATTLEGROUNDS[id],effectiveLevel=Math.min(missionLevel,Number(battleground.max_level)||1/0);if(effectiveLevel=Number(effectiveLevel)-1,!battleground.starting_level||Number(battleground.starting_level)<=effectiveLevel){if(battleground.scale_with_level){battleground=JSON.parse(JSON.stringify(battleground));for(var levelsToScale=effectiveLevel-Number(battleground.starting_level),i=0;i<battleground.effect.length;i++){var effect=battleground.effect[i];effect.mult=effect.base_mult+effect.mult*levelsToScale}}addBgeFromList(battlegrounds,battleground,"cpu")}}}}function addRaidBGE(battlegrounds,raidID,raidLevel){var bge_id=RAIDS[raidID].bge;if(bge_id){var battleground=BATTLEGROUNDS[bge_id];if(battleground&&Number(raidLevel)>=Number(battleground.starting_level))for(var enemy_only=battleground.enemy_only,j=0;j<battleground.effect.length;j++){var effect=battleground.effect[j],effect_type=effect.effect_type;if("skill"===effect_type){if(battleground.scale_with_level)var mult=battleground.scale_with_level*(raidLevel-battleground.starting_level+1);else mult=1;(bge=MakeBattleground(battleground.name,effect,mult)).enemy_only=enemy_only,battlegrounds.onTurn.push(bge)}else if(0<=["evolve_skill","add_skill","scale_attributes","statChange","runeMultiplier"].indexOf(effect_Type)){(bge=MakeSkillModifier(battleground.name,effect)).enemy_only=enemy_only,battlegrounds.onCreate.push(bge)}else if(0<=["scale_attack","scale_health"].indexOf(effect_Type)){(bge=MakeStatScalar(battleground.name,effect)).enemy_only=enemy_only,battlegrounds.onCreate.push(bge)}else if("trap_card"===effect_type){var bge;(bge=MakeTrap(battleground.name,effect)).enemy_only=enemy_only,battlegrounds.onCardPlayed.push(bge)}}}}function addMapBGEs(battlegrounds,mapbges,player){if(!mapbges)return null;for(var selected=mapbges.split(","),i=0;i<selected.length;i++){var parts=selected[i].split("-"),location=parts[0],index=parts[1],value=parts[2],mapBGE=Object.keys(MAP_BATTLEGROUNDS).filter(function(id){return MAP_BATTLEGROUNDS[id].location_id==location})[0];addBgeFromList(battlegrounds,(mapBGE=MAP_BATTLEGROUNDS[mapBGE]).effects[index].upgrades[value],player)}}function addBgeFromList(battlegrounds,battleground,player){for(var j=0;j<battleground.effect.length;j++){var effect=battleground.effect[j],effect_type=effect.effect_type;if("skill"===effect_type){var bge=MakeBattleground(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onTurn.push(bge)}else if(0<=["evolve_skill","add_skill","scale_attributes","statChange","runeMultiplier"].indexOf(effect_type)){bge=MakeSkillModifier(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCreate.push(bge)}else if(0<=["scale_attack","scale_health"].indexOf(effect_type)){bge=MakeStatScalar(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCreate.push(bge)}else if("trap_card"===effect_type){bge=MakeTrap(battleground.name,effect);"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCardPlayed.push(bge)}else if("on_play"===effect_type){(bge=MakeOnPlayBGE(battleground.name,effect.effect)).attacker=effect.attacker,bge.defender=effect.defender,bge.first_play=effect.first_play,"player"===player&&(bge.ally_only=!0),"cpu"===player&&(bge.enemy_only=!0),battlegrounds.onCardPlayed.push(bge)}}}var MakeBattleground=function(){function Battleground(name,original_skills,mult){this.name=name,copySkills(this,[original_skills],mult)}return Battleground.prototype={p:null,name:null,runes:[],isCommander:function(){return!1},isAssault:function(){return!1},resetTimers:function(){for(var i=0,len=this.skillTimers.length;i<len;i++)this.skillTimers[i].countdown=0}},function(name,skill,mult){return new Battleground(name,skill,mult)}}();function copySkills(new_card,original_skills,mult){new_card.skill=[],new_card.earlyActivationSkills=[],new_card.onDeathSkills=[];var skillTimers=[],reusable=!0;for(var key in original_skills){var newSkill=original_skills[key],copySkill=copy_skill(newSkill);newSkill.c?(setSkill(new_card,copySkill),skillTimers.push(copySkill),reusable=!1):(mult&&(copySkill.x=Math.ceil(copySkill.x*mult)),setSkill(new_card,copySkill))}new_card.reusableSkills=reusable,new_card.skillTimers=skillTimers}function setSkill(new_card,skill){var skillID=skill.id;switch(SKILL_DATA[skillID].type){case"toggle":return void(new_card[skillID]=!0);case"passive":new_card[skill.id]=(0|new_card[skill.id])+skill.x;break;case"flurry":new_card[skill.id]=skill;break;case"onDeath":new_card.onDeathSkills.push(skill);break;case"earlyActivation":new_card.earlyActivationSkills.push(skill);break;case"activation":default:new_card.skill.push(skill)}}function copy_skill(original_skill){var new_skill={};return new_skill.id=original_skill.id,new_skill.x=original_skill.x||0,new_skill.mult=original_skill.mult,new_skill.on_delay_mult=original_skill.on_delay_mult,new_skill.all=original_skill.all,new_skill.y=original_skill.y,new_skill.z=original_skill.z,new_skill.c=original_skill.c,new_skill.s=original_skill.s,new_skill.ignore_nullify=original_skill.ignore_nullify,new_skill.card=original_skill.card,new_skill.level=original_skill.level,new_skill}function debug_name(card,hideStats){if("cpu"==card.owner)var tag="i";else tag="b";var output="<"+tag+">";if(output+=card.name,card.runes.length&&(output+="*"),1<card.maxLevel&&(output+="{"+card.level+"/"+card.maxLevel+"}"),void 0!==card.key&&(output+=" ("+card.key+")"),output+="</"+tag+">",!hideStats){if(output+="<u>",card.isCommander())output+=" [",void 0!==card.health_left?output+=card.health_left:output+=card.health,output+=" HP]";else if(card.isAssault()){output+=" [";var atk=card.adjustedAttack();!isNaN(atk)&&null!=atk||(atk=card.attack),output+=atk,output+="/",void 0!==card.health_left?output+=card.health_left:output+=card.health,output+="/",void 0!==card.timer?output+=card.timer:output+=card.cost,output+="]"}output+="</u>"}return output}function debug_find_skill(target,s){var skill;if(target[s])skill={id:s,x:target[s]};else for(var i in skill=target.skill.concat(target.earlyActivationSkills))if(skill[i].id==s){skill=copy_skill(skill[i]);break}return debug_skill(target,skill)}function debug_skill(target,skill){var output=convertName(skill.id);return skill.all&&(output+=" all"),skill.y&&(output+=" "+factions.names[skill.y]),skill.s&&(output+=" "+convertName(skill.s)),skill.c?output+=" every "+skill.c+" turns":skill.x&&(output+=" "+(skill.x+getEnhancement(target,skill.id,skill.x))),output}function convertName(skillID){var skillData=SKILL_DATA[skillID];return skillData?skillData.name:skillID}var base64chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!~",runeDelimiter="/",indexDelimiter="-",priorityDelimiter="|",noFusionInHash={};for(var id in CARDS){if(id<1e4)(!(fusion=FUSIONS[id])||Number(fusion)<1e4)&&(noFusionInHash[id]=!0)}var maxRuneID=1e3;function unitInfo_to_base64(unit_info){var baseID=parseInt(unit_info.id),level=parseInt(unit_info.level)-1;if(noFusionInHash[baseID]){var fusion=Math.floor(level/7);level=level%7}else{fusion=Math.floor(baseID/1e4);baseID%=1e4}var runeID=0;unit_info.runes.length&&(runeID=parseInt(unit_info.runes[0].id),runeID%=5e3);unit_info.priority;var dec=baseID;return decimal_to_base64(dec=(dec=7*(dec=3*dec+fusion)+level)*maxRuneID+runeID,5)}function base64_to_unitInfo(base64){var dec=base64_to_decimal(base64),runeID=dec%maxRuneID,level=(dec=(dec-runeID)/maxRuneID)%7,fusion=(dec=(dec-level++)/7)%3,unitID=dec=(dec-fusion)/3;noFusionInHash[unitID]?level+=7*fusion:0<fusion&&(unitID=Number(fusion+""+unitID));var unit_info=makeUnitInfo(unitID,level);return 0<runeID&&unit_info.runes.push({id:5e3+runeID}),unit_info}function decimal_to_base64(dec,len){for(var base64="",i=0;i<len;i++){var part=dec%64;base64+=base64chars[part],dec=(dec-part)/64}return base64}function base64_to_decimal(base64){for(var dec=0,i=base64.length-1;0<=i;i--){dec*=64,dec+=base64chars.indexOf(base64[i])}return dec}function runeID_to_decimal(runeID){if(0==runeID)return 0;var runeLevel=(runeID=parseInt(runeID)%5e3)%10,runeType=(runeID-runeLevel)/10;return runeID=runeID=5*runeType+runeLevel-1}function base64_to_runeID(base64){return decimal_to_runeID(base64chars.indexOf(base64[0])+64*base64chars.indexOf(base64[1]))}function decimal_to_runeID(decimal){var runeLevel=decimal%5,runeType=(decimal-runeLevel)/5;return 0==runeType?0:10*runeType+runeLevel+5001}function numberToBase64(decimal){return base64chars[Math.floor(decimal/64)]+base64chars[decimal%64]}function base64ToNumber(base64){return 64*base64chars.indexOf(base64[0])+base64chars.indexOf(base64[1])}function hash_encode(deck){var current_hash=[],has_priorities=!1,has_indexes=!1,indexes=[];for(var k in deck.commander&&current_hash.push(unitInfo_to_base64(deck.commander)),deck.deck){(current_card=deck.deck[k]).priority&&(has_priorities=!0),current_card.index&&(indexes.push(numberToBase64(current_card.index)),has_indexes=!0),current_hash.push(unitInfo_to_base64(current_card))}if(has_priorities){var priorities=priorityDelimiter;for(var k in deck.deck){var current_card;(current_card=deck.deck[k]).priority?priorities+=current_card.priority:priorities+="0"}current_hash.push(priorities)}return has_indexes&&(indexes=indexDelimiter+indexes.join(""),current_hash.push(indexes)),current_hash=current_hash.join("")}function areEqual(unitInfo1,unitInfo2){return!unitInfo1==!unitInfo2&&unitInfo_to_base64(unitInfo1)==unitInfo_to_base64(unitInfo2)}function hash_decode(hash){var unitInfo,indexes,current_deck={deck:[]};0<hash.indexOf(indexDelimiter)&&(indexes=hash.substr(hash.indexOf(indexDelimiter)+1).match(/.{1,2}/g),hash=hash.substr(0,hash.indexOf(indexDelimiter)));for(var unitidx=0,i=0;i<hash.length;i+=5){var unitHash=hash.substr(i,5);unitInfo=base64_to_unitInfo(unitHash),0<unitidx&&indexes&&(unitInfo.index=base64ToNumber(indexes[unitidx-1])),unitInfo&&(loadCard(unitInfo.id)?(!current_deck.commander&&is_commander(unitInfo.id)?current_deck.commander=unitInfo:current_deck.deck.push(unitInfo),unitidx++):console.log("Could not decode '"+unitHash+"' ("+unitInfo.id+")"))}return current_deck.commander||(current_deck.commander=elariaCaptain),current_deck}function createEmptyDeck(){return{deck:[],commander:elariaCaptain}}function load_deck_mission(id,level){var missionInfo=MISSIONS[id];return missionInfo?load_preset_deck(missionInfo,level,6):0}function load_deck_raid(id,level,maxedAt){var raidInfo=RAIDS[id];return raidInfo?load_preset_deck({commander:raidInfo.commander,deck:raidInfo.deck.card},level,Number(raidInfo.upgradeLevels)):0}var reverseFusions,DoNotFuse=["8005","8006","8007","8008","8009","8010"];function load_preset_deck(deckInfo,level,upgradeLevels){var maxedAt=upgradeLevels+1;level=level||maxedAt;var current_deck=[];current_deck.deck=[];var commanderInfo=getPresetCommander(deckInfo,level),commander=getPresetUnit(commanderInfo,level,maxedAt);commanderInfo.possibilities&&(commander.randomInfo={possibilities:commanderInfo.possibilities,level:level,maxedAt:maxedAt}),current_deck.commander=commander;var presetDeck=deckInfo.deck,deck=current_deck.deck;for(var current_key in presetDeck){var unit=getPresetUnit(presetDeck[current_key],level,maxedAt);unit&&deck.push(unit)}var upgradePoints=getUpgradePoints(level,maxedAt,getMaxUpgradePoints(deck));if(1<level&&level<maxedAt)for(var canFuse=deck.slice();0<upgradePoints&&0<canFuse.length;){var index=Math.floor(Math.random()*canFuse.length);upgradeCard(canFuse[index])?upgradePoints--:canFuse.splice(index,1)}return current_deck}function update_preset_deck(deck){if(randomizationInfo=deck.commander.randomInfo){var possibilities=randomizationInfo.possibilities;(unit=getPresetUnit(possibilities[~~(Math.random()*possibilities.length)],randomizationInfo.level,randomizationInfo.maxedAt)).randomInfo=randomizationInfo,deck.commander=unit}for(var cpu_cards=deck.deck,i=0,len=cpu_cards.length;i<len;i++){var unit,randomizationInfo;(randomizationInfo=(unit=cpu_cards[i]).randomInfo)&&((unit=getPresetUnit(randomizationInfo.unitInfo,randomizationInfo.level,randomizationInfo.maxedAt)).randomInfo=randomizationInfo,cpu_cards[i]=unit)}return getDeckCards(deck,"cpu")}function getPresetCommander(deckInfo,level){level=parseInt(level);var commander=deckInfo.commander;if(commander.card){for(var possibilities=[],i=0;i<commander.card.length;i++){var card=commander.card[i],minLevel=parseInt(card.min_mastery_level)||0,maxedAt=parseInt(card.max_mastery_level)||999;minLevel<=level&&level<=maxedAt&&possibilities.push(card)}(commander=possibilities[~~(Math.random()*possibilities.length)]).possibilities=possibilities}return commander}function getUpgradePoints(level,maxedAt,maxUpgradePoints){var percentCompvare;return percentCompvare=7==maxedAt?(level-1)/(maxedAt-1):level/maxedAt,Math.ceil(maxUpgradePoints*percentCompvare)}function getMaxUpgradePoints(deck){for(var maxUpgradePoints=0,i=0;i<deck.length;i++){var card=getCardByID(deck[i]);maxUpgradePoints+=(getMaxFusions(card)+1)*card.maxLevel-1}return maxUpgradePoints}function getMaxFusions(unit){for(var id=baseFusion(unit),fusion=-1;void 0!==id;)fusion++,id=FUSIONS[id];return fusion}function baseFusion(unit){for(var id,baseID=unit.id;void 0!==(baseID=REVERSE_FUSIONS[id=baseID]););return id}function getPresetUnit(unitInfo,level,maxedAt){if(level=parseInt(level),unitInfo.mastery_level&&level<parseInt(unitInfo.mastery_level))return null;if(unitInfo.remove_mastery_level&&level>=parseInt(unitInfo.remove_mastery_level))return null;var cardID=unitInfo.id,random=!1;cardID||(cardID=getRandomCard(unitInfo),random=!0);var unitLevel=unitInfo.level||1;if(maxedAt<=level)unitLevel=CARDS[cardID].maxLevel,canFuse(cardID)&&(cardID=fuseCard(cardID));else if(1<level&&is_commander(cardID)){var upgradesPerLevel=(CARDS[cardID].maxLevel-1)/(maxedAt-1),levelsFromBase=level-1;unitLevel=Math.ceil(upgradesPerLevel*levelsFromBase)}var unit=makeUnitInfo(cardID,unitLevel);return random&&(unit.randomInfo={unitInfo:unitInfo,level:level,maxedAt:maxedAt}),unit}function getRandomCard(unitInfo){var possibilities=[];for(var id in CARDS)if(!REVERSE_FUSIONS[id]){var card=CARDS[id];if("1"!=card.card_type&&!(unitInfo.max_rarity&&Number(unitInfo.max_rarity)<Number(card.rarity)||unitInfo.min_rarity&&Number(unitInfo.min_rarity)>Number(card.rarity))&&(!unitInfo.type||unitInfo.type==card.type||0<=card.sub_type.indexOf(unitInfo.type.toString()))){if(unitInfo.set)if(unitInfo.set.split(",").indexOf(card.set)<0)continue;possibilities.push(id)}}return possibilities[~~(Math.random()*possibilities.length)]}function upgradeCard(unitInfo){var maxLevel=CARDS[unitInfo.id].maxLevel;if(unitInfo.level===maxLevel){if(!canFuse(unitInfo.id))return!1;unitInfo.id=fuseCard(unitInfo.id,1),unitInfo.level=1}else unitInfo.level++;return!0}function canFuse(cardID){return!(-1<DoNotFuse.indexOf(cardID))&&(!is_commander(cardID)&&!!FUSIONS[cardID])}function fuseCard(cardID,fusion){if(-1==DoNotFuse.indexOf(cardID))if(fusion)for(var i=0;i<fusion;i++)cardID=doFuseCard(cardID);else for(;;){var fused=doFuseCard(cardID);if(cardID===fused)break;cardID=fused}return cardID}function doFuseCard(cardID){var fused=FUSIONS[cardID];return fused||cardID}function getFusion(cardID){var fusion=0;for(reverseFusions||getReverseFusions();fusion++,reverseFusions[cardID];);return fusion}function getReverseFusions(){for(var key in reverseFusions={},FUSIONS)reverseFusions[FUSIONS[key]]=key}var get_card_apply_battlegrounds=function(id,battlegrounds,isToken){return getCardByID(id,battlegrounds=battlegrounds||SIMULATOR.battlegrounds.onCreate,null,isToken)};function get_skills(id,level){var upgrade,card=loadCard(id),skills=card.skill;if(1<level)for(var key in card.upgrades)if(0<(upgrade=card.upgrades[key]).skill.length&&(skills=upgrade.skill),key==level)break;return skills}function getCardByID(unit,skillModifiers,skillMult,isToken){var current_card=loadCard(unit.id);if(current_card){current_card.skill||(current_card.skill=[]);var card=makeUnit(current_card,unit.level,unit.runes,skillModifiers,skillMult,isToken);return unit.priority&&(card.priority=unit.priority),card}return console.log(unit.id+" not found"),(current_card={}).id=unit.id,current_card.level=unit.level,current_card.name=void 0,current_card.health=void 0,current_card.skill=[],current_card}function get_slim_card_by_id(unit,getDetails){var current_card=loadCard(unit.id),new_card={};if("1"==current_card.card_type?(new_card.isCommander=function(){return!0},new_card.isAssault=function(){return!1}):(new_card.isCommander=function(){return!1},new_card.isAssault=function(){return!0}),current_card){if(new_card.id=current_card.id,new_card.name=current_card.name,new_card.rarity=current_card.rarity,new_card.maxLevel=current_card.maxLevel,unit.level?(new_card.level=unit.level,new_card.level>new_card.maxLevel&&(new_card.level=new_card.maxLevel)):new_card.level=1,getDetails){if(new_card.attack=current_card.attack,new_card.health=current_card.health,new_card.cost=current_card.cost,new_card.set=current_card.set,new_card.card_type=current_card.card_type,new_card.type=current_card.type,new_card.sub_type=current_card.sub_type||[],new_card.skill=current_card.skill,1<new_card.level)for(var key in current_card.upgrades){var upgrade=current_card.upgrades[key];if(void 0!==upgrade.cost&&(new_card.cost=upgrade.cost),void 0!==upgrade.health&&(new_card.health=upgrade.health),void 0!==upgrade.attack&&(new_card.attack=upgrade.attack),void 0!==upgrade.desc&&(new_card.desc=upgrade.desc),0<upgrade.skill.length&&(new_card.skill=upgrade.skill),key==new_card.level)break}var runes=unit.runes;runes&&(new_card.skill=new_card.skill.slice(),addRunes(new_card,runes),addRunesToSkills(new_card.skill,runes))}}else new_card.id=void 0,new_card.name=void 0,new_card.card_type=void 0,new_card.set=void 0,new_card.type=void 0,new_card.sub_type=[],new_card.level=void 0,new_card.maxLevel=void 0,getSkills&&(new_card.skill=[]);return new_card}function loadCard(id){return CARDS[id]}function getCardInfo(unit){var id=unit.id,level=unit.level,original=CARDS[id],card=Object.assign({},original);if(1<level&&1<level)for(var key in original.upgrades){var upgrade=original.upgrades[key];if(void 0!==upgrade.cost&&(card.cost=upgrade.cost),void 0!==upgrade.health&&(card.health=upgrade.health),void 0!==upgrade.attack&&(card.attack=upgrade.attack),void 0!==upgrade.desc&&(card.desc=upgrade.desc),0<upgrade.skill.length&&(card.skill=upgrade.skill),key==level)break}return card.level=level,card.maxLevel=original.maxLevel,card}function get_card_name_by_id(id){var card=loadCard(id);return card?card.name:0}function is_commander(id){var card=loadCard(id);return card&&"1"==card.card_type}function is_assault(id){var card=loadCard(id);return card&&"2"==card.card_type}function is_trap(id){var card=loadCard(id);return card&&"3"==card.card_type}var makeUnitKey=function(unit){var unitKey=unit.id+"_"+unit.level;return unit.runes&&unit.runes.length&&(unitKey+="_"+unit.runes[0].id),unitKey};function makeUnitInfo(id,level,runes){var unit={id:Number(id),level:Number(level),runes:[]};return runes&&(unit.runes=runes),unit}var elariaCaptain=makeUnitInfo(202,1);function getRarity(rarity){return rarityStrings[rarity]}function getCurrentPage(){var currentPage=window.location.href,pageEnd=currentPage.indexOf(".html"),pageStart=(currentPage=currentPage.substring(0,pageEnd)).lastIndexOf("/")+1;return currentPage=currentPage.substring(pageStart).toLowerCase()}var rarityStrings=["","Common","Rare","Epic","Legendary","Mythic"],factions={names:{0:"Factionless",1:"Aether",2:"Chaos",3:"Wyld",4:"Frog",5:"Elemental",6:"Angel",7:"Undead",8:"Void",9:"Dragon",10:"Avian",11:"Goblin",12:"Seafolk",13:"Insect",14:"Bear",15:"Token",16:"Mecha",17:"Knight",999:"Tower"},IDs:{Factionless:0,Aether:1,Chaos:2,Wyld:3,Frog:4,Elemental:5,Angel:6,Undead:7,Void:8,Dragon:9,Avian:10,Goblin:11,Seafolk:12,Insect:13,Bear:14,Token:15,Mecha:16,Knight:17,Tower:999}},SIM_CONTROLLER={getConfiguration:function(){var debug=$("#debug").is(":checked"),logPlaysOnly=debug&&$("#play_debug").is(":checked");logPlaysOnly&&(debug=!1);var showAnimations=$("#animations").is(":checked");if($("#auto_mode").length){var auto_mode=$("#auto_mode").is(":checked");SIMULATOR.userControlled=!auto_mode}var tournament=$("#tournament").is(":checked"),missionID=$("#mission").val(),simsToRun=$("#sims").val()||1;return{enemybges:BATTLEGROUNDS?getSelectedBattlegrounds("enemy-"):"",getbattleground:BATTLEGROUNDS?getSelectedBattlegrounds():"",selfbges:BATTLEGROUNDS?getSelectedBattlegrounds("self-"):"",mapbges:BATTLEGROUNDS&&missionID?getSelectedMapBattlegrounds():"",playerDeck:$("#deck1").val(),playerOrdered:$("#ordered").is(":checked"),playerExactOrdered:$("#ordered2").is(":checked"),cpuDeck:$("#deck2").val(),cpuOrdered:$("#ordered2").is(":checked"),cpuExactOrdered:$("#exactorder2").is(":checked"),surge:$("#surge").is(":checked"),siegeMode:$("#siege").is(":checked"),towerType:$("#tower_type").val(),towerLevel:$("#tower_level").val(),campaignID:$("#campaign").val(),missionID:missionID,missionLevel:$("#mission_level").val(),raidID:$("#raid").val(),raidLevel:$("#raid_level").val(),showAnimations:showAnimations,simsToRun:simsToRun,tournament:tournament,debug:debug,logPlaysOnly:logPlaysOnly,massDebug:$("#mass_debug").is(":checked"),findFirstWin:$("#win_debug").is(":checked"),findFirstLoss:$("#loss_debug").is(":checked")}},debug_end:function(result){var msg;result=SIM_CONTROLLER.processSimResult(),SIMULATOR.simsLeft=0,matchTimer.stop();var points="";SIMULATOR.config.cpuDeck&&(points=" ("+SIMULATOR.calculatePoints()+" points)"),msg="draw"==result?"<br><h1>DRAW"+points+"</h1><br>":result?"<br><h1>WIN"+points+"</h1><br>":"<br><h1>LOSS"+points+"</h1><br>",echo&&outputTurns(echo,!0),setSimStatus(msg),showUI(),SIM_CONTROLLER.end_sims_callback&&SIM_CONTROLLER.end_sims_callback()},end_sims_callback:null,stop_sims_callback:null};!function(){function run_sims(){var simConfig=SIMULATOR.config;if(SIMULATOR.userControlled)run_sim(!0)&&SIM_CONTROLLER.debug_end();else if(!SIMULATOR.config.debug&&!simConfig.logPlaysOnly||simConfig.massDebug||simConfig.findFirstLoss||simConfig.findFirstWin)if(0<SIMULATOR.simsLeft){if(run_sims_batch<=run_sims_count){var simpersecbatch=0;if(0<run_sims_batch){run_sims_count=0;var temp=SIMULATOR.games/(SIMULATOR.games+SIMULATOR.simsLeft)*100;temp=temp.toFixed(2);var elapse=matchTimer.elapsed(),batch_elapse=matchTimer.batchElapsed();setSimStatus("Running simulations...",elapse,(simpersecbatch=0==batch_elapse?0:run_sims_batch/batch_elapse).toFixed(1)),showWinrate()}(run_sims_batch=1)<simpersecbatch&&(run_sims_batch=Math.ceil(simpersecbatch/8)),run_sims_batch>SIMULATOR.simsLeft&&(run_sims_batch=SIMULATOR.simsLeft),matchTimer.startBatch(),SIMULATOR.current_timeout=setTimeout(run_sims,1);for(var i=0;i<run_sims_batch;i++)run_sim()}}else{run_sims_batch=run_sims_count=0,matchTimer.stop();elapse=matchTimer.elapsed();var simpersec=SIMULATOR.games/elapse;simpersec=simpersec.toFixed(2),echo&&outp(echo),setSimStatus("Simulations complete.",elapse,simpersec),showWinrate(),showUI(),SIM_CONTROLLER.end_sims_callback&&SIM_CONTROLLER.end_sims_callback()}else run_sim(!0),SIM_CONTROLLER.debug_end()}SIM_CONTROLLER.startsim=function(){SIMULATOR.total_turns=0,matchTimer.reset(),echo="",SIMULATOR.games=0,run_sims_batch=0;var simConfig=SIM_CONTROLLER.getConfiguration();return SIMULATOR.simsLeft=simConfig.simsToRun,SIMULATOR.config=simConfig,SIMULATOR.battlegrounds=getBattlegrounds(simConfig),hideUI(),SIMULATOR.setupDecks(),SIMULATOR.wins=0,SIMULATOR.losses=0,SIMULATOR.draws=0,SIMULATOR.points=0,outp(""),SIMULATOR.userControlled?setSimStatus(""):(hideTable(),setSimStatus("Initializing simulations...")),SIMULATOR.current_timeout=setTimeout(run_sims),!1},SIM_CONTROLLER.stopsim=function(){matchTimer.stop();var elapse=matchTimer.elapsed(),simpersec=SIMULATOR.games/elapse;simpersec=simpersec.toFixed(2),SIMULATOR.simulating=!1,SIMULATOR.current_timeout&&clearTimeout(SIMULATOR.current_timeout),SIMULATOR.userControlled||(setSimStatus("Simulations interrupted.",elapse,simpersec),showWinrate()),showUI(),SIM_CONTROLLER.stop_sims_callback&&SIM_CONTROLLER.stop_sims_callback()};var seedtest=_GET("seedtest")||0;function run_sim(skipResults){if(seedtest&&Math.seedrandom(seedtest++),!SIMULATOR.simulate())return!1;skipResults||SIM_CONTROLLER.processSimResult()}SIM_CONTROLLER.processSimResult=function(){var result,simConfig=SIMULATOR.config;result=!!SIMULATOR.field.player.commander.isAlive()&&(!SIMULATOR.field.cpu.commander.isAlive()||"draw"),0<run_sims_batch&&(0<SIMULATOR.simsLeft&&SIMULATOR.simsLeft--,run_sims_count++),"draw"==result?SIMULATOR.draws++:result?SIMULATOR.wins++:SIMULATOR.losses++,SIMULATOR.points+=SIMULATOR.calculatePoints(),SIMULATOR.games++,SIMULATOR.total_turns+=SIMULATOR.simulation_turns;var games=SIMULATOR.games;return(SIMULATOR.config.debug||simConfig.logPlaysOnly)&&(simConfig.findFirstLoss?"draw"==result?(echo="Draw found after "+games+" games. Displaying debug output... <br><br>"+echo,echo+="<br><h1>DRAW</h1><br>",SIMULATOR.simsLeft=0):result?SIMULATOR.simsLeft?echo="":(echo="No losses found after "+games+" games. No debug output to display.<br><br>",SIMULATOR.simsLeft=0):(echo="Loss found after "+games+" games. Displaying debug output... <br><br>"+echo,echo+="<br><h1>LOSS</h1><br>",SIMULATOR.simsLeft=0):simConfig.findFirstWin?result&&"draw"!=result?(echo="Win found after "+games+" games. Displaying debug output... <br><br>"+echo,echo+="<br><h1>WIN</h1><br>",SIMULATOR.simsLeft=0):SIMULATOR.simsLeft?echo="":(echo="No wins found after "+games+" games. No debug output to display.<br><br>",SIMULATOR.simsLeft=0):simConfig.massDebug&&(echo+="draw"==result?"<br><h1>DRAW</h1><br>":result?"<br><h1>WIN</h1><br>":"<br><h1>LOSS</h1><br>"),simConfig.massDebug&&SIMULATOR.simsLeft&&(echo+="<br><hr>NEW BATTLE BEGINS<hr><br>")),result};var run_sims_count=0,run_sims_batch=0}();var SIMULATOR={};!function(){"use strict";function play_card(card,p,turn,quiet){var field_p_assaults=field[p].assaults;if(!card.id)return 0;var newKey=field_p_assaults.length;if(initializeCard(card,p,newKey),card.played=!0,card.isAssault()&&(field_p_assaults[newKey]=card),!simConfig.debug&&!simConfig.logPlaysOnly||quiet||(echo+=debug_name(field[p].commander)+" plays "+debug_name(card)+"<br>"),card.isTrap())doEarlyActivationSkills(card),activation_skills(card);else for(var i=0;i<battlegrounds.onCardPlayed.length;i++){var battleground=battlegrounds.onCardPlayed[i],o="player"===p?"cpu":"player";if(battleground.defender){if(!simConfig.surge&&"cpu"!=p)continue;if(simConfig.surge&&"player"!=p)continue;battleground.owner=o}else if(battleground.attacker){if(!simConfig.surge&&"player"!=p)continue;if(simConfig.surge&&"cpu"!=p)continue;battleground.owner=p}else{if(battleground.enemy_only&&"cpu"!=p)continue;if(battleground.ally_only&&"player"!=p)continue;battleground.owner=p}1<turn&&battleground.first_play||battleground.onCardPlayed(card,deck[p].deck,deck[o].deck)}simConfig.showAnimations&&drawField(field,null,null,turn)}function remove_dead_cards(p){for(var units=field[p].assaults,key=0,len=units.length;key<len;key++){var current_assault=units[key];if(!current_assault.isAlive()){simConfig.debug&&(echo+=debug_name(current_assault)+" <strong>is removed from field</strong><br>");var newkey=key;for(key++;key<len;key++)(current_assault=units[key]).isAlive()?(units[current_assault.key=newkey]=current_assault,newkey++):simConfig.debug&&(echo+=debug_name(current_assault)+" <strong>is removed from field</strong><br>");units.length=newkey;break}}}function choose_random_target(targets){return[targets[~~(Math.random()*targets.length)]]}function getAlliedUnits(card,field){return field[card.owner].assaults}function getEnemyUnits(card,field){return"cpu"===card.owner?field.player.assaults:"player"===card.owner?field.cpu.assaults:void 0}function do_damage(source,target,damage,shatter,logFn){damage>=target.health_left?target.health_left=0:target.health_left-=damage,simConfig.debug&&logFn(source,target,damage),shatter&&iceshatter(target),!target.isAlive()&&source&&doOnDeathSkills(target,source)}function iceshatter(src_card){var amount=src_card.barrier_ice,o=function(card){return"cpu"===card.owner?"player":"player"===card.owner?"cpu":void 0}(src_card),field_o=field[o],target=field_o.assaults[src_card.key];target&&target.isAlive()||(target=field_o.commander),do_damage(src_card,target,amount,null,function(source,target,amount){echo+=debug_name(source)+"'s barrier shatters and hits "+debug_name(target)+" for "+amount+" damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"})}function getActivatedSkill(skillMap,skillId){return skillMap[skillId]||notImplemented}function notImplemented(src_card,skill){if(simConfig.debug){var skillName=SKILL_DATA[skill.id]?SKILL_DATA[skill.id].name:skill.id;echo+=debug_name(src_card)+" attempts to use "+skillName+" ("+skill.id+"), but it is not implemented.<br>"}return 0}function doEarlyActivationSkills(source_card){var skills=source_card.earlyActivationSkills,len=skills.length;if(0!==len)if(source_card.silenced)simConfig.debug&&(echo+=debug_name(source_card)+" is silenced and cannot use skills</br>");else{var dualstrike=source_card.dualstrike_triggered;simConfig.debug&&dualstrike&&(echo+=debug_name(source_card)+" activates dualstrike<br>");for(var activations=dualstrike?2:1,isAlive=makeLivenessCheck(source_card),a=0;a<activations;a++)for(var i=0;i<len&&isAlive();i++){var skill=skills[i];if(!skill.countdown){var affected=getActivatedSkill(earlyActivationSkills,skill.id)(source_card,skill);skill.c&&0<affected&&(skill.countdown=skill.c),simConfig.showAnimations&&drawField(field,null,null,turn,source_card)}}}}function alwaysTrue(){return!0}function makeLivenessCheck(maybeUnit){return maybeUnit.isAlive?maybeUnit.isAlive.bind(maybeUnit):alwaysTrue}function doOnDeathSkills(dying,killer){if(!dying.ondeath_triggered){if(!dying.silenced){var skills=dying.onDeathSkills,len=skills.length;if(0===len)return;if(1<len&&!dying.reanimated)for(var i=0;i<len;i++){if("reanimate"===(skill=skills[i]).id)return onDeathSkills[skill.id](dying,killer,skill),void(simConfig.showAnimations&&drawField(field,null,null,turn,dying))}for(i=0;i<len;i++){var skill=skills[i];onDeathSkills[skill.id](dying,killer,skill),simConfig.showAnimations&&drawField(field,null,null,turn,dying)}}dying.ondeath_triggered=!0}}var passiveSkills=["backlash","counter","counterburn","counterpoison","armored","evade","stasis"];function requiresActiveTurn(skillName){return-1===passiveSkills.indexOf(skillName)}function backlash(attacker,defender){if(attacker.isAssault()&&defender.isAlive()){var baseDamage=defender.backlash;doCounterDamage(attacker,defender,"Backlash",baseDamage,getEnhancement(defender,"backlash",baseDamage),!0)}}function checkShroud(unit){if(unit.isActive()&&unit.isUnjammed())return 0;if(unit.silenced)return 0;var shroud=0;return unit.stasis&&(shroud+=unit.stasis+getEnhancement(unit,"stasis",unit.stasis)),unit.fury&&(shroud+=Math.ceil(unit.fury/2)),shroud}var activationSkills={burnself:function(src_card,skill){var scorch=skill.x;return src_card.scorched?(src_card.scorched.amount+=scorch,src_card.scorched.timer=2):src_card.scorched={amount:scorch,timer:2},simConfig.debug&&(echo+=debug_name(src_card)+" inflicts scorch("+scorch+") on itself<br>"),1},scorchbreath:function(src_card,skill){return activationSkills.burn(src_card,skill)},burn:function(src_card,skill){var targets,enemyUnits=getEnemyUnits(src_card,field);switch(skill.id){case"scorchbreath":var startKey=Math.max(0,src_card.key-1),endKey=Math.min(enemyUnits.length,src_card.key+2);targets=enemyUnits.slice(startKey,endKey);break;case"burnself":targets=[src_card];break;default:targets=enemyUnits.slice(src_card.key,src_card.key+1)}if(!targets.length)return 0;var scorch=skill.x;scorch+=getEnhancement(src_card,"burn",scorch);for(var i=0;i<targets.length;i++){var target=targets[i];target.scorched?(target.scorched.amount+=scorch,target.scorched.timer=2):target.scorched={amount:scorch,timer:2},simConfig.debug&&(echo+=debug_name(src_card)+" inflicts scorch("+scorch+") on "+debug_name(target)+"<br>")}return!0},confuse:function(src_card,skill){for(var all=skill.all,enemyUnits=getEnemyUnits(src_card,field),targets=[],key=0,len=enemyUnits.length;key<len;key++){(target=enemyUnits[key]).isAlive()&&(all||target.isActiveNextTurn()&&!target.confused&&target.isUnjammed())&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var affected=0;for(key=0,len=targets.length;key<len;key++){var target;(target=enemyUnits[targets[key]]).invisible?(target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" confuses "+debug_name(target)+" but it is invisible!<br>"),target.backlash&&backlash(src_card,target)):(affected++,target.confused=!0,simConfig.debug&&(echo+=debug_name(src_card)+" confuses "+debug_name(target)+"<br>"),target.backlash&&backlash(src_card,target))}return affected},protect_ice:function(src_card,skill){return activationSkills.protect(src_card,skill,"barrier_ice")},protect_seafolk:function(src_card,skill){return activationSkills.protect(src_card,skill,null,null,!0)},evadebarrier:function(src_card,skill){return activationSkills.protect(src_card,skill,"invisible",function(target,amount){return" and imbues it with invisible "+amount})},protect:function(src_card,skill,additional,additionalDebug,onlyOnDelay){for(var faction=skill.y,rarity=skill.z,alliedUnits=getAlliedUnits(src_card,field),targets=[],key=0,len=alliedUnits.length;key<len;key++){!((target=alliedUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity))||onlyOnDelay&&target.isActive()||targets.push(key)}if(!targets.length)return 0;skill.all||(targets=choose_random_target(targets));var protect=skill.x||0,enhanced=getEnhancement(src_card,skill.id,protect);protect+=enhanced;var affected=0;for(key=0,len=targets.length;key<len;key++){var target;if(!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify){affected++;var protect_amt=protect,mult=skill.mult;mult&&(target.isActive()||(mult+=skill.on_delay_mult||0),protect_amt+=Math.ceil(target.base_health*mult)),target.protected+=protect_amt,additional&&(target[additional]=(target[additional]||0)+protect_amt),simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" barriers "+debug_name(target)+" by "+protect_amt,"function"==typeof additionalDebug&&(echo+=additionalDebug(target,protect_amt)),echo+="<br>")}else target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" protects "+debug_name(target)+" but it is nullified!<br>")}return affected},magicfield:function(src_card,skill){var alliedUnits=getAlliedUnits(src_card,field),protect=skill.x||0,enhanced=getEnhancement(src_card,skill.id,protect);protect+=enhanced;for(var affected=0,left_ally=src_card.key-1,right_ally=src_card.key+1,key=left_ally;key<=right_ally;key++){var target=alliedUnits[key];if(target&&!target.isAlive())if(!target.nullified||skill.ignore_nullify){affected++;var protect_amt=protect;target!=src_card&&(protect_amt=Math.ceil(protect_amt/2)),target.protected+=protect_amt,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" activates anti-magic field, protecting "+debug_name(target)+" by "+protect_amt,echo+="<br>")}else target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" activates anti-magic field, protecting "+debug_name(target)+" but it is nullified!<br>")}return affected},wingward:function(src_card,skill){for(var alliedUnits=getAlliedUnits(src_card,field),targets=[],key=0;key<alliedUnits.length;key++){if((target=alliedUnits[key]).isAlive()&&target!=src_card){targets.push(key);break}}targets.push(src_card.key);var wingward=skill.x,enhanced=getEnhancement(src_card,skill.id,wingward);wingward+=enhanced;for(var affected=0,len=(key=0,targets.length);key<len;key++){var target;if(!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify){affected++,target.protected+=wingward;var invisBoost=Math.ceil(wingward/2);target.invisible+=invisBoost,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" wing guards "+debug_name(target)+", protecting it by "+wingward+" and imbuing it with invisible "+invisBoost,echo+="<br>")}else target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" wing guards "+debug_name(target)+" but it is nullified!<br>")}return affected},invigorate:function(src_card,skill){activationSkills.heal(src_card,skill,!0)},heal:function(src_card,skill,invigorate){for(var faction=skill.y,rarity=skill.z,all=skill.all,alliedUnits=getAlliedUnits(src_card,field),targets=[],key=0,len=alliedUnits.length;key<len;key++){(target=alliedUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(all||target.isDamaged()||invigorate&&!target.invigorated)&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var heal=skill.x,enhanced=getEnhancement(src_card,skill.id,heal);heal+=enhanced;var affected=0;for(key=0,len=targets.length;key<len;key++){var target;if(!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify){affected++;var heal_amt=heal+getSkillMult(skill,target),additionalMaxHealth=0;invigorate&&(target.invigorated||(target.invigorated=0),additionalMaxHealth=Math.max(0,heal_amt-target.invigorated),target.health+=additionalMaxHealth,target.invigorated+=additionalMaxHealth);var missingHealth=target.health-target.health_left;missingHealth<heal_amt&&(heal_amt=missingHealth),target.health_left+=heal_amt,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" heals "+debug_name(target)+" by "+heal_amt,additionalMaxHealth&&(echo+=" and increases its max health by "+additionalMaxHealth),echo+="<br>")}else target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" "+skill.id+"s "+debug_name(target)+" but it is nullified!<br>")}return affected},poisonstrike:function(src_card,skill,poison){return activationSkills.strike(src_card,skill,!0)},strike:function(src_card,skill,poison){for(var faction=skill.y,rarity=skill.z,all=skill.all,enemyUnits=getEnemyUnits(src_card,field),targets=[],key=0,len=enemyUnits.length;key<len;key++){(target=enemyUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var strike=skill.x,enhanced=getEnhancement(src_card,skill.id,strike);strike+=enhanced;for(key=0,len=targets.length;key<len;key++){var target;if((target=enemyUnits[targets[key]]).invisible)target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" bolts "+debug_name(target)+" but it is invisible!<br>"),target.backlash&&backlash(src_card,target);else{0;var strike_damage=strike,damageInfo=modifySkillDamage(target,strike_damage);strike_damage=damageInfo.damage;var shatter=damageInfo.shatter,poisonDamage=0;0<strike_damage&&poison&&target.isAlive()&&strike>target.poisoned&&(poisonDamage=strike,target.poisoned=poisonDamage),do_damage(src_card,target,strike_damage,shatter,function(source,target,amount){echo+="<u>(Strike: +"+skill.x,enhanced&&(echo+=" Enhance: +"+enhanced),echo+=damageInfo.echo,echo+=") = "+amount+" damage</u><br>",echo+=debug_name(source)+" bolts "+debug_name(target)+" for "+amount+" damage",target.isAlive()?poisonDamage&&(echo+=" and inflicts poison("+poisonDamage+") on it"):echo+=" and it dies",echo+="<br>"}),target.backlash&&backlash(src_card,target)}}return!0},intensify:function(src_card,skill,poison){for(var faction=skill.y,rarity=skill.z,all=skill.all,enemyUnits=getEnemyUnits(src_card,field),targets=[],key=0,len=enemyUnits.length;key<len;key++){(target=enemyUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(target.scorched||target.poisoned)&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var intensify=skill.x;intensify+=getEnhancement(src_card,skill.id,intensify);var affected=0;for(key=0,len=targets.length;key<len;key++){var target,intensifiedFields=(target=enemyUnits[targets[key]]).scorched?"scorch":"";intensifiedFields+=target.poisoned?intensifiedFields?" and poison":"poison":"",target.invisible?(target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" intensifies "+intensifiedFields+" on "+debug_name(target)+" but it is invisible!<br>"),target.backlash&&backlash(src_card,target)):(affected++,target.scorched&&(target.scorched.amount+=intensify),target.poisoned&&(target.poisoned+=intensify),simConfig.debug&&(echo+=debug_name(src_card)+" intensifies "+intensifiedFields+" on "+debug_name(target)+" by "+intensify+"<br>"),target.backlash&&backlash(src_card,target))}return affected},ignite:function(src_card,skill,poison){for(var faction=skill.y,rarity=skill.z,all=skill.all,enemyUnits=getEnemyUnits(src_card,field),targets=[],key=0,len=enemyUnits.length;key<len;key++){(target=enemyUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var ignite=skill.x;ignite+=getEnhancement(src_card,skill.id,ignite);var affected=0;for(key=0,len=targets.length;key<len;key++){var target;(target=enemyUnits[targets[key]]).invisible?(target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" ignites "+debug_name(target)+" but it is invisible!<br>"),target.backlash&&backlash(src_card,target)):(affected++,target.scorch(ignite),simConfig.debug&&(echo+=debug_name(src_card)+" ignites("+ignite+") "+debug_name(target)+"<br>"),target.backlash&&backlash(src_card,target))}return affected},jamself:function(src_card,skill){return src_card.jammed=!0,src_card.jammedSelf=!0,simConfig.debug&&(echo+=debug_name(src_card)+" freezes itself<br>"),1},jam:function(src_card,skill){for(var all=skill.all,enemyUnits=getEnemyUnits(src_card,field),targets=[],key=0,len=enemyUnits.length;key<len;key++){(target=enemyUnits[key]).isAlive()&&(all||target.isActiveNextTurn()&&target.isUnjammed())&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var affected=0;for(key=0,len=targets.length;key<len;key++){var target;(target=enemyUnits[targets[key]]).invisible?(target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" freezes "+debug_name(target)+" but it is invisible!<br>"),target.backlash&&backlash(src_card,target)):(affected++,target.jammed=!0,simConfig.debug&&(echo+=debug_name(src_card)+" freezes "+debug_name(target)+"<br>"),target.backlash&&backlash(src_card,target))}return affected},frost:function(src_card,skill){for(var enemyUnits=getEnemyUnits(src_card,field),targets=[],i=src_card.key-1,end=i+2;i<=end;i++){(target=enemyUnits[i])&&target.isAlive()&&targets.push(i)}if(!targets.length)return 0;var frost=skill.x,enhanced=getEnhancement(src_card,skill.id,frost);frost+=enhanced;for(var affected=0,key=0,len=targets.length;key<len;key++){var target;if((target=enemyUnits[targets[key]]).invisible)target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" breathes frost at "+debug_name(target)+" but it is invisible!<br>"),target.backlash&&backlash(src_card,target);else{affected++;var frost_damage=frost,damageInfo=modifySkillDamage(target,frost_damage);do_damage(src_card,target,frost_damage=damageInfo.damage,damageInfo.shatter,function(source,target,amount){echo+="<u>(Frostbreath: +"+skill.x,enhanced&&(echo+=" Enhance: +"+enhanced),echo+=damageInfo.echo,echo+=") = "+amount+" damage</u><br>",echo+=debug_name(source)+" breathes frost at "+debug_name(target)+" for "+amount+" damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"}),target.backlash&&backlash(src_card,target)}}return affected},heartseeker:function(src_card,skill){var heartseeker=skill.x,target=getEnemyUnits(src_card,field)[src_card.key];return target?(heartseeker+=getEnhancement(src_card,skill.id,heartseeker),target.heartseeker+=heartseeker,simConfig.debug&&(echo+=debug_name(src_card)+" inflicts heartseeker "+heartseeker+" on "+debug_name(target)+"<br>"),1):0},enfeeblebge:function(src_card,skill){return activationSkills.enfeeble(src_card,skill,!0)},enfeeble:function(src_card,skill){for(var faction=skill.y,rarity=skill.z,all=skill.all,enemyUnits=getEnemyUnits(src_card,field),targets=[],key=0,len=enemyUnits.length;key<len;key++){(target=enemyUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var enfeeble=skill.x;enfeeble+=getEnhancement(src_card,skill.id,enfeeble);var affected=0;for(key=0,len=targets.length;key<len;key++){var target;(target=enemyUnits[targets[key]]).invisible?(target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" hexes "+debug_name(target)+" but it is invisible!<br>"),target.backlash&&backlash(src_card,target)):(affected++,target.enfeebled+=enfeeble,simConfig.debug&&(echo+=debug_name(src_card)+" hexes "+debug_name(target)+" by "+enfeeble+"<br>"),target.backlash&&backlash(src_card,target))}return affected},weakenself:function(src_card,skill){return activationSkills.weaken(src_card,skill)},weakenbge:function(src_card,skill){return activationSkills.weaken(src_card,skill)},weaken:function(src_card,skill){var potentialTargets,faction=skill.y,rarity=skill.z;switch(skill.id){case"weakenself":potentialTargets=getAlliedUnits(src_card,field);break;default:potentialTargets=getEnemyUnits(src_card,field)}function getTargets(include0Strength,includeInactive){for(var key=0,len=potentialTargets.length;key<len;key++){var target=potentialTargets[key];target.isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(all||!target.isTower()&&(includeInactive||target.isActiveNextTurn())&&(include0Strength||target.hasAttack()))&&targets.push(key)}}var all=skill.all,targets=[];if(getTargets(!1,!1),targets.length||getTargets(!0,!1),targets.length||getTargets(!0,!0),!targets.length)return 0;all||(targets=choose_random_target(targets));var weaken=skill.x,enhanced=getEnhancement(src_card,skill.id,weaken);weaken+=enhanced;for(var key=0,len=targets.length;key<len;key++){var target=potentialTargets[targets[key]];target.invisible?(target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" weakens "+debug_name(target)+" but it is invisible!<br>")):(0,target.attack_weaken+=weaken,target.attackIncreasePrevention+=weaken,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" weakens "+debug_name(target)+" by "+weaken+"<br>"))}return!0},enrage:function(src_card,skill){for(var faction=skill.y,rarity=skill.z,all=skill.all,alliedUnits=getAlliedUnits(src_card,field),targets=[],key=0,len=alliedUnits.length;key<len;key++){(target=alliedUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var enrage=skill.x||0,enhanced=getEnhancement(src_card,skill.id,enrage);enrage+=enhanced;var affected=0;for(key=0,len=targets.length;key<len;key++){var target,amount=enrage;!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify?(affected++,skill.mult&&(amount=Math.ceil(skill.mult*target.base_health)),target.enraged+=amount,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" enrages "+debug_name(target)+" by "+amount+"<br>")):(target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" enrages "+debug_name(target)+" but it is nullified!<br>"))}return affected},vampirism:function(sourceCard,enemyAssaults){var target=enemyAssaults[sourceCard.key];if(target&&target.isAlive()&&!sourceCard.silenced){var vampirism=sourceCard.vampirism,damageInfo=modifySkillDamage(target,vampirism,{enfeeble:!0,venom:!0}),damageDealt=damageInfo.damage;if(do_damage(sourceCard,target,damageDealt,damageInfo.shatter,function(source,target,amount){echo+="<u>(Vampirism: +"+vampirism,echo+=damageInfo.echo,echo+=") = "+amount+" damage</u><br>",echo+=debug_name(source)+" activates vampirism, dealing "+amount+" damage to "+debug_name(target),echo+=(target.isAlive()?"":" and it dies")+"<br>"}),0<damageDealt){var healthMissing=sourceCard.health-sourceCard.health_left,healing=Math.min(sourceCard.vampirism,healthMissing);echo&&healing&&(echo+=debug_name(sourceCard)+" recovers "+healing+" health from vampirism<br />"),sourceCard.health_left+=healing}simConfig.showAnimations&&drawField(field,null,null,turn,sourceCard)}}},earlyActivationSkills={cleanse:function(src_card,skill,invigorate){for(var all=skill.all,alliedUnits=getAlliedUnits(src_card,field),targets=[],key=0,len=alliedUnits.length;key<len;key++){(target=alliedUnits[key]).isAlive()&&(all||target.hasNegativeStatus())&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var affected=0;for(key=0,len=targets.length;key<len;key++){var target;!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify?(affected++,target.poisoned=0,target.enfeebled=0,target.scorched=0,target.jammed=!1,target.envenomed=0,target.attack_weaken=0,target.silenced=!1,target.confused=!1,simConfig.debug&&(echo+=debug_name(src_card)+" cleanses "+debug_name(target),echo+="<br>")):(target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" cleanses "+debug_name(target)+" but it is nullified!<br>"))}return affected},enlarge:function(src_card,skill){for(var faction=skill.y,rarity=skill.z,all=skill.all,alliedUnits=getAlliedUnits(src_card,field),targets=[],key=0,len=alliedUnits.length;key<len;key++){(target=alliedUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(all||target.isUnjammed()&&target.isActive())&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var rally=skill.x||0,enhanced=getEnhancement(src_card,skill.id,rally);rally+=enhanced;for(key=0,len=targets.length;key<len;key++){var target=alliedUnits[targets[key]],rally_amt=rally+getSkillMult(skill,target,"attack");rally_amt=adjustAttackIncrease(target,rally_amt),target.attack_rally+=rally_amt,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" enlarges "+debug_name(target)+" by "+rally_amt+"<br>")}return!0},rally:function(src_card,skill){for(var faction=skill.y,rarity=skill.z,all=skill.all,alliedUnits=getAlliedUnits(src_card,field),targets=[],key=0,len=alliedUnits.length;key<len;key++){(target=alliedUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(all||target.isActive()&&target.isUnjammed())&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var rally=skill.x||0,enhanced=getEnhancement(src_card,skill.id,rally);rally+=enhanced;var affected=0;for(key=0,len=targets.length;key<len;key++){var target;if(!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify){affected++;var rally_amt=rally+getSkillMult(skill,target,"attack");rally_amt=adjustAttackIncrease(target,rally_amt),target.attack_rally+=rally_amt,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" empowers "+debug_name(target)+" by "+rally_amt+"<br>")}else target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" empowers "+debug_name(target)+" but it is nullified!<br>")}return affected},radiance:function(src_card,skill){var alliedUnits=getAlliedUnits(src_card,field),rally=skill.x,enhanced=getEnhancement(src_card,skill.id,rally);rally+=enhanced;var faction=skill.y,rarity=skill.z,target_key=src_card.key-1,len=target_key+2;for(target_key<0&&(target_key+=2);target_key<=len;){var target=alliedUnits[target_key];if(target&&target.isInFaction(faction)&&target.isTargetRarity(rarity))if(target.nullified&&!skill.ignore_nullify)target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" activates "+skill.id+", empowering "+debug_name(target)+" but it is nullified!<br>");else{var protectAmount=Math.ceil(.5*rally),rally_amt=adjustAttackIncrease(target,rally);target.attack_rally+=rally_amt,target.protected+=protectAmount,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" activates "+skill.id+", empowering "+debug_name(target)+" by "+rally_amt+" and protecting it by "+protectAmount+"<br>")}target_key+=2}return!0},legion:function(src_card,skill){var alliedUnits=getAlliedUnits(src_card,field),rally=skill.x,enhanced=getEnhancement(src_card,skill.id,rally);rally+=enhanced;var faction=skill.y,rarity=skill.z,target_key=src_card.key-1,len=target_key+2;target_key<0&&(target_key+=2);for(var affected=0;target_key<=len;){var target=alliedUnits[target_key];if(target&&target.isActive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity))if(target.nullified&&!skill.ignore_nullify)target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" activates "+skill.id+", empowering "+debug_name(target)+" but it is nullified!<br>");else{affected++;var rally_amt=adjustAttackIncrease(target,rally);target.attack_rally+=rally_amt,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" activates "+skill.id+", empowering "+debug_name(target)+" by "+rally_amt+"<br>")}target_key+=2}return affected},fervor:function(src_card,skill){var alliedUnits=getAlliedUnits(src_card,field),rally=skill.x,enhanced=getEnhancement(src_card,skill.id,rally);rally+=enhanced;var faction=skill.y,rarity=skill.z,fervorAmount=0,target_key=src_card.key-1,len=target_key+2;for(target_key<0&&(target_key+=2);target_key<=len;){var target=alliedUnits[target_key];target&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(fervorAmount+=rally),target_key+=2}return fervorAmount?(fervorAmount=adjustAttackIncrease(src_card,fervorAmount),src_card.attack_rally+=fervorAmount,simConfig.debug&&(enhanced&&(echo+="<u>(Enhance: +"+enhanced+")</u><br>"),echo+=debug_name(src_card)+" activates fervor for "+fervorAmount+"<br>"),1):0},barrage:function(src_card,skill){var barrages=skill.x,faction=skill.y,rarity=skill.z,all=skill.all,enemyUnits=getEnemyUnits(src_card,field);barrages+=getEnhancement(src_card,skill.id,barrages);for(var affected=0,i=0;i<barrages;i++){for(var targets=[],key=0,len=enemyUnits.length;key<len;key++){(target=enemyUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&targets.push(key)}if(!targets.length)return affected;all||(targets=choose_random_target(targets));for(key=0,len=targets.length;key<len;key++){var target;if((target=enemyUnits[targets[key]]).invisible)target.invisible--,simConfig.debug&&(echo+=debug_name(src_card)+" throws a bomb at "+debug_name(target)+" but it is invisible!<br>");else{affected++;var strike_damage=1,damageInfo=modifySkillDamage(target,strike_damage,{enfeeble:!0,venom:!0});do_damage(src_card,target,strike_damage=damageInfo.damage,damageInfo.shatter,function(source,target,amount){echo+="<u>(Barrage: +1",echo+=damageInfo.echo,echo+=") = "+amount+" damage</u><br>",echo+=debug_name(source)+" throws a bomb at "+debug_name(target)+" for "+amount+" damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"})}}}return affected},enhance:function(src_card,skill){for(var faction=skill.y,rarity=skill.z,s=skill.s,all=skill.all,alliedUnits=getAlliedUnits(src_card,field),require_active_turn=requiresActiveTurn(s),targets=[],key=0,len=alliedUnits.length;key<len;key++){(target=alliedUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(all||!require_active_turn||target.isActive()&&target.isUnjammed())&&(all||target.hasSkill(s))&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var x=skill.x||0,mult=skill.mult,affected=0;for(key=0,len=targets.length;key<len;key++){var target;if(!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify){if(affected++,target.hasSkill(s)){var enhancements=target.enhanced;enhancements[s]=enhancements[s]||{x:0,mult:0},0<x?(simConfig.debug&&(echo+=debug_name(src_card)+" enhances "+debug_find_skill(target,s)+" of "+debug_name(target,!1)+" by "+x+"<br>"),enhancements[s].x+=x):0<mult&&(simConfig.debug&&(echo+=debug_name(src_card)+" enhances "+debug_find_skill(target,s)+" of "+debug_name(target,!1)+" by "+100*mult+"%<br>"),enhancements[s].mult+=mult)}}else target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" enhances "+debug_name(target)+" but it is nullified!<br>")}return affected},imbue:function(src_card,skill){for(var faction=skill.y,rarity=skill.z,s=skill.s,all=skill.all,alliedUnits=getAlliedUnits(src_card,field),require_active_turn=requiresActiveTurn(s),targets=[],key=0,len=alliedUnits.length;key<len;key++){(target=alliedUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)&&(all||!require_active_turn||target.isActive()&&target.isUnjammed())&&targets.push(key)}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var x=skill.x||0,affected=(skill={id:s,x:x},0);for(key=0,len=targets.length;key<len;key++){var target;if(!(target=alliedUnits[targets[key]]).nullified||skill.ignore_nullify)if(affected++,target.hasSkill(s)){var enhancements=target.enhanced;enhancements[s]=enhancements[s]||{x:0,mult:0},simConfig.debug&&(echo+=debug_name(src_card)+" imbues "+debug_name(target,!1)+" existing "+debug_find_skill(target,s)+" by "+x+"<br>"),enhancements[s].x+=x}else target.imbue(skill),simConfig.debug&&(echo+=debug_name(src_card)+" imbues "+debug_name(target,!1)+" with "+debug_skill(target,skill)+"<br>");else target.nullified--,simConfig.debug&&(echo+=debug_name(src_card)+" imbues "+debug_name(target)+" but it is nullified!<br>")}return affected},mark:function(src_card,skill){for(var faction=skill.y,rarity=skill.z,all=skill.all,enemyUnits=getEnemyUnits(src_card,field),markTarget=src_card.mark_target,targets=[],key=0,len=enemyUnits.length;key<len;key++){if((target=enemyUnits[key]).isAlive()&&target.isInFaction(faction)&&target.isTargetRarity(rarity)){if(target.uid===markTarget){targets=[key];break}targets.push(key)}}if(!targets.length)return 0;all||(targets=choose_random_target(targets));var mark=skill.x;mark+=getEnhancement(src_card,skill.id,mark);for(key=0,len=targets.length;key<len;key++){var target;(target=enemyUnits[targets[key]]).enfeebled+=mark,src_card.mark_target=target.uid,simConfig.debug&&(echo+=debug_name(src_card)+" marks "+debug_name(target)+" by "+mark+"<br>"),skill.countdown=1}return!0}},onPlaySkills={ambush:function(src_card,target,skill){return do_damage(src_card,target,(skill.x||0)+getSkillMult(skill,target),null,function(source,target,amount){echo+=debug_name(source)+" ambushes "+debug_name(target)+" for "+amount+" damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"}),1},slow:function(src_card,target,skill){var slow=skill.x+getSkillMult(skill,target);return target.timer+=slow,simConfig.debug&&(echo+=debug_name(src_card)+" slows "+debug_name(target)+" by "+slow+"<br>"),1}},onDeathSkills={unearth:function(dying,killer,skill){if(!dying.isToken){var unearthedUnit=makeUnitInfo(skill.card||dying.id,skill.level||skill.x),unearthedCard=get_card_apply_battlegrounds(unearthedUnit,null,!0);unearthedCard.isToken=!0;var mult=skill.mult;return mult&&(unearthedCard.attack=Math.ceil(dying.attack*mult),unearthedCard.health=Math.ceil(dying.health*mult)),play_card(unearthedCard,dying.owner,!0),setPassiveStatus(unearthedCard,"evade","invisible"),setPassiveStatus(unearthedCard,"absorb","warded"),simConfig.debug&&(echo+=debug_name(unearthedCard)+" is unearthed</br>"),1}},reanimate:function(dying,killer,skill){return dying.reanimated?0:(applyDefaultStatuses(dying),dying.health_left=skill.x,dying.reanimated=!0,simConfig.debug&&(echo+=" and is reanimated</br>"),1)}},onAttackSkills={swarm:function(attacker,defender){for(var alliedUnits=getAlliedUnits(attacker,field),targets=[],key=0,len=alliedUnits.length;key<len;key++){var target=alliedUnits[key];if(target.isAlive()&&target.isActive()&&!target.isTower()){var adjustedAttack=target.adjustedAttack();!weakest||adjustedAttack<weakest?(targets=[target],weakest=adjustedAttack):adjustedAttack===weakest&&targets.push(target)}}if(!targets.length)return 0;var swarm=attacker.swarm;swarm+=getEnhancement(attacker,"swarm",swarm);var weakest=choose_random_target(targets)[0];return weakest.attack_berserk+=swarm,simConfig.debug&&(echo+=debug_name(attacker)+" activates swarm, boosting the attack of "+debug_name(attacker)+" by "+swarm+"</br>"),1}};function activation_skills(src_card){if(src_card.silenced)simConfig.debug&&(echo+=debug_name(src_card)+" is silenced and cannot use skills</br>");else for(var skills=src_card.skill,isAlive=makeLivenessCheck(src_card),i=0,len=skills.length;i<len&&isAlive();i++){var skill=skills[i];if(!skill.countdown){var affected=getActivatedSkill(activationSkills,skill.id)(src_card,skill);skill.c&&affected&&(skill.countdown=skill.c),simConfig.showAnimations&&drawField(field,null,null,turn,src_card)}}}function setupDecks(){var cache_player_deck;cache_player_deck=simConfig.playerDeck?hash_decode(simConfig.playerDeck):createEmptyDeck(),simConfig.cache_player_deck_cards=getDeckCards(cache_player_deck,"player");var cache_cpu_deck,pvpAI=!0;simConfig.cpuDeck?(cache_cpu_deck=hash_decode(simConfig.cpuDeck),simConfig.missionID&&(pvpAI=!1)):simConfig.missionID?(cache_cpu_deck=load_deck_mission(simConfig.missionID,simConfig.missionLevel),pvpAI=!1):simConfig.raidID?(cache_cpu_deck=load_deck_raid(simConfig.raidID,simConfig.raidLevel),pvpAI=!1):cache_cpu_deck=createEmptyDeck(),simConfig.pvpAI=pvpAI,simConfig.cache_cpu_deck_cards=getDeckCards(cache_cpu_deck,"cpu")}function setupField(field){var uids=field.uids={};["player","cpu"].forEach(function(player){for(var pDeck=deck[player],cards=pDeck.deck,uidBase="player"===player?1:101,i=0;i<cards.length;i++){var uid=uidBase+i,card=cards[i];card.owner=player,card.played=!1,card.uid=uid,uids[uid]=card}var commander=pDeck.commander;commander.owner=player,commander.health_left=commander.health,commander.reusableSkills||commander.resetTimers();uid="player"===player?-1:-2;commander.uid=uid,uids[uid]=commander,field[player].commander=commander})}function onCardChosen(turn,drawCards){clearFrames(),performTurns(turn,drawCards)}function performTurns(turn,drawCards){var done=function(turn,drawCards){var first_player,second_player;second_player=simConfig.surge?(first_player="cpu","player"):(first_player="player","cpu");if(0<turn){if(!performTurn(turn,field,first_player,second_player,drawCards))return!1;if(!field.player.commander.isAlive()||!field.cpu.commander.isAlive())return!(simulating=!1)}for(turn++;turn<=maxTurns+1;turn++){if(turn==maxTurns+1)return!(simulating=!1);setup_turn(turn,first_player,second_player,field);if(!performTurn(turn,field,first_player,second_player,!0))return!1;if(!field.player.commander.isAlive()||!field.cpu.commander.isAlive())return simulating=!1,simConfig.debug&&(echo+="<u>Turn "+turn+" ends</u><br><br></div>"),!0}return!(simulating=!1)}(turn,drawCards);return done&&SIMULATOR.userControlled&&SIM_CONTROLLER.debug_end(),done}function performTurn(turn,field,first_player,second_player,drawCards){if(turn%2)var p=first_player,o=second_player;else p=second_player,o=first_player;return SIMULATOR.closeDiv=!1,!!function(p,turn,drawCards){var deck_p=deck[p],deck_p_deck=deck_p.deck,deck_p_ordered=deck_p.ordered;if(deck_p_deck[0]){var card_picked=0;if(1==deck_p_deck.length)card_picked=0;else{for(var i=0;i<deck_p_deck.length;i++){var card=deck_p_deck[i];if(card.trap&&(play_card(card.trap,p,turn),card.trap=!1),2===i)break}card_picked=deck_p.chooseCard(p,deck_p_deck,deck_p_ordered,turn,drawCards)}if(card_picked<0)return!1;play_card(deck_p_deck[card_picked],p,turn),function(deck,index){var key=index,len=deck.length-1;for(;key<len;)deck[key]=deck[++key];deck.length=key}(deck_p_deck,card_picked)}return!0}(p,turn,drawCards)&&(function(p,o,field,turn){for(var field_p=field[p],field_p_commander=field_p.commander,field_p_assaults=field_p.assaults,field_o=field[o],field_o_commander=field_o.commander,field_o_assaults=field_o.assaults,i=0;i<battlegrounds.onTurn.length;i++){var battleground=battlegrounds.onTurn[i];battleground.enemy_only&&"cpu"!==p||battleground.ally_only&&"player"!==p||(battleground.owner=p,doEarlyActivationSkills(battleground),activation_skills(battleground))}doEarlyActivationSkills(field_p.commander);for(var key=0,len=field_p_assaults.length;key<len;key++){(current_assault=field_p_assaults[key]).silenced||(setPassiveStatus(current_assault,"evade","invisible"),setPassiveStatus(current_assault,"absorb","warded"))}(function(field_p){for(var field_p_assaults=field_p.assaults,unit_key=0,unit_len=field_p_assaults.length;unit_key<unit_len;unit_key++){var current_unit=field_p_assaults[unit_key];if(current_unit.isAlive()&&current_unit.isActive()&&current_unit.isUnjammed()){var dualstrike=current_unit.flurry;dualstrike&&0===dualstrike.countdown&&current_unit.hasAttack()&&!current_unit.silenced&&(dualstrike.countdown=dualstrike.c,current_unit.dualstrike_triggered=!0),doEarlyActivationSkills(current_unit)}}})(field_p),activation_skills(field_p_commander);for(key=0,len=field_p_assaults.length;key<len;key++){var current_assault;if((current_assault=field_p_assaults[key]).isAlive())if(current_assault.isActive())if(current_assault.jammed)current_assault.vampirism&&activationSkills.vampirism(current_assault,field_o_assaults),simConfig.debug&&(echo+=debug_name(current_assault)+" is frozen and cannot attack<br>");else{var activations=1;for(current_assault.dualstrike_triggered&&(activations++,simConfig.debug&&(echo+=debug_name(current_assault)+" activates dualstrike<br>"));0<activations;activations--)if(current_assault.vampirism&&activationSkills.vampirism(current_assault,field_o_assaults),activation_skills(current_assault),current_assault.isAlive())if(current_assault.hasAttack()){var opposingUnit;if(current_assault.confused){var adjacentAllies=[field_p_assaults[current_assault.key-1],field_p_assaults[current_assault.key+1]].filter(function(it){return it&&it.isAlive()});opposingUnit=!!adjacentAllies.length&&choose_random_target(adjacentAllies)[0]}else opposingUnit=field_o_assaults[current_assault.key];if(doAttack(current_assault,opposingUnit,field_o_assaults,field_o_commander),!field_o_commander.isAlive()||!field_p_commander.isAlive())return;if(!current_assault.isAlive())break}else simConfig.debug&&0<current_assault.permanentAttack()&&(echo+=debug_name(current_assault)+" is weakened and cannot attack<br>")}else current_assault.vampirism&&activationSkills.vampirism(current_assault,field_o_assaults),simConfig.debug&&(echo+=debug_name(current_assault)+" is not active yet<br>")}(function(field_p_assaults){for(var key=0,len=field_p_assaults.length;key<len;key++){var current_assault=field_p_assaults[key];if(current_assault.isAlive()){if(current_assault.jammedSelf?current_assault.jammedSelf=!1:current_assault.jammed=!1,current_assault.confused=!1,current_assault.attack_rally=0,current_assault.attack_weaken=0,current_assault.attackIncreasePrevention=0,current_assault.nullified=0,current_assault.dualstrike_triggered=!1,current_assault.bash_triggered=!1,current_assault.regenerate&&current_assault.isDamaged()&&!current_assault.silenced){var regen_health=current_assault.regenerate,enhanced=getEnhancement(current_assault,"regenerate",regen_health);regen_health+=enhanced;var healthMissing=current_assault.health-current_assault.health_left;healthMissing<=regen_health&&(regen_health=healthMissing),current_assault.health_left+=regen_health,simConfig.debug&&(echo+=debug_name(current_assault)+" regenerates "+regen_health+" health<br>")}var amount;if(amount=current_assault.poisoned)(warded=current_assault.warded)&&(amount-=applyDamageReduction(current_assault,"warded",amount)),do_damage(null,current_assault,amount,null,function(source,target,amount){echo+=debug_name(target)+" takes "+amount,warded&&(echo+=" (Poison: +"+current_assault.poisoned+" Ward: -"+warded+")"),echo+=" poison damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"});if(amount=current_assault.envenomed)(warded=current_assault.warded)&&(amount-=applyDamageReduction(current_assault,"warded",amount)),do_damage(null,current_assault,amount,null,function(source,target,amount){echo+=debug_name(target)+" takes "+amount,warded&&(echo+=" (Venom: +"+current_assault.envenomed+" Ward: -"+warded+")"),echo+=" venom damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"});var warded,scorch=current_assault.scorched;if(scorch)amount=scorch.amount,(warded=current_assault.warded)&&(amount-=applyDamageReduction(current_assault,"warded",amount)),do_damage(null,current_assault,amount,null,function(source,target,amount){echo+=debug_name(target)+" takes "+amount,warded&&(echo+=" (Scorch: +"+scorch.amount+" Ward: -"+warded+")"),echo+=" scorch damage",target.isAlive()?target.scorched||(echo+=" and scorch wears off"):echo+=" and it dies",echo+="<br>"}),1<scorch.timer?scorch.timer--:current_assault.scorched=0;var corroded=current_assault.corroded;if(corroded)if(corroded.timer--,corroded.timer<0)current_assault.corroded=!1,current_assault.attack_corroded=0,simConfig.debug&&(echo+=debug_name(current_assault)+" recovers from corrosion<br>");else{var corrosion=corroded.amount;current_assault.attack_corroded=corrosion,simConfig.debug&&(echo+=debug_name(current_assault)+" loses "+corrosion+" attack to corrosion<br>")}current_assault.isAlive()||doOnDeathSkills(current_assault,null),current_assault.silenced&&(current_assault.silenced=!1,setPassiveStatus(current_assault,"evade","invisible"),setPassiveStatus(current_assault,"absorb","warded"))}}})(field_p_assaults),remove_dead_cards("player"),remove_dead_cards("cpu"),simConfig.debug&&(echo+="<u>Turn "+turn+" ends</u><br><br></div>")}(p,o,field,turn),!0)}function debugDraw(commander,deck,i){var card=deck[i];return card?commander+" draws "+debug_name(card,!0)+"<br/>":""}function setup_turn(turn,first_player,second_player,field){if(simulation_turns=turn,SIMULATOR.choice=void 0,turn%2)var p=first_player,o=second_player;else p=second_player,o=first_player;if(simConfig.debug){var commander_p=debug_name(field[p].commander),deck_p=deck[p].deck;echo+='<div id="turn_"'+turn+' class="turn-info"><hr/><br/><u>Turn '+turn+" begins for "+commander_p+"</u><br>",turn<=2&&(echo+=debugDraw(commander_p,deck_p,0),echo+=debugDraw(commander_p,deck_p,1)),echo+=debugDraw(commander_p,deck_p,2)}var field_p=field[p],field_o=field[o],field_p_assaults=field_p.assaults,field_o_assaults=field_o.assaults;doCountDowns(field_p.commander);for(var i=0,len=field_p_assaults.length;i<len;i++){var current_assault=field_p_assaults[i];if(0<current_assault.timer&&(3===turn&&simConfig.tournament||(current_assault.timer--,simConfig.debug&&(echo+=debug_name(current_assault)+" reduces its timer<br>"))),current_assault.valor&&!current_assault.silenced){var enemy=field_o_assaults[i];if(enemy&&current_assault.adjustedAttack()<enemy.adjustedAttack()&&enemy.hasAttack()){var valor=adjustAttackIncrease(current_assault,current_assault.valor);current_assault.attack_valor+=valor,simConfig.debug&&(echo+=debug_name(current_assault)+" activates valor, boosting its attack by "+valor+"<br/>")}else simConfig.debug&&(echo+=debug_name(current_assault)+" activates valor but ",echo+=enemy?"enemy is not strong enough.<br/>":"there is no opposing enemy.<br/>")}current_assault.enfeebled=0,current_assault.enraged=0,current_assault.invisible=0,current_assault.protected=0,current_assault.barrier_ice=0,current_assault.warded=0,current_assault.enhanced={},current_assault.removeImbue(),doCountDowns(current_assault)}}function chooseCardUserManually(p,shuffledDeck,orderedDeck,turn,drawCards){var hand=shuffledDeck.slice(0,3);SIMULATOR.closeDiv=!0;for(var cardsInHand=[],drawableHand=[],handIdx=0,hand_len=hand.length;handIdx<hand_len;handIdx++){var card=hand[handIdx],text=handIdx+": "+card.name;1<card.maxLevel&&(text+="{"+card.level+"/"+card.maxLevel+"}"),cardsInHand.push(text),drawableHand.push(card)}if(drawCards&&(hideTable(),outputTurns(echo),drawField(field,drawableHand,onCardChosen,turn)),void 0===SIMULATOR.choice)return-1;var card_picked=SIMULATOR.choice;return card_picked=card_picked||0}function chooseCardOrdered(p,shuffledDeck,orderedDeck,turn,drawCards){if(void 0===orderedDeck)return 0;for(var hand=shuffledDeck.slice(0,3),played=!1,orderIdx=0,deck_len=orderedDeck.length;orderIdx<deck_len;orderIdx++){for(var cardInHand,desiredCard=orderedDeck[orderIdx],priority_id=desiredCard.priority,samePriority=-1,handIdx=0,hand_len=hand.length;handIdx<hand_len;handIdx++){var b_priority=(cardInHand=hand[handIdx]).priority;if(areEqual(desiredCard,cardInHand)){played=!0;break}0<priority_id&&priority_id==b_priority&&(samePriority=handIdx)}if(!played&&0<=samePriority&&(played=!0,cardInHand=hand[handIdx=samePriority]),played){for(var len=orderedDeck.length-1;orderIdx<len;orderIdx++)orderedDeck[orderIdx]=orderedDeck[orderIdx+1];return orderedDeck.length=orderIdx,handIdx}}return-1}function chooseCardRandomly(p,shuffledDeck,orderedDeck,turn,drawCards){var hand=shuffledDeck.slice(0,3);return~~(Math.random()*hand.length)}function chooseCardByPoints(p,shuffledDeck,orderedDeck,turn,drawCards){for(var hand=shuffledDeck.slice(0,3),card_picked=-1,bestRank=-1,i=0;i<hand.length;i++){var rank=getCardRanking(hand[i]);bestRank<rank&&(bestRank=rank,card_picked=i)}return card_picked}function chooseFirstCard(p,shuffledDeck,orderedDeck,turn,drawCards){return 0}function getCardRanking(card){var cardID=card.id.toString();return card.maxLevel<10?6*parseInt(card.rarity)+3*(4<cardID.length?parseInt(cardID[0]):0)+(parseInt(card.level)-parseInt(card.maxLevel)):5*parseInt(card.rarity)+6+card.level}function setPassiveStatus(assault,skillName,statusName){var statusValue=0;assault[skillName]&&(statusValue=assault[skillName],statusValue+=getEnhancement(assault,skillName,statusValue));assault[statusName]=statusValue}function modifySkillDamage(target,damage,exclusions){var enfeeble=(exclusions=exclusions||{}).enfeeble?0:target.enfeebled||0,envenomed=exclusions.venom?0:target.envenomed||0,shrouded=exclusions.stasis?0:checkShroud(target),protect=exclusions.protect?0:target.protected||0,warded=exclusions.ward?0:target.warded||0;damage+=enfeeble+envenomed;var shatter=!1;warded&&(damage-=applyDamageReduction(target,"warded",damage)),protect&&(damage-=applyDamageReduction(target,"protected",damage),0==target.protected&&(shatter=target.barrier_ice)),shrouded&&(damage-=shrouded);var echo="";return simConfig.debug&&(enfeeble&&(echo+=" Enfeeble: +"+enfeeble),envenomed&&(echo+=" Venom: +"+envenomed),shrouded&&(echo+=" Shroud: -"+shrouded),protect&&(echo+=" Barrier: -"+protect),warded&&(echo+=" Ward: -"+warded)),damage<0&&(damage=0),{damage:damage,shatter:shatter,echo:echo}}function applyDamageReduction(target,statusName,damage){var statusValue=target[statusName];return statusValue<=damage?(target[statusName]=0,statusValue):(target[statusName]-=damage,damage)}function doCountDowns(unit){doSkillCountDowns(unit,unit.skill),doSkillCountDowns(unit,unit.earlyActivationSkills);var dualStrike=unit.flurry;dualStrike&&dualStrike.countdown&&(dualStrike.countdown--,simConfig.debug&&(dualStrike.countdown?echo+=debug_name(unit)+" charges  dualstrike (ready in "+dualStrike.countdown+" turns)<br/>":echo+=debug_name(unit)+" readies dualstrike<br/>"))}function doSkillCountDowns(unit,skills){for(var i=0,len=skills.length;i<len;i++){var skill=skills[i];skill.countdown&&(skill.countdown--,simConfig.debug&&(skill.countdown?echo+=debug_name(unit)+" charges "+convertName(skill.id)+" (ready in "+skill.countdown+" turns)<br/>":echo+=debug_name(unit)+" readies "+convertName(skill.id)+"<br/>"))}}function doAttack(current_assault,originalTarget,field_o_assaults,field_o_commander){var target=originalTarget;if(target)if(target.isAlive()){if(!current_assault.confused){var adjacent,taunted=!1;if(!target.taunt)if((adjacent=field_o_assaults[target.key-1])&&adjacent.taunt)target=adjacent,taunted=!0;else(adjacent=field_o_assaults[target.key+1])&&adjacent.taunt&&(target=adjacent,taunted=!0);taunted&&simConfig.debug&&(echo+=debug_name(target)+" taunts "+debug_name(current_assault))}}else{if(current_assault.confused&&originalTarget.owner===current_assault.owner)return void(simConfig.debug&&(echo+=debug_name(current_assault)+" is confused and attacks "+debug_name(target)+", but it is already dead<br>"));target=field_o_commander}else{if(current_assault.confused)return;target=field_o_commander}var damage=current_assault.adjustedAttack(),bash=0;current_assault.bash_triggered||current_assault.silenced||(bash=current_assault.bash,current_assault.bash_triggered=!0),damage+=bash;var enfeeble=target.enfeebled;damage+=enfeeble;var envenomed=target.envenomed;damage+=envenomed;var heartseeker=target.heartseeker;damage+=heartseeker,simConfig.debug&&(echo+="<u>(Attack: +"+current_assault.attack,current_assault.attack_berserk&&(echo+=" Berserk: +"+current_assault.attack_berserk),current_assault.attack_valor&&(echo+=" Valor: +"+current_assault.attack_valor),current_assault.attack_rally&&(echo+=" Rally: +"+current_assault.attack_rally),bash&&(echo+=" Bash: +"+bash),current_assault.attack_weaken&&(echo+=" Weaken: -"+current_assault.attack_weaken),current_assault.attack_corroded&&(echo+=" Corrosion: -"+current_assault.attack_corroded),enfeeble&&(echo+=" Enfeeble: +"+enfeeble),envenomed&&(echo+=" Venom: +"+envenomed),heartseeker&&(echo+=" Heartseeker: +"+heartseeker));var pierce=current_assault.pierce;pierce?pierce+=enhanced=getEnhancement(current_assault,"pierce",pierce):pierce=0;var protect=target.protected,shatter=!1,armor=target.silenced?0:target.armored,shrouded=target.silenced?0:checkShroud(target);if(protect&&(simConfig.debug&&(echo+=" Barrier: -"+protect),pierce&&(protect<=pierce?(simConfig.debug&&(echo+=" Pierce: +"+protect),pierce-=protect,protect=0,target.protected=0):(simConfig.debug&&(echo+=" Pierce: +"+pierce),protect-=pierce,target.protected-=pierce,pierce=0)),protect&&(protect<=damage?(shatter=target.barrier_ice,damage-=protect,target.protected=0):(target.protected-=damage,damage=0))),shrouded&&(simConfig.debug&&(echo+=" Shroud: -"+shrouded),pierce&&(shrouded<pierce?(simConfig.debug&&(echo+=" Pierce: +"+shrouded),shrouded=0):(simConfig.debug&&(echo+=" Pierce: +"+pierce),shrouded-=pierce)),damage-=shrouded),armor&&(armor+=getEnhancement(target,"armored",armor),simConfig.debug&&(echo+=" Armor: -"+armor),pierce&&(armor<pierce?(simConfig.debug&&(echo+=" Pierce: +"+armor),armor=0):(simConfig.debug&&(echo+=" Pierce: +"+pierce),armor-=pierce)),damage-=armor),damage<0&&(damage=0),simConfig.debug&&(echo+=") = "+damage+" damage</u><br>"),function(source,target,damage,logFn){damage>=target.health_left?target.health_left=0:target.health_left-=damage,simConfig.debug&&logFn(source,target,damage),source.silence&&target.isAssault()&&0<damage&&!source.silenced&&(target.silenced=!0,target.invisible=0,target.warded=0,simConfig.debug&&(echo+=debug_name(source)+" inflicts silence on "+debug_name(target)+"<br>")),!target.isAlive()&&source&&doOnDeathSkills(target,source)}(current_assault,target,damage,function(source,target,amount){echo+=debug_name(source),source.confused&&(echo+=" is confused "+(target.owner===current_assault.owner?" and ":" but ")),echo+=" attacks "+debug_name(target)+" for "+amount+" damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"}),simConfig.showAnimations&&drawField(field,null,null,turn,current_assault),field_o_commander.isAlive()){if(0<damage&&target.isAssault()&&target.isAlive()&&!current_assault.silenced){if(current_assault.poison){var poison=current_assault.poison;(poison+=enhanced=getEnhancement(current_assault,"poison",poison))>target.poisoned&&(target.poisoned=poison,simConfig.debug&&(echo+=debug_name(current_assault)+" inflicts poison("+poison+") on "+debug_name(target)+"<br>"))}if(current_assault.venom){var venom=current_assault.venom;(venom+=enhanced=getEnhancement(current_assault,"venom",venom))>target.envenomed&&(target.envenomed=venom,simConfig.debug&&(echo+=debug_name(current_assault)+" inflicts venom("+venom+") on "+debug_name(target)+"<br>"))}if(current_assault.nullify){var nullify=current_assault.nullify;nullify+=enhanced=getEnhancement(current_assault,"nullify",nullify),target.nullified+=nullify,simConfig.debug&&(echo+=debug_name(current_assault)+" inflicts nullify("+nullify+") on "+debug_name(target)+"<br>")}if(current_assault.daze){var dazed=current_assault.daze;dazed+=enhanced=getEnhancement(current_assault,"daze",dazed),target.attack_weaken+=dazed,simConfig.debug&&(echo+=debug_name(current_assault)+" dazed "+debug_name(target)+" for "+dazed+"<br>")}}if(shatter&&iceshatter(target),0<damage&&current_assault.isAlive()){if(!current_assault.silenced){if(current_assault.leech&&current_assault.isDamaged()){var leech_health=current_assault.leech;leech_health+=enhanced=getEnhancement(current_assault,"leech",leech_health);var healthMissing=current_assault.health-current_assault.health_left;healthMissing<=leech_health&&(leech_health=healthMissing),current_assault.health_left+=leech_health,simConfig.debug&&(echo+=debug_name(current_assault)+" siphons "+leech_health+" health<br>")}if(current_assault.reinforce){var reinforce=current_assault.reinforce;reinforce+=enhanced=getEnhancement(current_assault,"reinforce",reinforce),current_assault.protected+=reinforce,simConfig.debug&&(echo+=debug_name(current_assault)+" reinforces itself with barrier "+reinforce+"<br>")}if(current_assault.devour){var devour=current_assault.devour,enhanced=getEnhancement(current_assault,"devour",devour);devour=adjustAttackIncrease(current_assault,devour+=enhanced),current_assault.attack_berserk+=devour;var healing=Math.min(devour,current_assault.health-current_assault.health_left);healing&&(current_assault.health_left+=healing),simConfig.debug&&(echo+=debug_name(current_assault)+" activates devour, gaining "+devour+" attack",healing&&(echo+=" and healing "+healing+" health"),echo+="<br>")}}if(target.counter){var counterBase=0+target.counter,counterEnhancement=getEnhancement(target,"counter",counterBase);doCounterDamage(current_assault,target,"Vengance",counterBase,counterEnhancement,!1)}if(target.counterburn){var scorch=target.counterburn||0;scorch+=enhanced=getEnhancement(target,"counterburn",scorch),current_assault.scorched?(current_assault.scorched.amount+=scorch,current_assault.scorched.timer=2):current_assault.scorched={amount:scorch,timer:2},simConfig.debug&&(echo+=debug_name(target)+" inflicts counterburn("+scorch+") on "+debug_name(current_assault)+"<br>")}if(target.counterpoison){poison=target.counterpoison||0;(poison+=enhanced=getEnhancement(target,"counterpoison",poison))>current_assault.poisoned&&(current_assault.poisoned=poison,simConfig.debug&&(echo+=debug_name(target)+" inflicts counterpoison("+poison+") on "+debug_name(current_assault)+"<br>"))}var enraged=target.enraged;if(0<enraged&&(enraged=adjustAttackIncrease(target,enraged),target.isAlive()&&(target.attack_berserk+=enraged,simConfig.debug&&(echo+=debug_name(target)+" is enraged and gains "+enraged+" attack!</br>"))),target.fury){var fury=adjustAttackIncrease(target,Math.ceil(target.fury/2));target.isAlive()&&(target.attack_berserk+=fury,simConfig.debug&&(echo+=debug_name(target)+" activates fury and gains "+fury+" attack<br>")),doCounterDamage(current_assault,target,"Fury",target.fury,0,!1)}}if(0<damage&&!current_assault.silenced){if(current_assault.isAlive()&&current_assault.berserk){var berserk=current_assault.berserk;enhanced=getEnhancement(current_assault,"berserk",berserk);berserk=adjustAttackIncrease(current_assault,berserk+=enhanced),current_assault.attack_berserk+=berserk,simConfig.debug&&(echo+=debug_name(current_assault)+" activates berserk and gains "+berserk+" attack<br>")}current_assault.swarm&&onAttackSkills.swarm(current_assault,target)}if(0<damage&&target.corrosive){var corrosion=target.corrosive||0;corrosion+=enhanced=getEnhancement(target,"corrosive",corrosion),current_assault.corroded?(current_assault.corroded.amount+=corrosion,current_assault.corroded.timer=2):current_assault.corroded={amount:corrosion,timer:2},simConfig.debug&&(echo+=debug_name(target)+" inflicts corrosion("+corrosion+") on "+debug_name(current_assault)+"<br>"),current_assault.attack_corroded=current_assault.corroded.amount,simConfig.debug&&(echo+=debug_name(current_assault)+" loses "+corrosion+" attack to corrosion<br>")}current_assault.isAlive()||doOnDeathSkills(current_assault,target),simConfig.showAnimations&&drawField(field,null,null,turn,current_assault)}}function doCounterDamage(attacker,defender,counterType,counterBase,counterEnhancement,excludeVenom){var counterDamage=counterBase+counterEnhancement,damageInfo=modifySkillDamage(attacker,counterDamage,{enfeeble:!0,venom:excludeVenom});counterDamage=damageInfo.damage;damageInfo.shatter;simConfig.debug&&(echo+="<u>("+counterType+": +"+counterBase,counterEnhancement&&(echo+=" Enhance: +"+counterEnhancement),echo+=damageInfo.echo,echo+=") = "+counterDamage+" damage</u><br>"),do_damage(defender,attacker,counterDamage,null,function(source,target,amount){echo+=debug_name(target)+" takes "+amount+" "+counterType.toLowerCase()+" damage",echo+=(target.isAlive()?"":" and it dies")+"<br>"})}var battlegrounds,deck={},field={},simulation_turns=0,simulating=!1,userControlled=!1,turn=0,totalDeckHealth=0,totalCpuDeckHealth=0,maxTurns=100,simConfig={};SIMULATOR.simulate=function(){if(simulating=!0,function(){if(SIMULATOR.simulation_turns=0,deck={cpu:{deck:[]},player:{deck:[]}},SIMULATOR.field={cpu:{assaults:[]},player:{assaults:[]}},deck.player=copy_deck(simConfig.cache_player_deck_cards),simConfig.missionID&&1<simConfig.missionLevel&&simConfig.missionLevel<7){var cache_cpu_deck=load_deck_mission(simConfig.missionID,simConfig.missionLevel);simConfig.cache_cpu_deck_cards=getDeckCards(cache_cpu_deck,"cpu")}else if(simConfig.raidID){cache_cpu_deck=load_deck_raid(simConfig.raidID,simConfig.raidLevel);simConfig.cache_cpu_deck_cards=getDeckCards(cache_cpu_deck,"cpu")}deck.cpu=copy_deck(simConfig.cache_cpu_deck_cards),simConfig.playerOrdered&&!simConfig.playerExactOrdered&&(deck.player.ordered=copy_card_list(deck.player.deck)),simConfig.cpuOrdered&&!simConfig.cpuExactOrdered&&(deck.cpu.ordered=copy_card_list(deck.cpu.deck)),deck.player.chooseCard=SIMULATOR.userControlled?chooseCardUserManually:simConfig.playerOrdered?chooseCardOrdered:chooseCardRandomly,deck.cpu.chooseCard=simConfig.cpuOrdered?chooseCardOrdered:simConfig.pvpAI?chooseCardByPoints:simConfig.cpuExactOrdered?chooseCardRandomly:chooseFirstCard}(),simConfig.playerExactOrdered?simConfig.playerOrdered||(deck.player.shuffleHand=!0):shuffle(deck.player.deck),simConfig.cpuExactOrdered?simConfig.cpuOrdered||(deck.cpu.shuffleHand=!0):shuffle(deck.cpu.deck),setupField(field),simConfig.siegeMode){var tower=BATTLEGROUNDS[simConfig.towerType].effect[simConfig.towerLevel];if(tower){tower=makeUnitInfo(tower.id,tower.level);var towerCard=get_card_apply_battlegrounds(tower);towerCard.uid=150,(field.uids[150]=towerCard).isTower=function(){return!0},play_card(towerCard,"cpu",-1,!0)}}return performTurns(0)},SIMULATOR.onPlaySkills=onPlaySkills,SIMULATOR.calculatePoints=function(forceWin){var uids=field.uids,healthStats={player:{total:0,taken:0},cpu:{total:0,taken:0}};for(var i in uids){var unit=uids[i],stats=healthStats[unit.owner];stats&&(stats.total+=unit.health,(unit.played||unit.isCommander())&&(stats.taken+=unit.health-unit.health_left))}healthStats.player.percent=healthStats.player.taken/healthStats.player.total,healthStats.cpu.percent=healthStats.cpu.taken/healthStats.cpu.total;var commander_o=field.cpu.commander;if(simConfig.cpuDeck)if(commander_o.isAlive()&&!forceWin)var points=Math.floor(25*healthStats.cpu.percent);else points=130-Math.floor(15*healthStats.player.percent);else if(commander_o.isAlive()&&!forceWin){points=Math.floor(healthStats.cpu.percent/.02);points=Math.max(5,points)}else points=200-Math.floor(healthStats.player.percent/.02);return points},Object.defineProperties(SIMULATOR,{setupDecks:{get:function(){return setupDecks},set:function(value){setupDecks=value}},setupField:{get:function(){return setupField},set:function(value){setupField=value}},config:{get:function(){return simConfig},set:function(value){simConfig=value}},deck:{get:function(){return deck},set:function(value){deck=value}},field:{get:function(){return field},set:function(value){field=value}},battlegrounds:{get:function(){return battlegrounds},set:function(value){battlegrounds=value}},simulation_turns:{get:function(){return simulation_turns},set:function(value){simulation_turns=value}},simulating:{get:function(){return simulating},set:function(value){simulating=value}},totalDeckHealth:{get:function(){return totalDeckHealth},set:function(value){totalDeckHealth=value}},totalCpuDeckHealth:{get:function(){return totalCpuDeckHealth},set:function(value){totalCpuDeckHealth=value}},userControlled:{get:function(){return userControlled},set:function(value){userControlled=value}}})}(),function(angular){"use strict";function filterByParent(unfiltered,parentID,parentIDField){return unfiltered.filter(function(entry){return entry[parentIDField]==parentID})}function filterChildren(unfiltered,parentID,parents,childrenField,childIDField){var parent=parents.filter(function(parent){return parent.id==parentID})[0];if(parent){var children=parent[childrenField];return unfiltered.filter(function(child){var childID=child[childIDField];return 0<=children.indexOf(childID)})}return[]}angular.module("core",[]).filter("forMissions",function(){return function(campaigns,missions){if(!campaigns||!missions)return campaigns;for(var newCampaigns=[],i=0,len=campaigns.length;i<len;i++){for(var campaign=campaigns[i],missionsInCampaign=campaign.missions,inCampaign=!0,j=0;j<missionsInCampaign.length;j++){if(!missions[missionsInCampaign[j]]){inCampaign=!1;break}}inCampaign&&newCampaigns.push(campaign)}return newCampaigns}}).filter("filterByParent",function(){return filterByParent}).filter("filterChildren",function(){return filterChildren}),angular.module("simulatorApp",["core"]).controller("SimulatorCtrl",["$scope","$window",function($scope,$window){function ToArray(table){var IDs=Object.keys(table);IDs.sort(function(a,b){return Number(a)-Number(b)});for(var list=[],i=0;i<IDs.length;i++){var entry=table[IDs[i]];list.push(entry)}return list}function toArray(object){var ary=[];for(var key in object)ary.push(object[key]);return ary}$scope.locations=[],$scope.campaigns=[],$scope.missions=$window.TITANS,$scope.raids=$window.RAIDS,$scope.battlegrounds=$window.BATTLEGROUNDS,$scope.mapBattlegrounds=toArray($window.MAP_BATTLEGROUNDS),$scope.campaignBGEs=[],$scope.tower=!1,$scope.auto=!1,$scope.debugMode=!1,$scope.selections={location:"",campaign:"",mission:"",raid:""},$scope.titans=function(){$scope.campaigns=toArray($window.CAMPAIGNS),$scope.missions=$window.TITANS},$scope.campaignSections=function(){$scope.locations=ToArray($window.LOCATIONS).sort(function(locationA,locationB){return Number(locationA.id)-Number(locationB.id)}),$scope.missions=ToArray($window.MISSIONS),$scope.campaigns=ToArray($window.CAMPAIGNS)},$scope.filteredRaids=function(){var filtered={};return toArray($scope.raids).sort(function(raidA,raidB){return Number(raidB.id)-Number(raidA.id)}).forEach(function(raid){filtered[raid.name]||(filtered[raid.name]=raid)}),toArray(filtered).sort(function(raidA,raidB){return Number(raidA.id)-Number(raidB.id)})},$scope.getLocationClass=function(location){if(!location){var selected=$scope.selections.location;location=$scope.locations.filter(function(location){return location.id==selected})[0]}if(location){var id=Number(location.id);return 0===id?"heroUpgrade":100<=id?"event":"black"}return"grey"},$scope.getCampaignClass=function(campaign){if(!campaign){var selected=$scope.selections.campaign;campaign=$scope.campaigns.filter(function(campaign){return campaign.id==selected})[0]}return campaign?campaign.side_mission?0==campaign.location_id?"heroUpgrade":"mythic":campaign.isLocation?"location":"black":"grey"},$scope.$watch("selections.location",function(newValue,oldValue){$scope.selections.campaign=""}),$scope.$watch("selections.campaign",function(newValue,oldValue){$scope.selections.mission=""}),$scope.towerTypes=["Castle Tower","Cannon Tower","Tree of Life"],$scope.selectableBattlegrounds=function(){var selectable=[],names={};return Object.keys($scope.battlegrounds).sort(function(a,b){return Number(b)-Number(a)}).forEach(function(id){var BGE=$scope.battlegrounds[id],bgeId=Number(BGE.id);if(!BGE.hidden&&!BGE.isTower){if(selectable.push(BGE),BGE.classes=[],names[BGE.name])if(0<=current_bges.indexOf(bgeId)){var prevBGE=names[BGE.name];prevBGE.obsolete=!0,prevBGE.classes.push("obsolete"),names[BGE.name]=BGE}else BGE.obsolete=!0,BGE.classes.push("obsolete");else names[BGE.name]=BGE;0<=current_bges.indexOf(bgeId)&&BGE.classes.push("current-bge")}}),selectable.sort(function(a,b){return a.name.localeCompare(b.name)||a.id-b.id}),selectable},$scope.personalBattlegrounds=function(){var selectable=[];for(var id in $scope.battlegrounds){var BGE=$scope.battlegrounds[id],bgeID=Number(BGE.id);1e3<bgeID&&bgeID<2e3&&selectable.push(BGE)}return selectable.sort(function(a,b){return a.id-b.id}),selectable},$scope.towerTypes=function(){var towerTypes=[];for(var id in $scope.battlegrounds){var BGE=$scope.battlegrounds[id];BGE.isTower&&towerTypes.push(BGE)}return towerTypes.sort(function(a,b){return a.id-b.id}),towerTypes},$scope.$watch("debugMode",function(newValue,oldValue){})}])}(angular);var loadDeckDialog,mapBGEDialog,storageAPI={};!function(angular){"use strict";var module;try{module=angular.module("simulatorApp")}catch(loadError){module=angular.module("simulatorApp",[])}module.controller("DeckStorageCtrl",["$scope","$window",function($scope,$window){$scope.getSavedDecks=$window.storageAPI.getSavedDecks,$scope.keys=function(obj){return obj?Object.keys(obj):[]}}])}(angular),function(){try{var storage=window.localStorage,x="__storage_test__";return storage.setItem(x,x),storage.removeItem(x),!0}catch(e){return!1}}()?function(){var SaveFields_decks="SavedDecks",SaveFields_tutorial="Tutorial";function getStorage(storageName){var storage=localStorage.getItem(storageName);if(storage)try{storage=JSON.parse(storage)}catch(err){storage={}}else storage={};return storageAPI.data[storageName]=storage}storageAPI.initialize=function(){var currentPage=getCurrentPage();!function(){var storage=getStorage(SaveFields_decks);void 0===storage.savedDecks&&storageAPI.setField(SaveFields_decks,"savedDecks",storage)}(),storageAPI.getField(SaveFields_decks,"savedDecks",{}),storageAPI.shouldShowTutorial=storageAPI.getField(SaveFields_tutorial,currentPage,!0)[currentPage];var cachedOnUpdate=storageAPI.onUpdateDecks;storageAPI.onUpdateDecks=function(savedDecks){cachedOnUpdate(),storageAPI.setField(SaveFields_decks,"savedDecks",savedDecks)};var cachedSetShowTutorial=storageAPI.setShowTutorial;storageAPI.setShowTutorial=function(value){cachedSetShowTutorial(value),storageAPI.setField(SaveFields_tutorial,currentPage,value)}},storageAPI.getField=function(storageName,fieldName,defaultValue){var value=getStorage(storageName)[fieldName];return void 0===value&&(value=defaultValue,storageAPI.setField(storageName,fieldName,value)),value},storageAPI.setField=function(storageName,fieldName,newValue){var storage=getStorage(storageName);storage[fieldName]=newValue,localStorage.setItem(storageName,JSON.stringify(storage))},window.addEventListener("storage",function(e){"__storage_test__"!==e.key&&localStorage.getItem(e.key)!==e.newValue&&angular.element("#loadDeckDialog").scope().$apply(localStorage.setItem(e.key,e.newValue))})}():function(){storageAPI.initialize=function(){storageAPI.getSavedDecks=function(){return{}},storageAPI.loadDeck=notSupported,storageAPI.deleteDeck=notSupported,storageAPI.clearDecks=notSupported,storageAPI.getField=function(storageName,fieldName,defaultValue){return defaultValue},storageAPI.setField=function(){},storageAPI.savedDecks={},storageAPI.shouldShowTutorial=!0};var notSupported=function(name,hash){alert("Your browser does not support this feature.")}}(),function(){var $loadDialogScope,SaveFields_decks="SavedDecks";storageAPI.data={},storageAPI.getSavedDecks=function(){return storageAPI.getField(SaveFields_decks,"savedDecks",{})},storageAPI.saveDeck=function(name,hash){var savedDecks=storageAPI.getSavedDecks();savedDecks[name]=hash,storageAPI.onUpdateDecks(savedDecks)},storageAPI.loadDeck=function(name){return storageAPI.getSavedDecks()[name]},storageAPI.deleteDeck=function(name){var savedDecks=storageAPI.getSavedDecks();delete savedDecks[name],storageAPI.onUpdateDecks(savedDecks)},storageAPI.clearDecks=function(name){var savedDecks=storageAPI.getSavedDecks();for(var name in savedDecks)delete savedDecks[name];storageAPI.onUpdateDecks(savedDecks)},storageAPI.onUpdateDecks=function(){($loadDialogScope=$loadDialogScope||angular.element("#loadDeckDialog").scope()).$apply()},storageAPI.setShowTutorial=function(value){shouldShowTutorial=value},storageAPI.initialize()}(),$(function(){$("#deck1").change(function(){this.value=this.value.trim(),deckChanged("attack_deck",hash_decode(this.value),"player")}),$("#deck2").change(function(){this.value=this.value.trim(),deckChanged("defend_deck",hash_decode(this.value),"cpu")}),$("#battleground").change(function(){$("#deck1").change(),$("#deck2").val()?$("#deck2").change():$("#mission").val()?$("#mission").change():$("#raid").val()&&$("#raid").change()});for(var bges=$("label[bge-desc]"),i=0;i<bges.length;i++){$(bges[i]).hover(showTooltip,hideTooltip)}function showTooltip(event){var $container=$("#tooltip"),$text=$("#tooltip-text");$text.html($(event.target).attr("bge-desc")),$text.width(200),$container.show(),$("#tooltip .arrow").css("borderTopWidth",0).css("borderBottomWidth",0);var offset=$(event.target).offset();offset.left-=230,offset.top-=$container.outerHeight()/2-10,$container.offset(offset);var arrowHeight=$text.innerHeight()/2-4;$("#tooltip .arrow").css("borderTopWidth",arrowHeight).css("borderBottomWidth",arrowHeight)}function hideTooltip(event){$("#tooltip").hide()}function deckChanged(deckID,newDeck,owner){var $deck=$("#"+deckID);if($deck.children().remove(),!_DEFINED("seedtest")){var simConfig=SIM_CONTROLLER.getConfiguration();SIMULATOR.config=simConfig;var battlegrounds=getBattlegrounds(simConfig);battlegrounds=battlegrounds.onCreate.filter(function(bge){return!("player"===owner&&bge.enemy_only||"cpu"===owner&&bge.ally_only)}),$deck.append(CARD_GUI.makeDeckHTML(newDeck,!1,battlegrounds))}}function setDeckSortable(deckField,associatedHashField){$(deckField).sortable({items:".card:not(.commander):not(.blank)",tolerance:"intersect",helper:function(event,ui){return ui.clone()},start:function(event,ui){var origPos=ui.placeholder.index()-1;ui.item.data("origPos",origPos),$(ui.item).hide()},stop:function(event,ui){var origPos=ui.item.data("origPos")-1,newPos=ui.item.index()-1,hashField=$(associatedHashField),deck=hash_decode(hashField.val()),array=deck.deck;array.splice(newPos,0,array.splice(origPos,1)[0]);var hash=hash_encode(deck);hashField.val(hash)}})}function loadDeck(hashField){$('label[for="loadDeckName"]').html("<strong>Deck:</strong>"),loadDeckDialog.dialog("open"),loadDeckDialog.dialog("option","position",{my:"center",at:"center",of:window}),loadDeckDialog.hashField=hashField}document.querySelector("#load-player").addEventListener("click",function(){loadDeck("#deck1")}),document.querySelector("#load-cpu").addEventListener("click",function(){loadDeck("#deck2")}),document.querySelector("#config-map-bge").addEventListener("click",function(){mapBGEDialog.dialog("open"),mapBGEDialog.dialog("option","position",{my:"center",at:"center",of:window})});var dark=!1;document.querySelector("#toggleTheme").addEventListener("click",function(){dark?($("#theme").attr("href","dist/light.min.css"),$("#toggleTheme").val("Dark Theme")):($("#theme").attr("href","dist/dark.min.css"),$("#toggleTheme").val("Light Theme")),dark=!dark}),$(".accordion").accordion({collapsible:!0,active:!1,heightStyle:"content"}).filter(".start-open").accordion("option","active",0),$("#raid, #raid_level").change(function(){var newDeck,selectedRaid=$("#raid").val(),raidLevel=$("#raid_level");selectedRaid?(newDeck=load_deck_raid(selectedRaid,raidLevel.val()),"Dungeon"===RAIDS[selectedRaid].type?raidLevel.attr("max",500):raidLevel.attr("max",40)):(newDeck=hash_decode(""),raidLevel.attr("max",40)),deckChanged("defend_deck",newDeck,"cpu")}),$("#location, #campaign").change(function(){$("#mission").change()}),$("#mission, #mission_level").change(function(){var newDeck,missionID=$("#mission").val();missionID?newDeck=load_deck_mission(missionID,$("#mission_level").val()):newDeck=hash_decode("");deckChanged("defend_deck",newDeck,"cpu")}),loadDeckDialog=$("#loadDeckDialog").dialog({autoOpen:!1,minWidth:320,modal:!0,resizable:!1,buttons:{Delete:function(){var name=$("#loadDeckName").val();storageAPI.deleteDeck(name)},Load:function(){var name=$("#loadDeckName").val();!function(newHash,hashField){$(hashField).val(newHash).change()}(storageAPI.loadDeck(name),loadDeckDialog.hashField),loadDeckDialog.dialog("close")},Cancel:function(){loadDeckDialog.dialog("close")}}}),mapBGEDialog=$("#bgeDialog").dialog({autoOpen:!1,minWidth:320,modal:!0,resizable:!1,buttons:{OK:function(){mapBGEDialog.dialog("close")},Cancel:function(){mapBGEDialog.dialog("close")}}}),deckChanged("attack_deck",hash_decode("")),deckChanged("defend_deck",hash_decode("")),debug_dump_decks=function(){},setDeckSortable("#attack_deck","#deck1"),setDeckSortable("#defend_deck","#deck2"),processQueryString()});var frames=[],frameInterval=null;function drawField(field,hand,callback,turn,activeUnit){var newFrame=CARD_GUI.doDrawField(field,hand,callback,turn,activeUnit);frames.push(newFrame),frameInterval||(drawFrames(),frameInterval=setInterval(drawFrames,500))}function clearFrames(){frames=[],clearInterval(frameInterval),frameInterval=null}var deckPopupDialog,style,disabledInterval=!1;function drawFrames(){if(0===frames.length)disabledInterval?(clearInterval(frameInterval),frameInterval=null):disabledInterval=!0;else{var frame=frames.splice(0,1)[0];$("#cardSpace").children().remove().end().append(frame),disabledInterval=!1}}function processQueryString(){if($("#header").load("templates/header.html",function(){"undefined"!=typeof showTutorial&&$("#help").click(showTutorial)}),$.holdReady(!0),$("#footer").load("templates/footer.html",function(){$.holdReady(!1)}),!document.getElementById("ui"))return 0;angular.element(document.getElementById("ui")).scope();$("#generate_link").on("click",display_generated_link),$("#btn_simulate").on("click",SIM_CONTROLLER.startsim),$("#btnStop").on("click",SIM_CONTROLLER.stopsim),$("#display_history").on("click",display_history),$("#deck1").val(_GET("deck1")).change(),$("#deck2").val(_GET("deck2")).change(),$("#surge").prop("checked",_DEFINED("surge")),$("#siege").prop("checked",_DEFINED("siege"));var tower_level=Math.min(Math.max(_GET("tower_level")||18,0),18);$("#tower_level").val(tower_level);var tower_type=_GET("tower_type")||501;$("#tower_type").val(tower_type),$("#auto_mode").prop("checked",_DEFINED("auto_mode")),$("#tournament").prop("checked",_DEFINED("tournament")),$("#ordered").prop("checked",_DEFINED("ordered")),$("#exactorder").prop("checked",_DEFINED("exactorder")),$("#ordered2").prop("checked",_DEFINED("ordered2")),$("#exactorder2").prop("checked",_DEFINED("exactorder2"));var locationID=_GET("location"),campaignID=_GET("campaign"),missionID=_GET("mission"),raidID=_GET("raid");if(missionID&&(campaignID=campaignID||Object.keys(CAMPAIGNS).filter(function(campaignID){return 0<=CAMPAIGNS[campaignID].missions.indexOf(missionID)})[0]),campaignID&&(locationID||(locationID=CAMPAIGNS[campaignID].location_id,$("#location").val(locationID).change())),locationID&&$("#location").val(locationID).change(),campaignID&&$("#campaign").val(campaignID).change(),missionID&&($("#mission_level").val(_GET("mission_level")||7),$("#mission").val(missionID).change()),raidID&&($("#raid_level").val(_GET("raid_level")||25),$("#raid").val(raidID).change()),_DEFINED("bges"))for(var bges=_GET("bges"),i=0;i<bges.length;i+=2){var bge=base64_to_decimal(bges.substring(i,i+2));$("#battleground_"+bge).prop("checked",!0)}else for(document.getElementsByName("battleground"),i=0;i<current_bges.length;i++)$("#battleground_"+current_bges[i]).prop("checked",!0);if(bges=_GET("selfbges"))for(i=0;i<bges.length;i+=2){bge=base64_to_decimal(bges.substring(i,i+2))+1e4;$("#self-battleground_"+bge).prop("checked",!0)}if(bges=_GET("enemybges"))for(i=0;i<bges.length;i+=2){bge=base64_to_decimal(bges.substring(i,i+2))+1e4;$("#enemy-battleground_"+bge).prop("checked",!0)}var mapBges=_GET("mapBges");if(mapBges&&setSelectedMapBattlegrounds(mapBges),$("#battleground").change(),$("#sims").val(_GET("sims")||1e4),_DEFINED("debug")&&$("#debug").click(),_DEFINED("mass_debug")&&$("#mass_debug").click(),_DEFINED("loss_debug")&&$("#loss_debug").click(),_DEFINED("win_debug")&&$("#win_debug").click(),_DEFINED("play_debug")&&$("#play_debug").click(),document.title="SimSpellstone "+text_version+" - The Spellstone Simulator that runs from your browser!",_DEFINED("autostart")&&!_DEFINED("latestCards"))SIM_CONTROLLER.startsim(1);else if(_DEFINED("unit_tests")){var body=document.getElementsByTagName("body")[0],script=document.createElement("script");script.src="scripts/unit_tests.js",body.appendChild(script),script.onload=function(){var script=document.createElement("script");script.src="scripts/unit_test_runner.js",body.appendChild(script)}}document.getElementById("missionDeckDialog")&&(deckPopupDialog=$("#missionDeckDialog").dialog({autoOpen:!1,minWidth:500,minHeight:20,modal:!0,resizable:!1,draggable:!1,buttons:{Close:function(){deckPopupDialog.dialog("close")}},open:function(event,ui){$(".ui-dialog-titlebar-close",ui.dialog|ui).hide()}}))}window.addEventListener("error",function(message,url,linenumber){if(0==linenumber){var msg="<br><br><i>Error Message:</i><br><br><i>It appears you're having trouble loading SimSpellstone. Thanks.</i><br><br>";return outp?outp(msg):document.write(msg),1}var err_msg="JavaScript error:\n "+message+"\n on line "+linenumber+"\n for "+url;err_msg+="\n",err_msg+="Browser CodeName: "+navigator.appCodeName+"\n",err_msg+="Browser Name: "+navigator.appName+"\n",err_msg+="Browser Version: "+navigator.appVersion+"\n",err_msg+="Cookies Enabled: "+navigator.cookieEnabled+"\n",err_msg+="Platform: "+navigator.platform+"\n",err_msg+="User-agent header: "+navigator.userAgent+"\n",err_msg+="SimSpellstone version: "+text_version+"\n";var simConfig=SIMULATOR.config;simConfig.playerDeck&&(err_msg+="Deck hash: "+simConfig.playerDeck+"\n"),simConfig.playerOrdered&&(err_msg+="Ordered: Yes\n"),simConfig.playerExactOrdered&&(err_msg+="Exact-order: Yes\n"),simConfig.surge&&(err_msg+="Surge: Yes\n"),simConfig.cpuDeck&&(err_msg+="Enemy deck hash: "+simConfig.cpuDeck+"\n"),simConfig.cpuOrdered&&(err_msg+="Enemy Ordered: Yes\n"),simConfig.cpuExactOrdered&&(err_msg+="Enemy Exact-order: Yes\n"),simConfig.campaignID&&(err_msg+="Campaign ID: "+simConfig.campaignID+"\n"),simConfig.missionID&&(err_msg+="Mission ID: "+simConfig.missionID+"\n"),simConfig.raidID&&(err_msg+="Raid ID: "+simConfig.raidID+"\n"),simConfig.getbattleground&&(err_msg+="Battleground ID: "+simConfig.getbattleground+"\n"),SIMULATOR.games&&(err_msg+="Sims run so far: "+SIMULATOR.games+"\n");try{err_msg+="Link to reproduce: "+generate_link()+"\n"}catch(_){}outp('<br><br><i>Error Message:</i><br><textarea cols=50 rows=6 onclick="this.select()"><blockquote>'+err_msg+"</blockquote></textarea>"+echo),SIMULATOR.current_timeout&&clearTimeout(SIMULATOR.current_timeout)});var u_black=!1;function toggle_u(){var append=!1;if(void 0===style)append=!0,style=document.createElement("style");else for(;style.hasChildNodes();)style.removeChild(style.firstChild);var rules,head=document.getElementsByTagName("head")[0];rules=u_black?(u_black=!1,document.createTextNode("u { text-decoration: none; font-style:normal; color: #dddddd; font-weight: normal; }")):(u_black=!0,document.createTextNode("u { text-decoration: none; font-style:normal; color: #000000; font-weight: normal; }")),style.type="text/css",style.styleSheet?style.styleSheet.cssText=rules.nodeValue:style.appendChild(rules),!0===append&&head.appendChild(style)}function toggleUI(display){display?$("#ui").show():$("#ui").hide()}function showUI(){toggleUI(!0),document.getElementById("stop").style.display="none"}function hideUI(){$(".accordion").accordion("option","active",null),toggleUI(!1),document.getElementById("stop").style.display="block"}function getSelectedBattlegrounds(prefix){prefix=prefix||"";for(var selectedBattlegrounds=[],bgCheckBoxes=document.getElementsByName(prefix+"battleground"),i=0;i<bgCheckBoxes.length;i++){var checkbox=bgCheckBoxes[i];checkbox&&checkbox.checked&&selectedBattlegrounds.push(checkbox.value)}return selectedBattlegrounds=selectedBattlegrounds.join()}function getSelectedMapBattlegrounds(){for(var selectedMapBattlegrounds=[],locationID=$("#location").val(),selects=document.getElementsByName("map-battleground"),i=0;i<selects.length;i++){var select=selects[i];0<select.value&&selectedMapBattlegrounds.push(locationID+"-"+i+"-"+select.value)}return selectedMapBattlegrounds=selectedMapBattlegrounds.join()}function setSelectedMapBattlegrounds(mapBgeString){for(var selects=document.getElementsByName("map-battleground"),i=0;i<mapBgeString.length&&i<selects.length;i++)selects[i].value=mapBgeString[i]}function outp(text){$("#content").html(text)}function outputTurns(turnData,showAll){SIMULATOR.closeDiv&&(turnData+="</div>",SIMULATOR.closeDiv=!1),outp(turnData="<input id='show-turns' type='button' value='Show All' /> <div id='turn-container'>Turn: <select id='turn-picker'></select></div> <div>"+turnData+"</div>");for(var numTurns=$(".turn-info").hide().length,options=[],i=0;i<numTurns;i++){var turn=i+1;options.push("<option value='"+i+"'>"+turn+"</option>")}var lastTurn=i-1;lastTurn&&SIMULATOR.closeDiv&&lastTurn--,$("#turn-picker").append(options).change(function(event){var turn=event.target.selectedIndex;$(".turn-info").hide().eq(turn).show()}).val(lastTurn).change();var hidden=!0,showTurnsBtn=$("#show-turns").click(function(){if(hidden=!hidden){var turn=$("#turn-picker").val();$(".turn-info").hide().eq(turn).show(),$("#turn-container").show(),this.value="Show All"}else $(".turn-info").show(),$("#turn-container").hide(),this.value="Show One"});showAll&&showTurnsBtn.click()}function showWinrate(){if(SIMULATOR.config.debug||0==SIMULATOR.simsLeft){var links="";if(links+='<br><br><i>Non-autostart link</i><br><a href="'+generate_link()+'">'+generate_link()+'</a><br><br><i>Autostart link</i><br><a href="'+generate_link(1)+'">'+generate_link(1)+"</a><br><br>",SIMULATOR.config.debug)return links}var wins=SIMULATOR.wins,losses=SIMULATOR.losses,draws=SIMULATOR.draws,games=SIMULATOR.games,points=SIMULATOR.points,simsLeft=SIMULATOR.simsLeft,totalTurns=SIMULATOR.total_turns,winrate=(100*(wins/games)).toFixed(2)+"%";$("#wins").html(wins),$("#winrate").html(winrate);var lossrate=losses/games*100;lossrate=lossrate.toFixed(2)+"%",$("#losses").html(losses),$("#lossrate").html(lossrate);var drawrate=draws/games*100;drawrate=drawrate.toFixed(2)+"%",$("#draws").html(draws),$("#drawrate").html(drawrate);var mErr=marginOfError(wins,games);$("#marginGames").html((mErr*games).toFixed(0)),mErr=mErr.toFixed(2)+"%",$("#marginPercent").html(mErr);var percentComplete=(100*games/(games+simsLeft)).toFixed("2")+"%";$(".battleCount").html(games),$("#percentComplete").html(percentComplete),$("#avgLength").html((totalTurns/games).toFixed(1)),$("#avgPoints").html((points/games).toFixed(2)),$("#winrateTable").show();var full_table="";if(0==SIMULATOR.simsLeft){full_table+=links;var current_deck="",deck=[],deck1Hash=document.getElementById("deck1").value;deck1Hash&&(deck.player=hash_decode(deck1Hash)),deck.player&&(current_deck=hash_encode(deck.player)),battle_history+=winrate+" (+/- "+mErr+") &nbsp; &nbsp; "+current_deck+"<br>"}return full_table}function hideTable(){$("#winrateTable").hide()}function setSimStatus(simStatusMsg,elapse,simsPerSec){if($("#simStatusMsg").html(simStatusMsg),elapse&&simsPerSec){var games=SIMULATOR.games,totalSims=games+SIMULATOR.simsLeft,progress="("+games+"/"+totalSims+") "+((100*games/totalSims).toFixed("2")+"%");$("#progress").html(progress),$("#speed").show(),$("#elapsed").html(elapse),$("#simsPerSec").html(simsPerSec)}else $("#progress").html(""),$("#speed").hide();$("#simulationStatus").show()}function marginOfError(wins,games){if(games<=1)return 1;var p=wins/games,N=games;return 100*(1.96*Math.sqrt(p*(1-p)/N)+.5/N)}function generate_link(autostart){var d=0,url_base=document.URL,index_of_query=url_base.indexOf("?");0<index_of_query&&(url_base=url_base.substring(0,index_of_query));var parameters=[];addValueParam(parameters,"deck1"),addValueParam(parameters,"deck2"),addValueParam(parameters,"location"),addValueParam(parameters,"campaign"),addValueParam(parameters,"mission"),addValueParam(parameters,"mission_level"),addValueParam(parameters,"raid"),addValueParam(parameters,"raid_level");var mapBges=$("select[name=map-battleground]").toArray().reduce(function(acc,val){return acc+val.value},"");mapBges.length&&parameters.push("mapBges="+mapBges),addBoolParam(parameters,"surge"),addBoolParam(parameters,"siege")&&(addValueParam(parameters,"tower_level"),addValueParam(parameters,"tower_type")),addBoolParam(parameters,"auto_mode"),addBoolParam(parameters,"tournament"),addBoolParam(parameters,"ordered"),addBoolParam(parameters,"exactorder"),addBoolParam(parameters,"ordered2"),addBoolParam(parameters,"exactorder2");for(var bges="",bgCheckBoxes=document.getElementsByName("battleground"),i=0;i<bgCheckBoxes.length;i++)(d=bgCheckBoxes[i]).checked&&(bges+=decimal_to_base64(d.value,2));parameters.push("bges="+bges);for(bges="",bgCheckBoxes=document.getElementsByName("self-battleground"),i=0;i<bgCheckBoxes.length;i++)(d=bgCheckBoxes[i]).checked&&(bges+=decimal_to_base64(d.value-1e4,2));bges&&parameters.push("selfbges="+bges);for(bges="",bgCheckBoxes=document.getElementsByName("enemy-battleground"),i=0;i<bgCheckBoxes.length;i++)(d=bgCheckBoxes[i]).checked&&(bges+=decimal_to_base64(d.value-1e4,2));return bges&&parameters.push("enemybges="+bges),addValueParam(parameters,"sims"),addBoolParam(parameters,"debug"),addBoolParam(parameters,"mass_debug"),addBoolParam(parameters,"loss_debug"),addBoolParam(parameters,"win_debug"),addBoolParam(parameters,"play_debug"),autostart&&parameters.push("autostart"),0<parameters.length?url_base+"?"+parameters.join("&"):url_base}function addValueParam(params,paramName,fieldName){var value=$("#"+(fieldName||paramName)).val();return!!value&&(params.push(paramName+"="+value),!0)}function addBoolParam(params,paramName){return!!$("#"+paramName).is(":checked")&&(params.push(paramName),!0)}var deckBuilders={};function load_deck_builder(player){if("player"==player)var playerDeck=$("#deck1").val();else{playerDeck=$("#deck2").val();var missionID=$("#mission").val(),missionLevel=$("#mission_level").val(),raidID=$("#raid").val(),raidLevel=$("#raid_level").val()}var hash,deck={commander:elariaCaptain,deck:[]};playerDeck?deck=hash_decode(playerDeck):missionID?deck=load_deck_mission(missionID,missionLevel):raidID&&(deck=load_deck_raid(raidID,raidLevel)),deck&&(hash=hash_encode(deck));var name="player"==player?"Player Deck":"Enemy Deck",deckHashField=player?$("#"+("player"==player?"deck1":"deck2")):null,currentDeckBuilder=deckBuilders[player];null==currentDeckBuilder||currentDeckBuilder.closed?deckBuilders[player]=open_deck_builder(name,hash,null,deckHashField):currentDeckBuilder.focus()}function open_deck_builder(name,hash,inventory,deckHashField){var parameters=["nosort"];hash&&parameters.push("hash="+hash),inventory&&parameters.push("inventory="+inventory),name&&parameters.push("name="+name),_DEFINED("ajax")&&parameters.push("ajax"),parameters.push("fromSim");var url="DeckBuilder.html?"+parameters.join("&"),width=Math.min(screen.width,1e3),height=Math.min(screen.height,700),left=Number((screen.width-width)/2),top=Number((screen.height-height)/2),windowFeatures="scrollbars,left="+left+"top="+top+",width="+width+",height="+height+",top="+top+",left="+left,win=window.open(url,"",windowFeatures);return $(win).load(function(name,deckHashField){return function(){deckHashField&&(win.updateSimulator=function(hash){deckHashField.val(hash).change()})}}(0,deckHashField)),win}function display_generated_link(){outp('<br><i>Non-autostart link</i><br><a href="'+generate_link()+'">'+generate_link()+'</a><br><br><i>Autostart link</i><br><a href="'+generate_link(1)+'">'+generate_link(1)+"</a><br><br>")}function clear_history(){battle_history="",display_history()}function display_history(){outp("<br><hr>"+(battle_history||"No history available.")+'<hr><br><br><input type="button" value="Clear History" onclick="clear_history();" style="text-align: center; font-weight: normal;"><br><br>')}var battle_history="",echo="",CARD_GUI={};function createImg(src,className){return $("<img>").addClass(className).attr("src",src)[0]}function createDiv(className,value){return $("<div>").addClass(className).html(value)[0]}function createSpan(className,value){return $("<span>").addClass(className).html(value)[0]}function getTutorialScript(){for(var tutorialParts=[{msg:"Welcome to SIM Spellstone!  This is a brief tutorial of how to use the Simulator."},{ui:"#setup-container",msg:"Here is where you set everything up for a simulation.",actions:[showSetup]},{ui:"#setup-container",msg:'When you are done, you can click the "Setup" bar to hide this section.',actions:[hideSetup]},{ui:"#setup-container",msg:"Clicking it again will open it back up.",actions:[showSetup]},{ui:"#attacker-container",msg:"Use this section to set up the deck for the attacker."},{ui:"#edit-player",msg:'Click "Edit" to open the DeckBuilder and create a deck.'},{ui:"#load-player",msg:'Click "Load" to choose a deck from the ones you have saved in the DeckBuilder.'},{ui:"#attacker-hash-container",msg:"If you have a deck hash, you can simply paste it here as well."},{ui:"#attacker-advanced",msg:"This section contains some additional settings for the attacker that determine how their deck is played."},{ui:"#auto-container",msg:"Check this to have fights run on auto, rather than playing them yourself.",showFor:"battle"},{ui:"#auto-container",msg:'Setting the attacker to "auto" also enables the "Ordered" and "Do Not Shuffle" options.',showFor:"battle"},{ui:"#ordered-container",msg:"Check this to have the AI attempt to play the attacker's deck as close as possible to the order that the cards are listed."},{ui:"#exactorder-container",msg:"Check this to disable shuffling of the attacker's deck."},{ui:"#defender-container",msg:"Use this section to set up the deck for the defender."},{ui:"#defender-hash-container",msg:"You can manually create a deck for the defender here."},{ui:"#pve-container",msg:"Or you can choose a PvE deck to sim against.",actions:[clearCampaign]},{ui:"#campaign-container",msg:"To choose a campaign mission, first pick a Campaign from the dropdown...",actions:[chooseCampaign]},{ui:"#mission-container",msg:"... then pick a Mission from the mission dropdown.",actions:[clearRaid,chooseCampaign,function(){$("#mission").val(11).change()}]},{ui:"#raid-container",msg:"To fight against a raid boss, pick the desired Raid from the dropdown",actions:[clearCampaign,function(){$("#raid").val(24005).change()}]},{ui:"#defender-advanced",msg:"This section contains some additional settings for the defender that determine how their deck is played.",actions:[clearRaid]},{ui:"#surge-container",msg:"Check this to have the defender go first.",showFor:"battle"},{ui:"#tower-container",msg:"Use these fields to set up a tower for the defender."},{ui:"#siege-container",msg:"Check this field to turn the tower on."},{ui:"#tower_level",msg:"This field determines the BR of the defender.  The tower's level is one less than the defender's BR."},{ui:"#tower_type",msg:"This field determines which type of tower the defender will have."},{ui:"#bge-container",msg:"Check/uncheck boxes here to set active battleground effects.",actions:[hideView,showSetup]},{ui:"#view-container",msg:'Click "View" to display the currently set decks for the attacker and defender.',actions:[hideSetup,function(){$("#view-container").accordion("option","active",0)}]},{ui:"#view-container",msg:"Click it again to hide it.",actions:[hideView]},{ui:"#sims-container",msg:"This field determines how many fights to run.",showFor:"titans"},{ui:"#btn_simulate",msg:'Click "Simulate" to run a batch of fights.',showFor:"titans"},{ui:"#btn_simulate",msg:'Click "Battle" to start a fight.',showFor:"battle"},{ui:"#generate_link",msg:'Click "Generate Link" to create a link that will open this tool with all of the current settings.'},{msg:'To view this tutorial again at any time, you can click the "Help" button.  (Note: this will reset the Simulator.)'}],currentPage=getCurrentPage(),i=0;i<tutorialParts.length;i++){var part=tutorialParts[i];part.showFor&&part.showFor!==currentPage&&tutorialParts.splice(i--,1)}function hideSetup(){$("#setup-container").accordion("option","active",null)}function showSetup(){$("#setup-container").accordion("option","active",0)}function hideView(){$("#view-container").accordion("option","active",null)}function chooseCampaign(){$("#campaign").val(1).change()}function clearCampaign(){$("#campaign").val("").change()}function clearRaid(){$("#raid").val("").change()}return tutorialParts}!function(){var assetsRoot="";function makeDeckHTML(deck,noblanks,battlegrounds){var cards=[],commander=getCardByID(deck.commander);cards.push(create_card_html(commander,!1,!1));for(var i=0,len=deck.deck.length;i<len;i++){var deckEntry=deck.deck[i];if(battlegrounds)var unit=get_card_apply_battlegrounds(deckEntry,battlegrounds);else unit=getCardByID(deckEntry);cards.push(create_card_html(unit,!1,!1))}if(!noblanks)for(;i<15;i++)cards.push(createDiv("card blank"));return cards}function make_card_list(list,compactSkills,onclick,onrightclick,skip,end){var htmlCard,lastUnit,multiplier;skip=skip||0;for(var uniqueCard=0,cards=[],i=0,len=list.length;i<len&&(!end||uniqueCard<end);i++){var listEntry=list[i],unit=getCardByID(listEntry);areEqual(unit,lastUnit)?multiplier++:(skip<=uniqueCard&&(addMult(htmlCard,multiplier),(htmlCard=create_card_html(unit,compactSkills,!(multiplier=1),onclick,onrightclick,null,i)).setAttribute("data-i",i),void 0!==listEntry.index&&htmlCard.setAttribute("data-index",listEntry.index),cards.push(htmlCard)),lastUnit=unit,uniqueCard++)}return addMult(htmlCard,multiplier),cards}function doDrawField(field,drawableHand,callback,turn,activeUnit){drawableHand=drawableHand||[];var fieldHTML=[];if(turn){var htmlTurnCounter=document.createElement("h1");htmlTurnCounter.innerHTML="Turn: "+turn+" (Currently at "+SIMULATOR.calculatePoints(!0)+" points)",fieldHTML.push(htmlTurnCounter)}var divField=createDiv("field"),activeUnitOwner=null;if(activeUnit){activeUnitOwner=activeUnit.owner;activeUnit=activeUnit.isCommander()?-1:activeUnit.key}return"player"===activeUnitOwner?(divField.appendChild(draw_field(field.cpu)),divField.appendChild(draw_field(field.player,activeUnit))):(divField.appendChild(draw_field(field.cpu,activeUnit)),divField.appendChild(draw_field(field.player))),fieldHTML.push(divField),fieldHTML.push(draw_hand(drawableHand,callback,turn)),fieldHTML.push(document.createElement("br")),fieldHTML.push(document.createElement("br")),fieldHTML}function draw_field(field,activeUnit){var cards=createDiv("float-left"),htmlCard=create_card_html(field.commander,!1,!0);-1===activeUnit&&highlightCard(htmlCard),cards.appendChild(htmlCard);var units=field.assaults;if(units)for(var i=0,len=units.length;i<len;i++){var unit=units[i];htmlCard=create_card_html(unit,!1,!0);unit.timer&&htmlCard.classList.add("inactive"),activeUnit===i&&highlightCard(htmlCard),cards.appendChild(htmlCard)}return cards}function draw_hand(hand,callback,state){for(var cards=createDiv("float-left hand"),i=0,len=hand.length;i<len;i++){var unit=hand[i];if(unit){var htmlCard=create_card_html(unit,!1);0===i?htmlCard.classList.add("left"):2===i?htmlCard.classList.add("right"):2<i&&htmlCard.classList.add("inactive");callback&&htmlCard.addEventListener("click",function(inner){return function(){SIMULATOR.choice=inner,callback(state)}}(i)),cards.appendChild(htmlCard)}}return cards}function highlightCard(htmlCard){htmlCard.style.outline="5px solid LawnGreen"}function addMult(htmlCard,multiplier){var iMult=parseInt(multiplier);if(iMult==multiplier&&(multiplier=1<iMult?iMult:null),multiplier){var multDiv=createDiv("multiplier","x"+multiplier);multDiv.setAttribute("data-count",multiplier);var multIcon=createImg(getAssetPath("cardAssets")+"multiplier.png","multiplier");htmlCard.appendChild(multIcon),htmlCard.appendChild(multDiv)}}function create_card_html(card,compactSkills,onField,onclick,onrightclick,onmouseover,state){var htmlCard=createDiv("card");htmlCard.setAttribute("data-id",card.id),htmlCard.setAttribute("data-level",card.level);for(var runes=card.runes,runeIDs=[],boosts={},i=0,len=runes.length;i<len;i++){var runeID=runes[i].id;runeIDs.push(runes[i].id);var rune=getRune(runeID);for(var key in rune.stat_boost)"skill"==key&&(key=rune.stat_boost.skill.id),boosts[key]=!0}var highlighted=card.highlighted;if(highlighted)for(i=0;i<highlighted.length;i++){boosts[key=highlighted[i]]=!0}htmlCard.setAttribute("data-runeids",runeIDs.join(","));var picture=loadCard(card.id).picture;if(picture){var icon=document.createElement("i");0==picture.indexOf("portrait_")?icon.className="portrait portrait-"+picture:icon.className="sprite sprite-"+picture,htmlCard.appendChild(icon)}card.isCommander()&&htmlCard.classList.add("commander"),htmlCard.classList.add(factions.names[card.type].toLowerCase());var divName=createDiv("card-name",(void 0!==card.uid?"("+card.uid+") ":"")+card.name),divID=createDiv("card-id","("+card.id+")");if(divName.appendChild(divID),htmlCard.appendChild(divName),!card.isCommander()){if(0<=card.attack){if(onField){card.isUnjammed()||htmlCard.classList.add("frozen");var htmlAttack=createDiv("card-attack",card.adjustedAttack().toString());card.adjustedAttack()>card.attack?htmlAttack.classList.add("increased"):card.adjustedAttack()<card.attack?htmlAttack.classList.add("decreased"):boosts.attack&&htmlAttack.classList.add("increased")}else{htmlAttack=createDiv("card-attack",card.attack.toString());boosts.attack&&htmlAttack.classList.add("increased")}htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Attack.png","attack")),htmlCard.appendChild(htmlAttack)}0<=card.cost&&(onField?card.timer&&(htmlCard.appendChild(createDiv("delay",card.timer)),htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Timer.png","timer"))):(htmlCard.appendChild(createDiv("delay",card.cost)),htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Timer.png","timer"))))}if(0<=card.health){if(onField){var htmlHealth=createDiv("card-health",card.health_left.toString());card.health_left<card.health?htmlHealth.classList.add("decreased"):boosts.health&&htmlHealth.classList.add("increased")}else{htmlHealth=createDiv("card-health",card.health.toString());boosts.health&&htmlHealth.classList.add("increased")}htmlCard.appendChild(createImg(getAssetPath("cardAssets")+"Health.png","health")),htmlCard.appendChild(htmlHealth)}var divSkills=createDiv("card-skills"),skillsShort=createDiv("card-skills-short");card.earlyActivationSkills&&getSkillsHtml(card,divSkills,skillsShort,card.earlyActivationSkills,onField,boosts),getSkillsHtml(card,divSkills,skillsShort,card.skill,onField,boosts),card.onDeathSkills&&getSkillsHtml(card,divSkills,skillsShort,card.onDeathSkills,onField,boosts),function(divSkills,skillsShort,card,onField,boosts){Object.getOwnPropertyNames(SKILL_DATA).filter(function(skillID){return 0<=["passive","toggle"].indexOf(SKILL_DATA[skillID].type)}).forEach(function(skill){!function(divSkills,skillsShort,onField,card,skillName,boosts){var value=card[skillName];if(value){var skill={id:skillName,x:value,boosted:boosts[skillName]};divSkills.appendChild(getSkillHtml(card,skill,onField)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(skill.id))}}(divSkills,skillsShort,onField,card,skill,boosts)});var flurry=card.flurry;flurry&&(divSkills.appendChild(getSkillHtml(card,flurry,onField)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(flurry.id)))}(divSkills,skillsShort,card,onField,boosts);var skillsDetail=divSkills.cloneNode(!0);if(skillsDetail.className="card-skills-detailed",skillsShort.hasChildNodes()&&(compactSkills?(htmlCard.appendChild(skillsShort),htmlCard.appendChild(divSkills)):htmlCard.appendChild(skillsDetail)),htmlCard.appendChild(createDiv("faction")),onField){var statuses=function(card){var debuffs=[];if(card.enfeebled){var status=createStatus("enfeeble",card.enfeebled);debuffs.push(status)}if(card.envenomed){status=createStatus("venom",card.envenomed);debuffs.push(status)}if(card.marked){status=createStatus("enfeeble",card.marked);debuffs.push(status)}if(card.nullified){status=createStatus("nullify",card.nullified);debuffs.push(status)}if(card.poisoned){status=createStatus("poison",card.poisoned);debuffs.push(status)}if(card.scorched&&card.scorched.amount){status=createStatus("burn",card.scorched.amount);debuffs.push(status)}var buffs=[];if(card.enraged){status=createStatus("enrage",card.enraged);debuffs.push(status)}if(card.protected){status=createStatus("protect",card.protected);buffs.push(status)}if(card.invisible){status=createStatus("evade",card.invisible);buffs.push(status)}var statuses=[];if(0<debuffs.length){for(var divDebuffs=createDiv("card-debuffs"),i=0,len=debuffs.length;i<len;i++)divDebuffs.appendChild(debuffs[i]);statuses.push(divDebuffs)}if(0<buffs.length){var divBuffs=createDiv("card-buffs");for(i=0,len=buffs.length;i<len;i++)divBuffs.appendChild(buffs[i]);statuses.push(divBuffs)}return statuses}(card);if(0<statuses.length){htmlCard.appendChild(createDiv("hidden","..."));var divStatuses=createDiv("card-statuses");for(i=0;i<statuses.length;i++){var status=statuses[i];divStatuses.appendChild(status)}htmlCard.appendChild(divStatuses)}}if(card.set){var htmlSet=function(set){var setName=setNames[set];return createImg(getAssetPath("cardAssets")+setName+".png")}(card.set);htmlSet.className="set",htmlCard.appendChild(htmlSet)}var subFactions=card.sub_type;if(subFactions.length){var subFactionsDiv=createDiv("subfaction");for(i=0;i<subFactions.length;i++){var subFactionID=subFactions[i];if(subFactionID){var htmlSubfaction=getFactionIcon(subFactionID);subFactionsDiv.appendChild(htmlSubfaction)}}htmlCard.appendChild(subFactionsDiv)}if(0<card.rarity){if(card.maxLevel>Number(card.rarity)+2)var htmlLevel=createImg(getAssetPath("cardAssets")+"Level_"+card.rarity+"_"+card.maxLevel+"_"+card.level+".png");else htmlLevel=createImg(getAssetPath("cardAssets")+"Level_"+card.rarity+"_"+card.level+".png");if(htmlLevel.className="level",9999<card.id){var fusion="1"==card.id.toString()[0]?"Dualfuse":"Quadfuse";(fusion=createImg(getAssetPath("cardAssets")+fusion+".png")).className="fusion",htmlCard.appendChild(fusion)}htmlCard.appendChild(htmlLevel)}else if(1<card.maxLevel){(htmlLevel=createImg(getAssetPath("cardAssets")+card.maxLevel+"_"+card.level+".png")).className="level",htmlCard.appendChild(htmlLevel)}return onclick&&htmlCard.addEventListener("click",function(){return onclick(htmlCard,state)}),onrightclick&&(htmlCard.oncontextmenu=function(){return onrightclick(htmlCard,state)}),onmouseover&&(htmlCard.onmouseover=function(){return onmouseover(htmlCard,state)}),htmlCard}function getSkillsHtml(card,divSkills,skillsShort,skills,onField,boosts){for(var i=0;i<skills.length;i++){var origSkill=skills[i],skill={all:origSkill.all,boosted:origSkill.boosted,c:origSkill.c,countdown:origSkill.countdown,id:origSkill.id,s:origSkill.s,x:origSkill.x,y:origSkill.y,boosted:boosts[origSkill.id]};divSkills.appendChild(getSkillHtml(card,skill,onField,i)),divSkills.appendChild(document.createElement("br")),skillsShort.appendChild(getSkillIcon(skill.id))}}function getSkillHtml(card,skill,onField,i){var htmlSkill=document.createElement("span");htmlSkill.className="skill",htmlSkill.appendChild(getSkillIcon(skill.id)),htmlSkill.innerHTML+=" ";var imbued=isImbued(card,skill.id,i),enhancement=getEnhancement(card,skill.id,skill.x);imbued?htmlSkill.classList.add("imbued"):(skill.boosted||enhancement)&&htmlSkill.classList.add("increased"),skill.all&&(htmlSkill.innerHTML+="All "),skill.y&&(htmlSkill.appendChild(getFactionIcon(skill.y)),htmlSkill.innerHTML+=" "),skill.s&&(htmlSkill.appendChild(getSkillIcon(skill.s)),htmlSkill.innerHTML+=" ");var x=(0|skill.x)+enhancement;return x&&(htmlSkill.innerHTML+=x+" "),skill.c&&(htmlSkill.innerHTML+=skill.c,onField&&(htmlSkill.innerHTML+=" ("+(skill.countdown?skill.countdown:"0")+")")),htmlSkill}function getSkillIcon(skillID){var src=getAssetPath("skills"),skillData=SKILL_DATA[skillID],icon=createImg(src+=(skillData?skillData.icon:skillID)+".png");switch(skillID){case"weakenself":case"enlarge":icon.classList.add("affect-self")}return icon.title=skillData?skillData.name:skillID,icon}function createStatus(name,value){var spanStatus=document.createElement("span");return spanStatus.appendChild(getSkillIcon(name)),value&&(spanStatus.innerHTML+=value),spanStatus}function getFactionIcon(factionID){var factionName=factions.names[factionID];return createImg(getAssetPath("factions")+factionName+".png")}function getAssetPath(subpath){return assetsRoot+"res/"+subpath+"/"}var setNames={1e3:"Basic",1100:"Legacy",7e3:"Basic",2e3:"Reward",2100:"Reward",3e3:"Premium",4e3:"BoxOnly",5e3:"Champion",5100:"Champion",5200:"Champion",9999:"StoryElements"};CARD_GUI.clearCardSpace=function(){$("#cardSpace").empty()},CARD_GUI.clearDeckSpace=function(){document.getElementById("deck").innerHTML=""},CARD_GUI.draw_deck=function(deck,noblanks){var $deck=$("#deck");return $deck.children().remove(),$deck.append(makeDeckHTML(deck,noblanks)),$deck},CARD_GUI.create_card_html=create_card_html,CARD_GUI.makeDeckHTML=makeDeckHTML,CARD_GUI.draw_card_list=function(list,compactSkills,onclick,onrightclick,skip,end){var cards=make_card_list(list,compactSkills,null,null,skip,end),$cardSpace=$("#cardSpace");return $cardSpace.empty(),$cardSpace.append(cards),$cardSpace},CARD_GUI.draw_cards=function(field,drawableHand,callback,turn){var fieldHTML=doDrawField(field,drawableHand,callback,turn);$("#cardSpace").children().remove().end().append(fieldHTML)},CARD_GUI.doDrawField=doDrawField,CARD_GUI.draw_inventory=function(deck){var cards=make_card_list(deck.deck),$cardSpace=$("#deck");return $cardSpace.children().remove(),$cardSpace.append(make_card_list([deck.commander])),$cardSpace.append(cards),$cardSpace},CARD_GUI.draw_hand=draw_hand,CARD_GUI.createItemHTML=function(name,quantity,image){var htmlCard=createDiv("card item"),background=document.createElement("i");background.className="sprite sprite-Item",htmlCard.appendChild(background),image&&((image=createImg(getAssetPath("items")+image+".png")).className="item-image",htmlCard.appendChild(image));var divName=createDiv("card-name",name);return htmlCard.appendChild(divName),htmlCard.classList.add("factionless"),htmlCard.appendChild(createDiv("faction")),addMult(htmlCard,quantity),htmlCard},CARD_GUI.addMult=addMult,CARD_GUI.addWeight=function(htmlCard,weight){if(0<weight){var weightDiv=createDiv("weight",(100*weight).toFixed(2)+"%");weightDiv.setAttribute("data-count",weight);var weightIcon=createImg(getAssetPath("cardAssets")+"multiplier.png","weight");htmlCard.appendChild(weightIcon),htmlCard.appendChild(weightDiv)}},CARD_GUI.setNames=setNames,Object.defineProperties(CARD_GUI,{assetsRoot:{get:function(){return assetsRoot},set:function(value){assetsRoot=value}}})}(),$(document).ready(function(){var tutorialParts=getTutorialScript(),overlayHtml=$("<div></div>");function checkTutorial(){storageAPI.shouldShowTutorial?showTutorial():closeTutorial()}function showTutorial(){tutorialIndex=0,setTutorial();$("#tutorial").show()}$(document.body).append(overlayHtml),overlayHtml.load("templates/tutorial-overlay.html",null,function(){overlayHtml.replaceWith(function(){return $(this).contents()}),$("#tutorial-show").prop("checked",storageAPI.shouldShowTutorial).change(function(event){storageAPI.setShowTutorial(this.checked)}),$("#help").click(showTutorial),$("#tutorial-close, #tutorial-skip").click(closeTutorial),$("#tutorial-next").click(nextTutorial),$("#tutorial-prev").click(previousTutorial),"undefined"==typeof delayTutorial&&checkTutorial()});var uiTimer,tutorialIndex=0;function nextTutorial(){tutorialIndex++,setTutorial()}function previousTutorial(){tutorialIndex--,setTutorial()}function closeTutorial(){$("#tutorial").hide(),$("#tutorial-permahide").is(":checked")&&storageAPI.hideTutorial()}function setTutorial(){clearTimeout(uiTimer);var tutorialPart=tutorialParts[tutorialIndex],actions=tutorialPart.actions;if(actions)for(var i=0;i<actions.length;i++)actions[i]();var msg=tutorialPart.msg,uiFocus=tutorialPart.ui;if(uiFocus){var target=$(uiFocus);tutorialPart.dialog&&(target=target.parent()),showUI(target),actions&&(uiTimer=setTimeout(showUI,500,target)),msg.indexOf(!1)&&(msg=msg.replace(/\{0\}/g,target.text()))}else $(".overlay-fog").width(0).height(0);$("#tutorialMessage").text(msg),tutorialIndex<tutorialParts.length-1?($("#tutorial-next").show(),$("#tutorial-close").hide()):($("#tutorial-next").hide(),$("#tutorial-close").show()),0<tutorialIndex?$("#tutorial-prev").removeClass("disabled"):$("#tutorial-prev").addClass("disabled")}function showUI(target){var position=target.offset();$(".overlay-fog").css({top:position.top-2+"px",left:position.left-2+"px"}).width(target.outerWidth()+4+"px").height(target.outerHeight()+4+"px")}window.showTutorial=showTutorial,window.checkTutorial=checkTutorial});
//# sourceMappingURL=simulator.min.js.map